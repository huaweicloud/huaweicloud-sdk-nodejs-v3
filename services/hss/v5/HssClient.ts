import { HcClient } from "@huaweicloud/huaweicloud-sdk-core/HcClient";
import { ClientBuilder } from "@huaweicloud/huaweicloud-sdk-core/ClientBuilder";
import { SdkResponse } from "@huaweicloud/huaweicloud-sdk-core/SdkResponse";

import { AccountResponseInfo } from './model/AccountResponseInfo';
import { Action } from './model/Action';
import { AddAccountsRequestInfo } from './model/AddAccountsRequestInfo';
import { AddAppWhitelistPolicyHostRequest } from './model/AddAppWhitelistPolicyHostRequest';
import { AddAppWhitelistPolicyHostRequestInfo } from './model/AddAppWhitelistPolicyHostRequestInfo';
import { AddAppWhitelistPolicyHostResponse } from './model/AddAppWhitelistPolicyHostResponse';
import { AddAppWhitelistPolicyProcessInfo } from './model/AddAppWhitelistPolicyProcessInfo';
import { AddAppWhitelistPolicyProcessRequest } from './model/AddAppWhitelistPolicyProcessRequest';
import { AddAppWhitelistPolicyProcessRequestInfo } from './model/AddAppWhitelistPolicyProcessRequestInfo';
import { AddAppWhitelistPolicyProcessResponse } from './model/AddAppWhitelistPolicyProcessResponse';
import { AddBaselineWhiteListRequest } from './model/AddBaselineWhiteListRequest';
import { AddBaselineWhiteListRequestBody } from './model/AddBaselineWhiteListRequestBody';
import { AddBaselineWhiteListRequestBodyRuleList } from './model/AddBaselineWhiteListRequestBodyRuleList';
import { AddBaselineWhiteListResponse } from './model/AddBaselineWhiteListResponse';
import { AddCceIntegrationProtectionRequest } from './model/AddCceIntegrationProtectionRequest';
import { AddCceIntegrationProtectionResponse } from './model/AddCceIntegrationProtectionResponse';
import { AddHostsGroupRequest } from './model/AddHostsGroupRequest';
import { AddHostsGroupRequestInfo } from './model/AddHostsGroupRequestInfo';
import { AddHostsGroupResponse } from './model/AddHostsGroupResponse';
import { AddLoginWhiteListRequest } from './model/AddLoginWhiteListRequest';
import { AddLoginWhiteListRequestInfo } from './model/AddLoginWhiteListRequestInfo';
import { AddLoginWhiteListResponse } from './model/AddLoginWhiteListResponse';
import { AddPolicyGroupRequest } from './model/AddPolicyGroupRequest';
import { AddPolicyGroupRequestInfo } from './model/AddPolicyGroupRequestInfo';
import { AddPolicyGroupResponse } from './model/AddPolicyGroupResponse';
import { AddPolicyRequest } from './model/AddPolicyRequest';
import { AddPolicyRequestInfo } from './model/AddPolicyRequestInfo';
import { AddPolicyResponse } from './model/AddPolicyResponse';
import { AddProtectionPolicyInfoRequestInfo } from './model/AddProtectionPolicyInfoRequestInfo';
import { AddProtectionPolicyRequest } from './model/AddProtectionPolicyRequest';
import { AddProtectionPolicyResponse } from './model/AddProtectionPolicyResponse';
import { AddRegistryRequest } from './model/AddRegistryRequest';
import { AddRegistryRequestBody } from './model/AddRegistryRequestBody';
import { AddRegistryResponse } from './model/AddRegistryResponse';
import { AddSystemUserWhiteListRequest } from './model/AddSystemUserWhiteListRequest';
import { AddSystemUserWhiteListRequestInfo } from './model/AddSystemUserWhiteListRequestInfo';
import { AddSystemUserWhiteListResponse } from './model/AddSystemUserWhiteListResponse';
import { AgentId } from './model/AgentId';
import { AgentIdRes } from './model/AgentIdRes';
import { AgentInstallScriptResponseInfo } from './model/AgentInstallScriptResponseInfo';
import { AgentPolicyInfo } from './model/AgentPolicyInfo';
import { AgentStatus } from './model/AgentStatus';
import { AgentVersion } from './model/AgentVersion';
import { AlarmWhiteListRequestInfo } from './model/AlarmWhiteListRequestInfo';
import { AlarmWhiteListResponseInfo } from './model/AlarmWhiteListResponseInfo';
import { AntiViruOperateType } from './model/AntiViruOperateType';
import { AntiVirusEventWhiteRuleListRequestInfo } from './model/AntiVirusEventWhiteRuleListRequestInfo';
import { AntiVirusHandleHistory } from './model/AntiVirusHandleHistory';
import { AntiVirusHostResponseInfo } from './model/AntiVirusHostResponseInfo';
import { AntiVirusPaidHostResponseInfo } from './model/AntiVirusPaidHostResponseInfo';
import { AntiVirusPolicyHostResponseInfo } from './model/AntiVirusPolicyHostResponseInfo';
import { AntiVirusPolicyResponseInfo } from './model/AntiVirusPolicyResponseInfo';
import { AntiVirusResultResponseInfo } from './model/AntiVirusResultResponseInfo';
import { AntiVirusTaskHostResponseInfo } from './model/AntiVirusTaskHostResponseInfo';
import { AntiVirusTaskResponseInfo } from './model/AntiVirusTaskResponseInfo';
import { AntivirusEventType } from './model/AntivirusEventType';
import { AntivirusResultDetailInfo } from './model/AntivirusResultDetailInfo';
import { AppChangeResponseInfo } from './model/AppChangeResponseInfo';
import { AppName } from './model/AppName';
import { AppPolicyInfoList } from './model/AppPolicyInfoList';
import { AppResponseInfo } from './model/AppResponseInfo';
import { AppStatisticResponseInfo } from './model/AppStatisticResponseInfo';
import { AppWhitelistAbnormalInfo } from './model/AppWhitelistAbnormalInfo';
import { AppWhitelistEventDetailResInfo } from './model/AppWhitelistEventDetailResInfo';
import { AppWhitelistEventResponseInfo } from './model/AppWhitelistEventResponseInfo';
import { AppWhitelistHostResponseInfo } from './model/AppWhitelistHostResponseInfo';
import { AppWhitelistPolicyHostResponseInfo } from './model/AppWhitelistPolicyHostResponseInfo';
import { AppWhitelistPolicyProcessExtendResponseInfo } from './model/AppWhitelistPolicyProcessExtendResponseInfo';
import { AppWhitelistPolicyProcessResponseInfo } from './model/AppWhitelistPolicyProcessResponseInfo';
import { AppWhitelistPolicyResponseInfo } from './model/AppWhitelistPolicyResponseInfo';
import { AssetValue } from './model/AssetValue';
import { AssociateImages } from './model/AssociateImages';
import { AssociatePolicyGroupRequest } from './model/AssociatePolicyGroupRequest';
import { AssociatePolicyGroupRequestInfo } from './model/AssociatePolicyGroupRequestInfo';
import { AssociatePolicyGroupResponse } from './model/AssociatePolicyGroupResponse';
import { AssociateRegistriesResponseInfo } from './model/AssociateRegistriesResponseInfo';
import { AttackPhase } from './model/AttackPhase';
import { AttackTag } from './model/AttackTag';
import { AutoConfirm } from './model/AutoConfirm';
import { AutoDetect } from './model/AutoDetect';
import { AutoLauchResponseInfo } from './model/AutoLauchResponseInfo';
import { AutoLaunchChangeResponseInfo } from './model/AutoLaunchChangeResponseInfo';
import { AutoLaunchStatisticsResponseInfo } from './model/AutoLaunchStatisticsResponseInfo';
import { AvailableResourceIdsInfo } from './model/AvailableResourceIdsInfo';
import { BackupResources } from './model/BackupResources';
import { BackupTriggerInfo } from './model/BackupTriggerInfo';
import { BackupTriggerPropertiesInfo } from './model/BackupTriggerPropertiesInfo';
import { BackupTriggerPropertiesRequestInfo } from './model/BackupTriggerPropertiesRequestInfo';
import { BackupTriggerPropertiesRequestInfo1 } from './model/BackupTriggerPropertiesRequestInfo1';
import { BackupTriggerRequestInfo } from './model/BackupTriggerRequestInfo';
import { BackupTriggerRequestInfo1 } from './model/BackupTriggerRequestInfo1';
import { BackupVaultInfo } from './model/BackupVaultInfo';
import { BaselineWhiteListsResponseInfo } from './model/BaselineWhiteListsResponseInfo';
import { BatchAddAccountsRequest } from './model/BatchAddAccountsRequest';
import { BatchAddAccountsRequestInfo } from './model/BatchAddAccountsRequestInfo';
import { BatchAddAccountsResponse } from './model/BatchAddAccountsResponse';
import { BatchCreateTagsRequest } from './model/BatchCreateTagsRequest';
import { BatchCreateTagsRequestInfo } from './model/BatchCreateTagsRequestInfo';
import { BatchCreateTagsResponse } from './model/BatchCreateTagsResponse';
import { BatchDeleteAgentDaemonsetRequest } from './model/BatchDeleteAgentDaemonsetRequest';
import { BatchDeleteAgentDaemonsetResponse } from './model/BatchDeleteAgentDaemonsetResponse';
import { BatchDeleteDaemonsetRequestBody } from './model/BatchDeleteDaemonsetRequestBody';
import { BatchDeleteRegistryRequest } from './model/BatchDeleteRegistryRequest';
import { BatchDeleteRegistryRequestBody } from './model/BatchDeleteRegistryRequestBody';
import { BatchDeleteRegistryResponse } from './model/BatchDeleteRegistryResponse';
import { BatchScanPrivateImageRequestInfo } from './model/BatchScanPrivateImageRequestInfo';
import { BatchScanSwrImageInfo } from './model/BatchScanSwrImageInfo';
import { BatchScanSwrImageRequest } from './model/BatchScanSwrImageRequest';
import { BatchScanSwrImageResponse } from './model/BatchScanSwrImageResponse';
import { BatchStartProtectionRequest } from './model/BatchStartProtectionRequest';
import { BatchStartProtectionRequestInfo } from './model/BatchStartProtectionRequestInfo';
import { BatchStartProtectionResponse } from './model/BatchStartProtectionResponse';
import { BatchStartWebTamperProtectionRequest } from './model/BatchStartWebTamperProtectionRequest';
import { BatchStartWebTamperProtectionRequestInfo } from './model/BatchStartWebTamperProtectionRequestInfo';
import { BatchStartWebTamperProtectionResponse } from './model/BatchStartWebTamperProtectionResponse';
import { BatchUpdateDaemonsetRequestBody } from './model/BatchUpdateDaemonsetRequestBody';
import { BatchUpgradeAgentDaemonsetRequest } from './model/BatchUpgradeAgentDaemonsetRequest';
import { BatchUpgradeAgentDaemonsetResponse } from './model/BatchUpgradeAgentDaemonsetResponse';
import { BlockedIpRequestInfo } from './model/BlockedIpRequestInfo';
import { BlockedIpResponseInfo } from './model/BlockedIpResponseInfo';
import { CCEClusterIdListRequestBody } from './model/CCEClusterIdListRequestBody';
import { CCEClusterInfoListRequestBody } from './model/CCEClusterInfoListRequestBody';
import { CCEClusterInfoListRequestBodyClusterInfoList } from './model/CCEClusterInfoListRequestBodyClusterInfoList';
import { CceIntegrationProtectionRequestBody } from './model/CceIntegrationProtectionRequestBody';
import { ChangeAgentAutoUpgradeStatusRequest } from './model/ChangeAgentAutoUpgradeStatusRequest';
import { ChangeAgentAutoUpgradeStatusRequestInfo } from './model/ChangeAgentAutoUpgradeStatusRequestInfo';
import { ChangeAgentAutoUpgradeStatusResponse } from './model/ChangeAgentAutoUpgradeStatusResponse';
import { ChangeAntivirusPayPerScanStatusRequest } from './model/ChangeAntivirusPayPerScanStatusRequest';
import { ChangeAntivirusPayPerScanStatusRequestInfo } from './model/ChangeAntivirusPayPerScanStatusRequestInfo';
import { ChangeAntivirusPayPerScanStatusResponse } from './model/ChangeAntivirusPayPerScanStatusResponse';
import { ChangeAntivirusPolicyRequest } from './model/ChangeAntivirusPolicyRequest';
import { ChangeAntivirusPolicyRequestInfo } from './model/ChangeAntivirusPolicyRequestInfo';
import { ChangeAntivirusPolicyResponse } from './model/ChangeAntivirusPolicyResponse';
import { ChangeAppWhitelistPolicyProcessStatusRequest } from './model/ChangeAppWhitelistPolicyProcessStatusRequest';
import { ChangeAppWhitelistPolicyProcessStatusRequestInfo } from './model/ChangeAppWhitelistPolicyProcessStatusRequestInfo';
import { ChangeAppWhitelistPolicyProcessStatusResponse } from './model/ChangeAppWhitelistPolicyProcessStatusResponse';
import { ChangeAppWhitelistPolicyRequest } from './model/ChangeAppWhitelistPolicyRequest';
import { ChangeAppWhitelistPolicyRequestInfo } from './model/ChangeAppWhitelistPolicyRequestInfo';
import { ChangeAppWhitelistPolicyResponse } from './model/ChangeAppWhitelistPolicyResponse';
import { ChangeAutoKillVirusStatusRequestInfo } from './model/ChangeAutoKillVirusStatusRequestInfo';
import { ChangeAutoOpenQuotaStatusRequest } from './model/ChangeAutoOpenQuotaStatusRequest';
import { ChangeAutoOpenQuotaStatusRequestInfo } from './model/ChangeAutoOpenQuotaStatusRequestInfo';
import { ChangeAutoOpenQuotaStatusResponse } from './model/ChangeAutoOpenQuotaStatusResponse';
import { ChangeBaselineWhiteListRequest } from './model/ChangeBaselineWhiteListRequest';
import { ChangeBaselineWhiteListRequestBody } from './model/ChangeBaselineWhiteListRequestBody';
import { ChangeBaselineWhiteListResponse } from './model/ChangeBaselineWhiteListResponse';
import { ChangeBlockedIpRequest } from './model/ChangeBlockedIpRequest';
import { ChangeBlockedIpRequestInfo } from './model/ChangeBlockedIpRequestInfo';
import { ChangeBlockedIpResponse } from './model/ChangeBlockedIpResponse';
import { ChangeCheckRuleActionRequest } from './model/ChangeCheckRuleActionRequest';
import { ChangeCheckRuleActionResponse } from './model/ChangeCheckRuleActionResponse';
import { ChangeClusterEventsRequest } from './model/ChangeClusterEventsRequest';
import { ChangeClusterEventsResponse } from './model/ChangeClusterEventsResponse';
import { ChangeClusterProtectionPolicyRequest } from './model/ChangeClusterProtectionPolicyRequest';
import { ChangeClusterProtectionPolicyResponse } from './model/ChangeClusterProtectionPolicyResponse';
import { ChangeEventRequest } from './model/ChangeEventRequest';
import { ChangeEventRequestInfo } from './model/ChangeEventRequestInfo';
import { ChangeEventResponse } from './model/ChangeEventResponse';
import { ChangeHostsGroupRequest } from './model/ChangeHostsGroupRequest';
import { ChangeHostsGroupRequestInfo } from './model/ChangeHostsGroupRequestInfo';
import { ChangeHostsGroupResponse } from './model/ChangeHostsGroupResponse';
import { ChangeIsolatedFileRequest } from './model/ChangeIsolatedFileRequest';
import { ChangeIsolatedFileRequestInfo } from './model/ChangeIsolatedFileRequestInfo';
import { ChangeIsolatedFileResponse } from './model/ChangeIsolatedFileResponse';
import { ChangeMalwareCollectStatusRequest } from './model/ChangeMalwareCollectStatusRequest';
import { ChangeMalwareCollectStatusRequestInfo } from './model/ChangeMalwareCollectStatusRequestInfo';
import { ChangeMalwareCollectStatusResponse } from './model/ChangeMalwareCollectStatusResponse';
import { ChangePasswordComplexityStatusRequest } from './model/ChangePasswordComplexityStatusRequest';
import { ChangePasswordComplexityStatusRequestBody } from './model/ChangePasswordComplexityStatusRequestBody';
import { ChangePasswordComplexityStatusResponse } from './model/ChangePasswordComplexityStatusResponse';
import { ChangePolicyGroupRequest } from './model/ChangePolicyGroupRequest';
import { ChangePolicyGroupRequestInfo } from './model/ChangePolicyGroupRequestInfo';
import { ChangePolicyGroupResponse } from './model/ChangePolicyGroupResponse';
import { ChangePolicySwitchStatusRequest } from './model/ChangePolicySwitchStatusRequest';
import { ChangePolicySwitchStatusResponse } from './model/ChangePolicySwitchStatusResponse';
import { ChangeVulScanPolicyRequest } from './model/ChangeVulScanPolicyRequest';
import { ChangeVulScanPolicyRequestInfo } from './model/ChangeVulScanPolicyRequestInfo';
import { ChangeVulScanPolicyResponse } from './model/ChangeVulScanPolicyResponse';
import { ChangeVulStatusRequest } from './model/ChangeVulStatusRequest';
import { ChangeVulStatusRequestInfo } from './model/ChangeVulStatusRequestInfo';
import { ChangeVulStatusRequestInfoCustomBackupHosts } from './model/ChangeVulStatusRequestInfoCustomBackupHosts';
import { ChangeVulStatusResponse } from './model/ChangeVulStatusResponse';
import { CheckFeatureRuleInfo } from './model/CheckFeatureRuleInfo';
import { CheckRuleCheckCaseResponseInfo } from './model/CheckRuleCheckCaseResponseInfo';
import { CheckRuleFixParamInfo } from './model/CheckRuleFixParamInfo';
import { CheckRuleFixValuesInfo } from './model/CheckRuleFixValuesInfo';
import { CheckRuleIdListRequestInfo } from './model/CheckRuleIdListRequestInfo';
import { CheckRuleKeyInfoRequestInfo } from './model/CheckRuleKeyInfoRequestInfo';
import { CheckRuleRiskInfoResponseInfo } from './model/CheckRuleRiskInfoResponseInfo';
import { ChildProcessPid } from './model/ChildProcessPid';
import { ChildProcessUid } from './model/ChildProcessUid';
import { ChkFeatureInfo } from './model/ChkFeatureInfo';
import { CicdConfigurationsResponseInfo } from './model/CicdConfigurationsResponseInfo';
import { CloseProtectionInfoRequestInfo } from './model/CloseProtectionInfoRequestInfo';
import { ClusterAuditLogResponseInfo } from './model/ClusterAuditLogResponseInfo';
import { ClusterBaselineResponseInfo } from './model/ClusterBaselineResponseInfo';
import { ClusterConfigResponseInfo } from './model/ClusterConfigResponseInfo';
import { ClusterContainerLogResponseInfo } from './model/ClusterContainerLogResponseInfo';
import { ClusterEventLogResponseInfo } from './model/ClusterEventLogResponseInfo';
import { ClusterEventResourceResponseInfo } from './model/ClusterEventResourceResponseInfo';
import { ClusterEventResponseInfo } from './model/ClusterEventResponseInfo';
import { ClusterId } from './model/ClusterId';
import { ClusterImageResponseInfo } from './model/ClusterImageResponseInfo';
import { ClusterInfoResponseDsInfo } from './model/ClusterInfoResponseDsInfo';
import { ClusterItemResponseInfo } from './model/ClusterItemResponseInfo';
import { ClusterMalwareResponseInfo } from './model/ClusterMalwareResponseInfo';
import { ClusterName } from './model/ClusterName';
import { ClusterPolicyResponseInfo } from './model/ClusterPolicyResponseInfo';
import { ClusterResponseInfo } from './model/ClusterResponseInfo';
import { ClusterSecurityCheckAppInfo } from './model/ClusterSecurityCheckAppInfo';
import { ClusterSecurityCheckBaseLineDetectionInfo } from './model/ClusterSecurityCheckBaseLineDetectionInfo';
import { ClusterSecurityCheckBaselineItemInfo } from './model/ClusterSecurityCheckBaselineItemInfo';
import { ClusterSecurityCheckLocalImageVulInfo } from './model/ClusterSecurityCheckLocalImageVulInfo';
import { ClusterSecurityCheckPortInfo } from './model/ClusterSecurityCheckPortInfo';
import { ClusterSecurityCheckPrivilegedContainerInfo } from './model/ClusterSecurityCheckPrivilegedContainerInfo';
import { ClusterSecurityCheckProcessInfo } from './model/ClusterSecurityCheckProcessInfo';
import { ClustersResponseInfo } from './model/ClustersResponseInfo';
import { CmdLine } from './model/CmdLine';
import { CommonList } from './model/CommonList';
import { ConfirmStatus } from './model/ConfirmStatus';
import { ContainerBaseInfo } from './model/ContainerBaseInfo';
import { ContainerCmdLogResponseInfo } from './model/ContainerCmdLogResponseInfo';
import { ContainerExtraInfo } from './model/ContainerExtraInfo';
import { ContainerExtraLinuxInfo } from './model/ContainerExtraLinuxInfo';
import { ContainerExtraMysqlInfo } from './model/ContainerExtraMysqlInfo';
import { ContainerExtraOpenvpnInfo } from './model/ContainerExtraOpenvpnInfo';
import { ContainerExtraRdpInfo } from './model/ContainerExtraRdpInfo';
import { ContainerId } from './model/ContainerId';
import { ContainerImageInfo } from './model/ContainerImageInfo';
import { ContainerImageLogResponseInfo } from './model/ContainerImageLogResponseInfo';
import { ContainerName } from './model/ContainerName';
import { ContainerNodeInfo } from './model/ContainerNodeInfo';
import { ContainerStatus } from './model/ContainerStatus';
import { CopyBaselinePolicyGroupRequest } from './model/CopyBaselinePolicyGroupRequest';
import { CopyBaselinePolicyGroupRequestBody } from './model/CopyBaselinePolicyGroupRequestBody';
import { CopyBaselinePolicyGroupResponse } from './model/CopyBaselinePolicyGroupResponse';
import { CreateAgentDaemonsetRequest } from './model/CreateAgentDaemonsetRequest';
import { CreateAgentDaemonsetResponse } from './model/CreateAgentDaemonsetResponse';
import { CreateAntiVirusPaidTaskRequest } from './model/CreateAntiVirusPaidTaskRequest';
import { CreateAntiVirusPaidTaskRequestInfo } from './model/CreateAntiVirusPaidTaskRequestInfo';
import { CreateAntiVirusPaidTaskResponse } from './model/CreateAntiVirusPaidTaskResponse';
import { CreateAntiVirusPolicyRequest } from './model/CreateAntiVirusPolicyRequest';
import { CreateAntiVirusPolicyRequestBody } from './model/CreateAntiVirusPolicyRequestBody';
import { CreateAntiVirusPolicyResponse } from './model/CreateAntiVirusPolicyResponse';
import { CreateAntiVirusTaskRequest } from './model/CreateAntiVirusTaskRequest';
import { CreateAntiVirusTaskRequestInfo } from './model/CreateAntiVirusTaskRequestInfo';
import { CreateAntiVirusTaskResponse } from './model/CreateAntiVirusTaskResponse';
import { CreateAppWhitelistPolicyRequest } from './model/CreateAppWhitelistPolicyRequest';
import { CreateAppWhitelistPolicyRequestInfo } from './model/CreateAppWhitelistPolicyRequestInfo';
import { CreateAppWhitelistPolicyResponse } from './model/CreateAppWhitelistPolicyResponse';
import { CreateClusterProtectionPolicyRequest } from './model/CreateClusterProtectionPolicyRequest';
import { CreateClusterProtectionPolicyResponse } from './model/CreateClusterProtectionPolicyResponse';
import { CreateClustersInfoRequest } from './model/CreateClustersInfoRequest';
import { CreateClustersInfoResponse } from './model/CreateClustersInfoResponse';
import { CreateContainerNetworkPolicyRequest } from './model/CreateContainerNetworkPolicyRequest';
import { CreateContainerNetworkPolicyResponse } from './model/CreateContainerNetworkPolicyResponse';
import { CreateDaemonsetRequestBody } from './model/CreateDaemonsetRequestBody';
import { CreateDaemonsetRequestBodyScheduleInfo } from './model/CreateDaemonsetRequestBodyScheduleInfo';
import { CreateDecoyPortPolicyRequest } from './model/CreateDecoyPortPolicyRequest';
import { CreateDecoyPortPolicyResponse } from './model/CreateDecoyPortPolicyResponse';
import { CreateGlobalAssetScanTaskRequest } from './model/CreateGlobalAssetScanTaskRequest';
import { CreateGlobalAssetScanTaskRequestInfo } from './model/CreateGlobalAssetScanTaskRequestInfo';
import { CreateGlobalAssetScanTaskResponse } from './model/CreateGlobalAssetScanTaskResponse';
import { CreateMultiCloudClustersRequest } from './model/CreateMultiCloudClustersRequest';
import { CreateMultiCloudClustersResponse } from './model/CreateMultiCloudClustersResponse';
import { CreateNetworkPolicyRequestInfo } from './model/CreateNetworkPolicyRequestInfo';
import { CreateQuotasOrderRequest } from './model/CreateQuotasOrderRequest';
import { CreateQuotasOrderRequestInfo } from './model/CreateQuotasOrderRequestInfo';
import { CreateQuotasOrderResponse } from './model/CreateQuotasOrderResponse';
import { CreateSecurityGroupPolicyRequest } from './model/CreateSecurityGroupPolicyRequest';
import { CreateSecurityGroupPolicyRequestBody } from './model/CreateSecurityGroupPolicyRequestBody';
import { CreateSecurityGroupPolicyResponse } from './model/CreateSecurityGroupPolicyResponse';
import { CreateTaskRequest } from './model/CreateTaskRequest';
import { CreateTaskRequestBody } from './model/CreateTaskRequestBody';
import { CreateTaskRequestBodyClusterScanInfo } from './model/CreateTaskRequestBodyClusterScanInfo';
import { CreateTaskRequestBodyIacScanInfo } from './model/CreateTaskRequestBodyIacScanInfo';
import { CreateTaskResponse } from './model/CreateTaskResponse';
import { CreateVulnerabilityScanTaskRequest } from './model/CreateVulnerabilityScanTaskRequest';
import { CreateVulnerabilityScanTaskResponse } from './model/CreateVulnerabilityScanTaskResponse';
import { DaemonSetInfo } from './model/DaemonSetInfo';
import { DelIsolatedFileRequestInfo } from './model/DelIsolatedFileRequestInfo';
import { DeleteAccountRequest } from './model/DeleteAccountRequest';
import { DeleteAccountRequestInfo } from './model/DeleteAccountRequestInfo';
import { DeleteAccountResponse } from './model/DeleteAccountResponse';
import { DeleteAgentDaemonsetRequest } from './model/DeleteAgentDaemonsetRequest';
import { DeleteAgentDaemonsetResponse } from './model/DeleteAgentDaemonsetResponse';
import { DeleteAntivirusPolicyRequest } from './model/DeleteAntivirusPolicyRequest';
import { DeleteAntivirusPolicyRequestInfo } from './model/DeleteAntivirusPolicyRequestInfo';
import { DeleteAntivirusPolicyResponse } from './model/DeleteAntivirusPolicyResponse';
import { DeleteAppWhitelistPolicyHostRequest } from './model/DeleteAppWhitelistPolicyHostRequest';
import { DeleteAppWhitelistPolicyHostRequestInfo } from './model/DeleteAppWhitelistPolicyHostRequestInfo';
import { DeleteAppWhitelistPolicyHostResponse } from './model/DeleteAppWhitelistPolicyHostResponse';
import { DeleteAppWhitelistPolicyRequest } from './model/DeleteAppWhitelistPolicyRequest';
import { DeleteAppWhitelistPolicyRequestInfo } from './model/DeleteAppWhitelistPolicyRequestInfo';
import { DeleteAppWhitelistPolicyResponse } from './model/DeleteAppWhitelistPolicyResponse';
import { DeleteBackupHostInfoRequest } from './model/DeleteBackupHostInfoRequest';
import { DeleteBackupHostInfoResponse } from './model/DeleteBackupHostInfoResponse';
import { DeleteBackupHostRequestInfo } from './model/DeleteBackupHostRequestInfo';
import { DeleteBaselineWhiteListRequest } from './model/DeleteBaselineWhiteListRequest';
import { DeleteBaselineWhiteListRequestBody } from './model/DeleteBaselineWhiteListRequestBody';
import { DeleteBaselineWhiteListResponse } from './model/DeleteBaselineWhiteListResponse';
import { DeleteCicdConfigurationsRequest } from './model/DeleteCicdConfigurationsRequest';
import { DeleteCicdConfigurationsRequestBody } from './model/DeleteCicdConfigurationsRequestBody';
import { DeleteCicdConfigurationsResponse } from './model/DeleteCicdConfigurationsResponse';
import { DeleteClusterProtectionPolicyRequest } from './model/DeleteClusterProtectionPolicyRequest';
import { DeleteClusterProtectionPolicyResponse } from './model/DeleteClusterProtectionPolicyResponse';
import { DeleteContainerNetworkPolicyRequest } from './model/DeleteContainerNetworkPolicyRequest';
import { DeleteContainerNetworkPolicyResponse } from './model/DeleteContainerNetworkPolicyResponse';
import { DeleteDecoyPortHostPolicyRequest } from './model/DeleteDecoyPortHostPolicyRequest';
import { DeleteDecoyPortHostPolicyResponse } from './model/DeleteDecoyPortHostPolicyResponse';
import { DeleteDecoyPortPolicyRequest } from './model/DeleteDecoyPortPolicyRequest';
import { DeleteDecoyPortPolicyResponse } from './model/DeleteDecoyPortPolicyResponse';
import { DeleteHostsGroupRequest } from './model/DeleteHostsGroupRequest';
import { DeleteHostsGroupResponse } from './model/DeleteHostsGroupResponse';
import { DeleteIsolatedFileRequest } from './model/DeleteIsolatedFileRequest';
import { DeleteIsolatedFileRequestInfo } from './model/DeleteIsolatedFileRequestInfo';
import { DeleteIsolatedFileResponse } from './model/DeleteIsolatedFileResponse';
import { DeletePolicyGroupRequest } from './model/DeletePolicyGroupRequest';
import { DeletePolicyGroupRequestInfo } from './model/DeletePolicyGroupRequestInfo';
import { DeletePolicyGroupResponse } from './model/DeletePolicyGroupResponse';
import { DeletePolicyRequest } from './model/DeletePolicyRequest';
import { DeletePolicyRequestInfo } from './model/DeletePolicyRequestInfo';
import { DeletePolicyResponse } from './model/DeletePolicyResponse';
import { DeleteProtectionPolicyRequest } from './model/DeleteProtectionPolicyRequest';
import { DeleteProtectionPolicyResponse } from './model/DeleteProtectionPolicyResponse';
import { DeleteRegistryRequest } from './model/DeleteRegistryRequest';
import { DeleteRegistryResponse } from './model/DeleteRegistryResponse';
import { DeleteResourceInstanceTagRequest } from './model/DeleteResourceInstanceTagRequest';
import { DeleteResourceInstanceTagResponse } from './model/DeleteResourceInstanceTagResponse';
import { DeleteSecurityGroupPolicyRequest } from './model/DeleteSecurityGroupPolicyRequest';
import { DeleteSecurityGroupPolicyRequestBody } from './model/DeleteSecurityGroupPolicyRequestBody';
import { DeleteSecurityGroupPolicyResponse } from './model/DeleteSecurityGroupPolicyResponse';
import { Deleted } from './model/Deleted';
import { DeletedPolicy } from './model/DeletedPolicy';
import { DeployTemplateInfoScheduleInfo } from './model/DeployTemplateInfoScheduleInfo';
import { Description } from './model/Description';
import { DownloadAssetFileRequest } from './model/DownloadAssetFileRequest';
import { DownloadAssetFileRequestBody } from './model/DownloadAssetFileRequestBody';
import { DownloadAssetFileResponse } from './model/DownloadAssetFileResponse';
import { EffectHostNum } from './model/EffectHostNum';
import { EnterpriseProjectId } from './model/EnterpriseProjectId';
import { EnterpriseProjectName } from './model/EnterpriseProjectName';
import { ErrorInfo } from './model/ErrorInfo';
import { EventAttCkDetailResponseInfo } from './model/EventAttCkDetailResponseInfo';
import { EventClassId } from './model/EventClassId';
import { EventDetailRequestInfo } from './model/EventDetailRequestInfo';
import { EventDetailResponseInfo } from './model/EventDetailResponseInfo';
import { EventFileResponseInfo } from './model/EventFileResponseInfo';
import { EventHandleHistory } from './model/EventHandleHistory';
import { EventId } from './model/EventId';
import { EventManagementResponseInfo } from './model/EventManagementResponseInfo';
import { EventName } from './model/EventName';
import { EventProcessResInfo } from './model/EventProcessResInfo';
import { EventProcessResponseInfo } from './model/EventProcessResponseInfo';
import { EventResourceResponseInfo } from './model/EventResourceResponseInfo';
import { EventType } from './model/EventType';
import { EventUserResponseInfo } from './model/EventUserResponseInfo';
import { EventWhiteRuleListRequestInfo } from './model/EventWhiteRuleListRequestInfo';
import { ExportAntiVirusResultRequest } from './model/ExportAntiVirusResultRequest';
import { ExportAntiVirusResultRequestBody } from './model/ExportAntiVirusResultRequestBody';
import { ExportAntiVirusResultResponse } from './model/ExportAntiVirusResultResponse';
import { ExportContainerListRequest } from './model/ExportContainerListRequest';
import { ExportContainerListRequestBody } from './model/ExportContainerListRequestBody';
import { ExportContainerListRequestBodyCreateTime } from './model/ExportContainerListRequestBodyCreateTime';
import { ExportContainerListResponse } from './model/ExportContainerListResponse';
import { ExportHandledVulnerabilitiesRequest } from './model/ExportHandledVulnerabilitiesRequest';
import { ExportHandledVulnerabilitiesRequestBody } from './model/ExportHandledVulnerabilitiesRequestBody';
import { ExportHandledVulnerabilitiesRequestBodySpecificVuls } from './model/ExportHandledVulnerabilitiesRequestBodySpecificVuls';
import { ExportHandledVulnerabilitiesResponse } from './model/ExportHandledVulnerabilitiesResponse';
import { ExportImageSecurityReportTaskRequest } from './model/ExportImageSecurityReportTaskRequest';
import { ExportImageSecurityReportTaskRequestInfo } from './model/ExportImageSecurityReportTaskRequestInfo';
import { ExportImageSecurityReportTaskResponse } from './model/ExportImageSecurityReportTaskResponse';
import { ExportRisksRequest } from './model/ExportRisksRequest';
import { ExportRisksRequestBody } from './model/ExportRisksRequestBody';
import { ExportRisksResponse } from './model/ExportRisksResponse';
import { ExportSize } from './model/ExportSize';
import { ExportVulHandleHistoryRequest } from './model/ExportVulHandleHistoryRequest';
import { ExportVulHandleHistoryRequestBody } from './model/ExportVulHandleHistoryRequestBody';
import { ExportVulHandleHistoryResponse } from './model/ExportVulHandleHistoryResponse';
import { ExportVulRequestBody } from './model/ExportVulRequestBody';
import { ExportVulsRequest } from './model/ExportVulsRequest';
import { ExportVulsResponse } from './model/ExportVulsResponse';
import { ExportWebTamperHostRequest } from './model/ExportWebTamperHostRequest';
import { ExportWebTamperHostRequestInfo } from './model/ExportWebTamperHostRequestInfo';
import { ExportWebTamperHostResponse } from './model/ExportWebTamperHostResponse';
import { FailReason } from './model/FailReason';
import { FeatureRuleInfo } from './model/FeatureRuleInfo';
import { FileAttr } from './model/FileAttr';
import { FileCtime } from './model/FileCtime';
import { FileEventResponseInfo } from './model/FileEventResponseInfo';
import { FileHash } from './model/FileHash';
import { FileHostEventDetailResponseInfo } from './model/FileHostEventDetailResponseInfo';
import { FileHostResponseInfo } from './model/FileHostResponseInfo';
import { FileMtime } from './model/FileMtime';
import { FileOwner } from './model/FileOwner';
import { FilePath } from './model/FilePath';
import { FileSigner } from './model/FileSigner';
import { FileSize } from './model/FileSize';
import { FileType } from './model/FileType';
import { GetNetworkPolicy } from './model/GetNetworkPolicy';
import { GroupId } from './model/GroupId';
import { GroupName } from './model/GroupName';
import { HandleAffectBaselineInfo } from './model/HandleAffectBaselineInfo';
import { HandleAntiVirusResultRequest } from './model/HandleAntiVirusResultRequest';
import { HandleAntiVirusResultResponse } from './model/HandleAntiVirusResultResponse';
import { HandleImageVulnerabilityRequest } from './model/HandleImageVulnerabilityRequest';
import { HandleImageVulnerabilityRequestBody } from './model/HandleImageVulnerabilityRequestBody';
import { HandleImageVulnerabilityRequestBodyImageDataList } from './model/HandleImageVulnerabilityRequestBodyImageDataList';
import { HandleImageVulnerabilityRequestBodyVulDataList } from './model/HandleImageVulnerabilityRequestBodyVulDataList';
import { HandleImageVulnerabilityResponse } from './model/HandleImageVulnerabilityResponse';
import { HandleMethod } from './model/HandleMethod';
import { HandleStatus } from './model/HandleStatus';
import { HandleTime } from './model/HandleTime';
import { Handler } from './model/Handler';
import { Hash } from './model/Hash';
import { HistoryHandleMethod } from './model/HistoryHandleMethod';
import { HoneypotPortPolicyContent } from './model/HoneypotPortPolicyContent';
import { HoneypotPortPolicyContentPortsList } from './model/HoneypotPortPolicyContentPortsList';
import { Host } from './model/Host';
import { HostAttr } from './model/HostAttr';
import { HostGroupItem } from './model/HostGroupItem';
import { HostId } from './model/HostId';
import { HostIp } from './model/HostIp';
import { HostName } from './model/HostName';
import { HostNum } from './model/HostNum';
import { HostProtectHistoryResponseInfo } from './model/HostProtectHistoryResponseInfo';
import { HostRaspProtectHistoryResponseInfo } from './model/HostRaspProtectHistoryResponseInfo';
import { HostStatus } from './model/HostStatus';
import { HostTagInfoList } from './model/HostTagInfoList';
import { HostTagValuesInfo } from './model/HostTagValuesInfo';
import { HostTaskStatus } from './model/HostTaskStatus';
import { HostVaultInfo } from './model/HostVaultInfo';
import { HostVaultInfoDefaultVault } from './model/HostVaultInfoDefaultVault';
import { HostVaultInfoVaults } from './model/HostVaultInfoVaults';
import { HostVulInfo } from './model/HostVulInfo';
import { HostVulInfoAppList } from './model/HostVulInfoAppList';
import { HostVulInfoCveList } from './model/HostVulInfoCveList';
import { HostVulInfoDisabledOperateTypes } from './model/HostVulInfoDisabledOperateTypes';
import { HostVulOperateInfo } from './model/HostVulOperateInfo';
import { IacRequestInfo } from './model/IacRequestInfo';
import { IdArray } from './model/IdArray';
import { IgnoreDir } from './model/IgnoreDir';
import { ImageCheckRuleCheckCaseResponseInfo } from './model/ImageCheckRuleCheckCaseResponseInfo';
import { ImageId } from './model/ImageId';
import { ImageLocalInfo } from './model/ImageLocalInfo';
import { ImageName } from './model/ImageName';
import { ImageRiskConfigsCheckRulesResponseInfo } from './model/ImageRiskConfigsCheckRulesResponseInfo';
import { ImageRiskConfigsInfoResponseInfo } from './model/ImageRiskConfigsInfoResponseInfo';
import { ImageScanTaskInfo } from './model/ImageScanTaskInfo';
import { ImageScanTaskInfoFailedImages } from './model/ImageScanTaskInfoFailedImages';
import { ImageVulCveInfo } from './model/ImageVulCveInfo';
import { ImageVulInfo } from './model/ImageVulInfo';
import { ImageVulResponseInfo } from './model/ImageVulResponseInfo';
import { ImageWhiteListDetailResponseInfo } from './model/ImageWhiteListDetailResponseInfo';
import { ImageWhiteListDetailResponseInfoCves } from './model/ImageWhiteListDetailResponseInfoCves';
import { ImageWhiteListDetailResponseInfoImageInfo } from './model/ImageWhiteListDetailResponseInfoImageInfo';
import { ImageWhiteListDetailResponseInfoQueryInfo } from './model/ImageWhiteListDetailResponseInfoQueryInfo';
import { Invalidate } from './model/Invalidate';
import { IsIntercept } from './model/IsIntercept';
import { IsParent } from './model/IsParent';
import { IsSpecifiedDir } from './model/IsSpecifiedDir';
import { IsolateEventResponseInfo } from './model/IsolateEventResponseInfo';
import { IsolateSource } from './model/IsolateSource';
import { IsolatedFileRequestInfo } from './model/IsolatedFileRequestInfo';
import { IsolatedFileResponseInfo } from './model/IsolatedFileResponseInfo';
import { IsolationStatus } from './model/IsolationStatus';
import { JarPackageHostInfo } from './model/JarPackageHostInfo';
import { JarPackageInfo } from './model/JarPackageInfo';
import { JarPackageStatisticsResponseInfo } from './model/JarPackageStatisticsResponseInfo';
import { KernelModuleHostInfo } from './model/KernelModuleHostInfo';
import { KernelModuleInfo } from './model/KernelModuleInfo';
import { KernelModuleStatisticsResponseInfo } from './model/KernelModuleStatisticsResponseInfo';
import { KubeConfigInfo } from './model/KubeConfigInfo';
import { KubernetesClusterInfo } from './model/KubernetesClusterInfo';
import { KubernetesEndpointInfo } from './model/KubernetesEndpointInfo';
import { KubernetesEndpointPodInfo } from './model/KubernetesEndpointPodInfo';
import { KubernetesEndpointPortInfo } from './model/KubernetesEndpointPortInfo';
import { KubernetesServiceInfo } from './model/KubernetesServiceInfo';
import { KubernetesServicePortInfo } from './model/KubernetesServicePortInfo';
import { LabelInfo } from './model/LabelInfo';
import { LearningDays } from './model/LearningDays';
import { LearningStatus } from './model/LearningStatus';
import { Limit } from './model/Limit';
import { ListAccountsRequest } from './model/ListAccountsRequest';
import { ListAccountsResponse } from './model/ListAccountsResponse';
import { ListAgentAutoUpgradeStatusRequest } from './model/ListAgentAutoUpgradeStatusRequest';
import { ListAgentAutoUpgradeStatusResponse } from './model/ListAgentAutoUpgradeStatusResponse';
import { ListAgentInstallScriptRequest } from './model/ListAgentInstallScriptRequest';
import { ListAgentInstallScriptResponse } from './model/ListAgentInstallScriptResponse';
import { ListAlarmWhiteListRequest } from './model/ListAlarmWhiteListRequest';
import { ListAlarmWhiteListResponse } from './model/ListAlarmWhiteListResponse';
import { ListAntiVirusHostRequest } from './model/ListAntiVirusHostRequest';
import { ListAntiVirusHostResponse } from './model/ListAntiVirusHostResponse';
import { ListAntiVirusPaidHostsRequest } from './model/ListAntiVirusPaidHostsRequest';
import { ListAntiVirusPaidHostsResponse } from './model/ListAntiVirusPaidHostsResponse';
import { ListAntiVirusPolicyRequest } from './model/ListAntiVirusPolicyRequest';
import { ListAntiVirusPolicyResponse } from './model/ListAntiVirusPolicyResponse';
import { ListAntiVirusResultRequest } from './model/ListAntiVirusResultRequest';
import { ListAntiVirusResultResponse } from './model/ListAntiVirusResultResponse';
import { ListAntiVirusTaskRequest } from './model/ListAntiVirusTaskRequest';
import { ListAntiVirusTaskResponse } from './model/ListAntiVirusTaskResponse';
import { ListAntivirusHandleHistoryRequest } from './model/ListAntivirusHandleHistoryRequest';
import { ListAntivirusHandleHistoryResponse } from './model/ListAntivirusHandleHistoryResponse';
import { ListAppChangeHistoriesRequest } from './model/ListAppChangeHistoriesRequest';
import { ListAppChangeHistoriesResponse } from './model/ListAppChangeHistoriesResponse';
import { ListAppStatisticsRequest } from './model/ListAppStatisticsRequest';
import { ListAppStatisticsResponse } from './model/ListAppStatisticsResponse';
import { ListAppWhitelistEventRequest } from './model/ListAppWhitelistEventRequest';
import { ListAppWhitelistEventResponse } from './model/ListAppWhitelistEventResponse';
import { ListAppWhitelistHostStatusRequest } from './model/ListAppWhitelistHostStatusRequest';
import { ListAppWhitelistHostStatusResponse } from './model/ListAppWhitelistHostStatusResponse';
import { ListAppWhitelistPolicyHostRequest } from './model/ListAppWhitelistPolicyHostRequest';
import { ListAppWhitelistPolicyHostResponse } from './model/ListAppWhitelistPolicyHostResponse';
import { ListAppWhitelistPolicyProcessExtendRequest } from './model/ListAppWhitelistPolicyProcessExtendRequest';
import { ListAppWhitelistPolicyProcessExtendResponse } from './model/ListAppWhitelistPolicyProcessExtendResponse';
import { ListAppWhitelistPolicyProcessRequest } from './model/ListAppWhitelistPolicyProcessRequest';
import { ListAppWhitelistPolicyProcessResponse } from './model/ListAppWhitelistPolicyProcessResponse';
import { ListAppWhitelistPolicyRequest } from './model/ListAppWhitelistPolicyRequest';
import { ListAppWhitelistPolicyResponse } from './model/ListAppWhitelistPolicyResponse';
import { ListAppsRequest } from './model/ListAppsRequest';
import { ListAppsResponse } from './model/ListAppsResponse';
import { ListAssociateRegistriesRequest } from './model/ListAssociateRegistriesRequest';
import { ListAssociateRegistriesResponse } from './model/ListAssociateRegistriesResponse';
import { ListAutoKillVirusStatusRequest } from './model/ListAutoKillVirusStatusRequest';
import { ListAutoKillVirusStatusResponse } from './model/ListAutoKillVirusStatusResponse';
import { ListAutoLaunchChangeHistoriesRequest } from './model/ListAutoLaunchChangeHistoriesRequest';
import { ListAutoLaunchChangeHistoriesResponse } from './model/ListAutoLaunchChangeHistoriesResponse';
import { ListAutoLaunchStatisticsRequest } from './model/ListAutoLaunchStatisticsRequest';
import { ListAutoLaunchStatisticsResponse } from './model/ListAutoLaunchStatisticsResponse';
import { ListAutoLaunchsRequest } from './model/ListAutoLaunchsRequest';
import { ListAutoLaunchsResponse } from './model/ListAutoLaunchsResponse';
import { ListAutoOpenQuotaStatusRequest } from './model/ListAutoOpenQuotaStatusRequest';
import { ListAutoOpenQuotaStatusResponse } from './model/ListAutoOpenQuotaStatusResponse';
import { ListBackupHostsInfoRequest } from './model/ListBackupHostsInfoRequest';
import { ListBackupHostsInfoResponse } from './model/ListBackupHostsInfoResponse';
import { ListBackupVaultsRequest } from './model/ListBackupVaultsRequest';
import { ListBackupVaultsResponse } from './model/ListBackupVaultsResponse';
import { ListBaselineWhiteListsRequest } from './model/ListBaselineWhiteListsRequest';
import { ListBaselineWhiteListsResponse } from './model/ListBaselineWhiteListsResponse';
import { ListBlockedIpRequest } from './model/ListBlockedIpRequest';
import { ListBlockedIpResponse } from './model/ListBlockedIpResponse';
import { ListCceClusterConfigRequest } from './model/ListCceClusterConfigRequest';
import { ListCceClusterConfigResponse } from './model/ListCceClusterConfigResponse';
import { ListCceClusterDetectRiskRequest } from './model/ListCceClusterDetectRiskRequest';
import { ListCceClusterDetectRiskResponse } from './model/ListCceClusterDetectRiskResponse';
import { ListCheckFeatureRuleRequest } from './model/ListCheckFeatureRuleRequest';
import { ListCheckFeatureRuleResponse } from './model/ListCheckFeatureRuleResponse';
import { ListCicdConfigurationsRequest } from './model/ListCicdConfigurationsRequest';
import { ListCicdConfigurationsResponse } from './model/ListCicdConfigurationsResponse';
import { ListClusterAuditLogsRequest } from './model/ListClusterAuditLogsRequest';
import { ListClusterAuditLogsResponse } from './model/ListClusterAuditLogsResponse';
import { ListClusterEventLogsRequest } from './model/ListClusterEventLogsRequest';
import { ListClusterEventLogsResponse } from './model/ListClusterEventLogsResponse';
import { ListClusterEventsRequest } from './model/ListClusterEventsRequest';
import { ListClusterEventsResponse } from './model/ListClusterEventsResponse';
import { ListClusterProtectOverviewRequest } from './model/ListClusterProtectOverviewRequest';
import { ListClusterProtectOverviewResponse } from './model/ListClusterProtectOverviewResponse';
import { ListClusterProtectPolicyTemplatesRequest } from './model/ListClusterProtectPolicyTemplatesRequest';
import { ListClusterProtectPolicyTemplatesResponse } from './model/ListClusterProtectPolicyTemplatesResponse';
import { ListClusterProtectionDefaultPolicyRequest } from './model/ListClusterProtectionDefaultPolicyRequest';
import { ListClusterProtectionDefaultPolicyResponse } from './model/ListClusterProtectionDefaultPolicyResponse';
import { ListClusterProtectionInfoRequest } from './model/ListClusterProtectionInfoRequest';
import { ListClusterProtectionInfoResponse } from './model/ListClusterProtectionInfoResponse';
import { ListClusterProtectionItemRequest } from './model/ListClusterProtectionItemRequest';
import { ListClusterProtectionItemResponse } from './model/ListClusterProtectionItemResponse';
import { ListClusterProtectionPolicyDetailRequest } from './model/ListClusterProtectionPolicyDetailRequest';
import { ListClusterProtectionPolicyDetailResponse } from './model/ListClusterProtectionPolicyDetailResponse';
import { ListClusterProtectionPolicyRequest } from './model/ListClusterProtectionPolicyRequest';
import { ListClusterProtectionPolicyResponse } from './model/ListClusterProtectionPolicyResponse';
import { ListClusterRiskAffectResourcesRequest } from './model/ListClusterRiskAffectResourcesRequest';
import { ListClusterRiskAffectResourcesResponse } from './model/ListClusterRiskAffectResourcesResponse';
import { ListClusterRiskAffectResourcesResponseInfoDataList } from './model/ListClusterRiskAffectResourcesResponseInfoDataList';
import { ListClusterRisksRequest } from './model/ListClusterRisksRequest';
import { ListClusterRisksResponse } from './model/ListClusterRisksResponse';
import { ListClusterRisksResponseInfoDataList } from './model/ListClusterRisksResponseInfoDataList';
import { ListCommonTipsRequest } from './model/ListCommonTipsRequest';
import { ListCommonTipsResponse } from './model/ListCommonTipsResponse';
import { ListContainerCmdLogsRequest } from './model/ListContainerCmdLogsRequest';
import { ListContainerCmdLogsResponse } from './model/ListContainerCmdLogsResponse';
import { ListContainerImageLogsRequest } from './model/ListContainerImageLogsRequest';
import { ListContainerImageLogsResponse } from './model/ListContainerImageLogsResponse';
import { ListContainerImagesRequest } from './model/ListContainerImagesRequest';
import { ListContainerImagesResponse } from './model/ListContainerImagesResponse';
import { ListContainerLogsRequest } from './model/ListContainerLogsRequest';
import { ListContainerLogsResponse } from './model/ListContainerLogsResponse';
import { ListContainerNetworkClustersRequest } from './model/ListContainerNetworkClustersRequest';
import { ListContainerNetworkClustersResponse } from './model/ListContainerNetworkClustersResponse';
import { ListContainerNetworkNodeListRequest } from './model/ListContainerNetworkNodeListRequest';
import { ListContainerNetworkNodeListResponse } from './model/ListContainerNetworkNodeListResponse';
import { ListContainerNetworkPolicyRequest } from './model/ListContainerNetworkPolicyRequest';
import { ListContainerNetworkPolicyResponse } from './model/ListContainerNetworkPolicyResponse';
import { ListContainerNodesRequest } from './model/ListContainerNodesRequest';
import { ListContainerNodesResponse } from './model/ListContainerNodesResponse';
import { ListContainersRequest } from './model/ListContainersRequest';
import { ListContainersResponse } from './model/ListContainersResponse';
import { ListDecoyPortPolicyRequest } from './model/ListDecoyPortPolicyRequest';
import { ListDecoyPortPolicyResponse } from './model/ListDecoyPortPolicyResponse';
import { ListDownloadExportedFileRequest } from './model/ListDownloadExportedFileRequest';
import { ListDownloadExportedFileResponse } from './model/ListDownloadExportedFileResponse';
import { ListEventAttCkRequest } from './model/ListEventAttCkRequest';
import { ListEventAttCkResponse } from './model/ListEventAttCkResponse';
import { ListEventHandleHistoryRequest } from './model/ListEventHandleHistoryRequest';
import { ListEventHandleHistoryResponse } from './model/ListEventHandleHistoryResponse';
import { ListFileEventsRequest } from './model/ListFileEventsRequest';
import { ListFileEventsResponse } from './model/ListFileEventsResponse';
import { ListFileHostEventDetailsRequest } from './model/ListFileHostEventDetailsRequest';
import { ListFileHostEventDetailsResponse } from './model/ListFileHostEventDetailsResponse';
import { ListFileHostsRequest } from './model/ListFileHostsRequest';
import { ListFileHostsResponse } from './model/ListFileHostsResponse';
import { ListGlobalAssetScanTaskRequest } from './model/ListGlobalAssetScanTaskRequest';
import { ListGlobalAssetScanTaskResponse } from './model/ListGlobalAssetScanTaskResponse';
import { ListHandleAffectBaselineRequest } from './model/ListHandleAffectBaselineRequest';
import { ListHandleAffectBaselineRequestBody } from './model/ListHandleAffectBaselineRequestBody';
import { ListHandleAffectBaselineRequestBodyCheckRuleList } from './model/ListHandleAffectBaselineRequestBodyCheckRuleList';
import { ListHandleAffectBaselineResponse } from './model/ListHandleAffectBaselineResponse';
import { ListHandleVulsRequest } from './model/ListHandleVulsRequest';
import { ListHandleVulsResponse } from './model/ListHandleVulsResponse';
import { ListHostGroupsRequest } from './model/ListHostGroupsRequest';
import { ListHostGroupsResponse } from './model/ListHostGroupsResponse';
import { ListHostProtectHistoryInfoRequest } from './model/ListHostProtectHistoryInfoRequest';
import { ListHostProtectHistoryInfoResponse } from './model/ListHostProtectHistoryInfoResponse';
import { ListHostRaspProtectHistoryInfoRequest } from './model/ListHostRaspProtectHistoryInfoRequest';
import { ListHostRaspProtectHistoryInfoResponse } from './model/ListHostRaspProtectHistoryInfoResponse';
import { ListHostStatusRequest } from './model/ListHostStatusRequest';
import { ListHostStatusResponse } from './model/ListHostStatusResponse';
import { ListHostVulsRequest } from './model/ListHostVulsRequest';
import { ListHostVulsResponse } from './model/ListHostVulsResponse';
import { ListIacFileRiskPathsRequest } from './model/ListIacFileRiskPathsRequest';
import { ListIacFileRiskPathsResponse } from './model/ListIacFileRiskPathsResponse';
import { ListIacFileRiskPathsResponseInfoDataList } from './model/ListIacFileRiskPathsResponseInfoDataList';
import { ListIacFileRisksRequest } from './model/ListIacFileRisksRequest';
import { ListIacFileRisksResponse } from './model/ListIacFileRisksResponse';
import { ListIacFileRisksResponseInfoDataList } from './model/ListIacFileRisksResponseInfoDataList';
import { ListIacFilesRequest } from './model/ListIacFilesRequest';
import { ListIacFilesResponse } from './model/ListIacFilesResponse';
import { ListIacFilesResponseInfoDataList } from './model/ListIacFilesResponseInfoDataList';
import { ListImageHandleAffectVulnerabilitiesRequest } from './model/ListImageHandleAffectVulnerabilitiesRequest';
import { ListImageHandleAffectVulnerabilitiesResponse } from './model/ListImageHandleAffectVulnerabilitiesResponse';
import { ListImageLocalRequest } from './model/ListImageLocalRequest';
import { ListImageLocalResponse } from './model/ListImageLocalResponse';
import { ListImageRiskConfigRulesRequest } from './model/ListImageRiskConfigRulesRequest';
import { ListImageRiskConfigRulesResponse } from './model/ListImageRiskConfigRulesResponse';
import { ListImageRiskConfigsRequest } from './model/ListImageRiskConfigsRequest';
import { ListImageRiskConfigsResponse } from './model/ListImageRiskConfigsResponse';
import { ListImageScanTaskRequest } from './model/ListImageScanTaskRequest';
import { ListImageScanTaskResponse } from './model/ListImageScanTaskResponse';
import { ListImageVulnerabilitiesRequest } from './model/ListImageVulnerabilitiesRequest';
import { ListImageVulnerabilitiesResponse } from './model/ListImageVulnerabilitiesResponse';
import { ListImageWhiteListsRequest } from './model/ListImageWhiteListsRequest';
import { ListImageWhiteListsResponse } from './model/ListImageWhiteListsResponse';
import { ListIsolatedFileRequest } from './model/ListIsolatedFileRequest';
import { ListIsolatedFileResponse } from './model/ListIsolatedFileResponse';
import { ListJarPackageHostInfoRequest } from './model/ListJarPackageHostInfoRequest';
import { ListJarPackageHostInfoResponse } from './model/ListJarPackageHostInfoResponse';
import { ListJarPackageInfoRequest } from './model/ListJarPackageInfoRequest';
import { ListJarPackageInfoResponse } from './model/ListJarPackageInfoResponse';
import { ListJarPackageStatisticsRequest } from './model/ListJarPackageStatisticsRequest';
import { ListJarPackageStatisticsResponse } from './model/ListJarPackageStatisticsResponse';
import { ListK8sCronJobsRequest } from './model/ListK8sCronJobsRequest';
import { ListK8sCronJobsResponse } from './model/ListK8sCronJobsResponse';
import { ListK8sDaemonSetsRequest } from './model/ListK8sDaemonSetsRequest';
import { ListK8sDaemonSetsResponse } from './model/ListK8sDaemonSetsResponse';
import { ListK8sDeploymentsRequest } from './model/ListK8sDeploymentsRequest';
import { ListK8sDeploymentsResponse } from './model/ListK8sDeploymentsResponse';
import { ListK8sJobsRequest } from './model/ListK8sJobsRequest';
import { ListK8sJobsResponse } from './model/ListK8sJobsResponse';
import { ListK8sPodsRequest } from './model/ListK8sPodsRequest';
import { ListK8sPodsResponse } from './model/ListK8sPodsResponse';
import { ListK8sStatefulSetsRequest } from './model/ListK8sStatefulSetsRequest';
import { ListK8sStatefulSetsResponse } from './model/ListK8sStatefulSetsResponse';
import { ListKernelModuleHostInfoRequest } from './model/ListKernelModuleHostInfoRequest';
import { ListKernelModuleHostInfoResponse } from './model/ListKernelModuleHostInfoResponse';
import { ListKernelModuleInfoRequest } from './model/ListKernelModuleInfoRequest';
import { ListKernelModuleInfoResponse } from './model/ListKernelModuleInfoResponse';
import { ListKernelModuleStatisticsRequest } from './model/ListKernelModuleStatisticsRequest';
import { ListKernelModuleStatisticsResponse } from './model/ListKernelModuleStatisticsResponse';
import { ListKubernetesClusterDetailsRequest } from './model/ListKubernetesClusterDetailsRequest';
import { ListKubernetesClusterDetailsResponse } from './model/ListKubernetesClusterDetailsResponse';
import { ListKubernetesEndpointDetailsRequest } from './model/ListKubernetesEndpointDetailsRequest';
import { ListKubernetesEndpointDetailsResponse } from './model/ListKubernetesEndpointDetailsResponse';
import { ListKubernetesServiceDetailsRequest } from './model/ListKubernetesServiceDetailsRequest';
import { ListKubernetesServiceDetailsResponse } from './model/ListKubernetesServiceDetailsResponse';
import { ListLockedStatusRequest } from './model/ListLockedStatusRequest';
import { ListLockedStatusResponse } from './model/ListLockedStatusResponse';
import { ListLoginCommonIpRequest } from './model/ListLoginCommonIpRequest';
import { ListLoginCommonIpResponse } from './model/ListLoginCommonIpResponse';
import { ListLoginCommonLocationRequest } from './model/ListLoginCommonLocationRequest';
import { ListLoginCommonLocationResponse } from './model/ListLoginCommonLocationResponse';
import { ListLoginWhiteIpRequest } from './model/ListLoginWhiteIpRequest';
import { ListLoginWhiteIpResponse } from './model/ListLoginWhiteIpResponse';
import { ListLoginWhiteListRequest } from './model/ListLoginWhiteListRequest';
import { ListLoginWhiteListResponse } from './model/ListLoginWhiteListResponse';
import { ListMalwareCollectStatusRequest } from './model/ListMalwareCollectStatusRequest';
import { ListMalwareCollectStatusResponse } from './model/ListMalwareCollectStatusResponse';
import { ListMultiCloudClustersRequest } from './model/ListMultiCloudClustersRequest';
import { ListMultiCloudClustersResponse } from './model/ListMultiCloudClustersResponse';
import { ListNamespacesRequest } from './model/ListNamespacesRequest';
import { ListNamespacesResponse } from './model/ListNamespacesResponse';
import { ListOperationLogsByVaultNameRequest } from './model/ListOperationLogsByVaultNameRequest';
import { ListOperationLogsByVaultNameResponse } from './model/ListOperationLogsByVaultNameResponse';
import { ListOrganizationTreeRequest } from './model/ListOrganizationTreeRequest';
import { ListOrganizationTreeResponse } from './model/ListOrganizationTreeResponse';
import { ListPasswordComplexityRequest } from './model/ListPasswordComplexityRequest';
import { ListPasswordComplexityResponse } from './model/ListPasswordComplexityResponse';
import { ListPluginInstallScriptRequest } from './model/ListPluginInstallScriptRequest';
import { ListPluginInstallScriptResponse } from './model/ListPluginInstallScriptResponse';
import { ListPluginsRequest } from './model/ListPluginsRequest';
import { ListPluginsResponse } from './model/ListPluginsResponse';
import { ListPoliciesRequest } from './model/ListPoliciesRequest';
import { ListPoliciesResponse } from './model/ListPoliciesResponse';
import { ListPolicyGroupRequest } from './model/ListPolicyGroupRequest';
import { ListPolicyGroupResponse } from './model/ListPolicyGroupResponse';
import { ListPortHostRequest } from './model/ListPortHostRequest';
import { ListPortHostResponse } from './model/ListPortHostResponse';
import { ListPortStatisticsRequest } from './model/ListPortStatisticsRequest';
import { ListPortStatisticsResponse } from './model/ListPortStatisticsResponse';
import { ListPortsRequest } from './model/ListPortsRequest';
import { ListPortsResponse } from './model/ListPortsResponse';
import { ListPrivilegedProcessResponseInfo } from './model/ListPrivilegedProcessResponseInfo';
import { ListProcessStatisticsRequest } from './model/ListProcessStatisticsRequest';
import { ListProcessStatisticsResponse } from './model/ListProcessStatisticsResponse';
import { ListProcessesHostRequest } from './model/ListProcessesHostRequest';
import { ListProcessesHostResponse } from './model/ListProcessesHostResponse';
import { ListProjectConfigsRequest } from './model/ListProjectConfigsRequest';
import { ListProjectConfigsRequestBody } from './model/ListProjectConfigsRequestBody';
import { ListProjectConfigsResponse } from './model/ListProjectConfigsResponse';
import { ListProjectTagsRequest } from './model/ListProjectTagsRequest';
import { ListProjectTagsResponse } from './model/ListProjectTagsResponse';
import { ListProtectionPolicyRequest } from './model/ListProtectionPolicyRequest';
import { ListProtectionPolicyResponse } from './model/ListProtectionPolicyResponse';
import { ListProtectionServerRequest } from './model/ListProtectionServerRequest';
import { ListProtectionServerResponse } from './model/ListProtectionServerResponse';
import { ListProtectionServersRequest } from './model/ListProtectionServersRequest';
import { ListProtectionServersResponse } from './model/ListProtectionServersResponse';
import { ListQueryExportTaskRequest } from './model/ListQueryExportTaskRequest';
import { ListQueryExportTaskResponse } from './model/ListQueryExportTaskResponse';
import { ListQuotasDetailRequest } from './model/ListQuotasDetailRequest';
import { ListQuotasDetailResponse } from './model/ListQuotasDetailResponse';
import { ListRansomwareProtectionNodesRequest } from './model/ListRansomwareProtectionNodesRequest';
import { ListRansomwareProtectionNodesResponse } from './model/ListRansomwareProtectionNodesResponse';
import { ListRaspEventsRequest } from './model/ListRaspEventsRequest';
import { ListRaspEventsResponse } from './model/ListRaspEventsResponse';
import { ListRaspPoliciesRequest } from './model/ListRaspPoliciesRequest';
import { ListRaspPoliciesResponse } from './model/ListRaspPoliciesResponse';
import { ListRegistryRequest } from './model/ListRegistryRequest';
import { ListRegistryResponse } from './model/ListRegistryResponse';
import { ListRegistryStatisticsRequest } from './model/ListRegistryStatisticsRequest';
import { ListRegistryStatisticsResponse } from './model/ListRegistryStatisticsResponse';
import { ListRiskConfigCheckRulesRequest } from './model/ListRiskConfigCheckRulesRequest';
import { ListRiskConfigCheckRulesResponse } from './model/ListRiskConfigCheckRulesResponse';
import { ListRiskConfigHostsRequest } from './model/ListRiskConfigHostsRequest';
import { ListRiskConfigHostsResponse } from './model/ListRiskConfigHostsResponse';
import { ListRiskConfigsRequest } from './model/ListRiskConfigsRequest';
import { ListRiskConfigsResponse } from './model/ListRiskConfigsResponse';
import { ListSecurityEventsRequest } from './model/ListSecurityEventsRequest';
import { ListSecurityEventsResponse } from './model/ListSecurityEventsResponse';
import { ListSecurityGroupPoliciesRequest } from './model/ListSecurityGroupPoliciesRequest';
import { ListSecurityGroupPoliciesResponse } from './model/ListSecurityGroupPoliciesResponse';
import { ListSecurityGroupsRequest } from './model/ListSecurityGroupsRequest';
import { ListSecurityGroupsResponse } from './model/ListSecurityGroupsResponse';
import { ListSwrImageRepositoryRequest } from './model/ListSwrImageRepositoryRequest';
import { ListSwrImageRepositoryResponse } from './model/ListSwrImageRepositoryResponse';
import { ListSystemUserWhiteListRequest } from './model/ListSystemUserWhiteListRequest';
import { ListSystemUserWhiteListResponse } from './model/ListSystemUserWhiteListResponse';
import { ListTaskResourcesRequest } from './model/ListTaskResourcesRequest';
import { ListTaskResourcesRequestBody } from './model/ListTaskResourcesRequestBody';
import { ListTaskResourcesRequestBodyClusterScanInfo } from './model/ListTaskResourcesRequestBodyClusterScanInfo';
import { ListTaskResourcesRequestBodyIacScanInfo } from './model/ListTaskResourcesRequestBodyIacScanInfo';
import { ListTaskResourcesResponse } from './model/ListTaskResourcesResponse';
import { ListTaskResourcesResponseInfoClusterScanDataList } from './model/ListTaskResourcesResponseInfoClusterScanDataList';
import { ListTaskResourcesResponseInfoIacScanDataList } from './model/ListTaskResourcesResponseInfoIacScanDataList';
import { ListTaskResourcesResponseInfoScanDetailList } from './model/ListTaskResourcesResponseInfoScanDetailList';
import { ListTasksRequest } from './model/ListTasksRequest';
import { ListTasksRequestBody } from './model/ListTasksRequestBody';
import { ListTasksRequestBodyClusterScanInfo } from './model/ListTasksRequestBodyClusterScanInfo';
import { ListTasksRequestBodyIacScanInfo } from './model/ListTasksRequestBodyIacScanInfo';
import { ListTasksResponse } from './model/ListTasksResponse';
import { ListTasksResponseInfoClusterScanInfo } from './model/ListTasksResponseInfoClusterScanInfo';
import { ListTasksResponseInfoDataList } from './model/ListTasksResponseInfoDataList';
import { ListTasksResponseInfoIacScanInfo } from './model/ListTasksResponseInfoIacScanInfo';
import { ListTimingOffConfigInfoResponseInfo } from './model/ListTimingOffConfigInfoResponseInfo';
import { ListTwoFactorLoginHostRequest } from './model/ListTwoFactorLoginHostRequest';
import { ListTwoFactorLoginHostResponse } from './model/ListTwoFactorLoginHostResponse';
import { ListUserChangeHistoriesRequest } from './model/ListUserChangeHistoriesRequest';
import { ListUserChangeHistoriesResponse } from './model/ListUserChangeHistoriesResponse';
import { ListUserStatisticsRequest } from './model/ListUserStatisticsRequest';
import { ListUserStatisticsResponse } from './model/ListUserStatisticsResponse';
import { ListUsersRequest } from './model/ListUsersRequest';
import { ListUsersResponse } from './model/ListUsersResponse';
import { ListVulAffectImagesRequest } from './model/ListVulAffectImagesRequest';
import { ListVulAffectImagesResponse } from './model/ListVulAffectImagesResponse';
import { ListVulContainerAppsRequest } from './model/ListVulContainerAppsRequest';
import { ListVulContainerAppsResponse } from './model/ListVulContainerAppsResponse';
import { ListVulContainersRequest } from './model/ListVulContainersRequest';
import { ListVulContainersResponse } from './model/ListVulContainersResponse';
import { ListVulHandleHistoryRequest } from './model/ListVulHandleHistoryRequest';
import { ListVulHandleHistoryResponse } from './model/ListVulHandleHistoryResponse';
import { ListVulHostAppsRequest } from './model/ListVulHostAppsRequest';
import { ListVulHostAppsResponse } from './model/ListVulHostAppsResponse';
import { ListVulHostBackupsRequest } from './model/ListVulHostBackupsRequest';
import { ListVulHostBackupsResponse } from './model/ListVulHostBackupsResponse';
import { ListVulHostProcessRequest } from './model/ListVulHostProcessRequest';
import { ListVulHostProcessResponse } from './model/ListVulHostProcessResponse';
import { ListVulHostVaultsRequest } from './model/ListVulHostVaultsRequest';
import { ListVulHostVaultsResponse } from './model/ListVulHostVaultsResponse';
import { ListVulHostsRequest } from './model/ListVulHostsRequest';
import { ListVulHostsResponse } from './model/ListVulHostsResponse';
import { ListVulScanTaskHostRequest } from './model/ListVulScanTaskHostRequest';
import { ListVulScanTaskHostResponse } from './model/ListVulScanTaskHostResponse';
import { ListVulScanTaskRequest } from './model/ListVulScanTaskRequest';
import { ListVulScanTaskResponse } from './model/ListVulScanTaskResponse';
import { ListVulnerabilitiesRequest } from './model/ListVulnerabilitiesRequest';
import { ListVulnerabilitiesResponse } from './model/ListVulnerabilitiesResponse';
import { ListVulnerabilityCveRequest } from './model/ListVulnerabilityCveRequest';
import { ListVulnerabilityCveResponse } from './model/ListVulnerabilityCveResponse';
import { ListWeakPasswordUsersRequest } from './model/ListWeakPasswordUsersRequest';
import { ListWeakPasswordUsersResponse } from './model/ListWeakPasswordUsersResponse';
import { ListWebAppAndServiceStatisticsRequest } from './model/ListWebAppAndServiceStatisticsRequest';
import { ListWebAppAndServiceStatisticsResponse } from './model/ListWebAppAndServiceStatisticsResponse';
import { ListWebAppAndServicesRequest } from './model/ListWebAppAndServicesRequest';
import { ListWebAppAndServicesResponse } from './model/ListWebAppAndServicesResponse';
import { ListWebFrameworkHostInfoRequest } from './model/ListWebFrameworkHostInfoRequest';
import { ListWebFrameworkHostInfoResponse } from './model/ListWebFrameworkHostInfoResponse';
import { ListWebFrameworkInfoRequest } from './model/ListWebFrameworkInfoRequest';
import { ListWebFrameworkInfoResponse } from './model/ListWebFrameworkInfoResponse';
import { ListWebFrameworkStatisticsRequest } from './model/ListWebFrameworkStatisticsRequest';
import { ListWebFrameworkStatisticsResponse } from './model/ListWebFrameworkStatisticsResponse';
import { ListWebSiteHostInfoRequest } from './model/ListWebSiteHostInfoRequest';
import { ListWebSiteHostInfoResponse } from './model/ListWebSiteHostInfoResponse';
import { ListWebSiteInfoRequest } from './model/ListWebSiteInfoRequest';
import { ListWebSiteInfoResponse } from './model/ListWebSiteInfoResponse';
import { ListWebSiteStatisticsRequest } from './model/ListWebSiteStatisticsRequest';
import { ListWebSiteStatisticsResponse } from './model/ListWebSiteStatisticsResponse';
import { ListWebTamperHostRequest } from './model/ListWebTamperHostRequest';
import { ListWebTamperHostResponse } from './model/ListWebTamperHostResponse';
import { ListWorkLoadsRequest } from './model/ListWorkLoadsRequest';
import { ListWorkLoadsResponse } from './model/ListWorkLoadsResponse';
import { ListWtpProtectHostRequest } from './model/ListWtpProtectHostRequest';
import { ListWtpProtectHostResponse } from './model/ListWtpProtectHostResponse';
import { LoginCommonIpResponseInfo } from './model/LoginCommonIpResponseInfo';
import { LoginCommonLocationResponseInfo } from './model/LoginCommonLocationResponseInfo';
import { LoginIp } from './model/LoginIp';
import { LoginPermission } from './model/LoginPermission';
import { LoginType } from './model/LoginType';
import { LoginUserName } from './model/LoginUserName';
import { LoginWhiteIpResponseInfo } from './model/LoginWhiteIpResponseInfo';
import { LoginWhiteListRequestInfo } from './model/LoginWhiteListRequestInfo';
import { LoginWhiteListResponseInfo } from './model/LoginWhiteListResponseInfo';
import { MaliciousNum } from './model/MaliciousNum';
import { MalwareName } from './model/MalwareName';
import { MalwareType } from './model/MalwareType';
import { ManualVulScanRequestInfo } from './model/ManualVulScanRequestInfo';
import { Memo } from './model/Memo';
import { ModClusterProtectionEventRequest } from './model/ModClusterProtectionEventRequest';
import { ModPolicyRequestInfo } from './model/ModPolicyRequestInfo';
import { ModifyCicdConfigurationRequest } from './model/ModifyCicdConfigurationRequest';
import { ModifyCicdConfigurationRequestBody } from './model/ModifyCicdConfigurationRequestBody';
import { ModifyCicdConfigurationResponse } from './model/ModifyCicdConfigurationResponse';
import { ModifyDecoyPortPolicyRequest } from './model/ModifyDecoyPortPolicyRequest';
import { ModifyDecoyPortPolicyResponse } from './model/ModifyDecoyPortPolicyResponse';
import { ModifyProjectConfigRequestBody } from './model/ModifyProjectConfigRequestBody';
import { ModifyProjectConfigsRequest } from './model/ModifyProjectConfigsRequest';
import { ModifyProjectConfigsResponse } from './model/ModifyProjectConfigsResponse';
import { MultiCloudClusterAuthInfo } from './model/MultiCloudClusterAuthInfo';
import { MultiCloudClusterConfigInfo } from './model/MultiCloudClusterConfigInfo';
import { MultiCloudClusterConfigRequestBody } from './model/MultiCloudClusterConfigRequestBody';
import { MultiCloudClusterCreateRequestBody } from './model/MultiCloudClusterCreateRequestBody';
import { MultiCloudClusterIdInfo } from './model/MultiCloudClusterIdInfo';
import { MultiCloudClusterInfo } from './model/MultiCloudClusterInfo';
import { MultiCloudClusterSyncStatusRequestBody } from './model/MultiCloudClusterSyncStatusRequestBody';
import { MultiValueTagInfo } from './model/MultiValueTagInfo';
import { NetworkNodeInfo } from './model/NetworkNodeInfo';
import { NetworkPolicyBody } from './model/NetworkPolicyBody';
import { NextStartTime } from './model/NextStartTime';
import { NodeDetectRiskResponseInfo } from './model/NodeDetectRiskResponseInfo';
import { NotEffectHostNum } from './model/NotEffectHostNum';
import { OccurTime } from './model/OccurTime';
import { Offset } from './model/Offset';
import { OperateAntiVirusResultRequestInfo } from './model/OperateAntiVirusResultRequestInfo';
import { OperateEventRequestInfo } from './model/OperateEventRequestInfo';
import { OperateResultRequestInfo } from './model/OperateResultRequestInfo';
import { OperateType } from './model/OperateType';
import { OperationDefinitionInfo } from './model/OperationDefinitionInfo';
import { OperationDefinitionRequestInfo } from './model/OperationDefinitionRequestInfo';
import { OperationLogInfo } from './model/OperationLogInfo';
import { OrganizationNodeResponseInfo } from './model/OrganizationNodeResponseInfo';
import { OsBit } from './model/OsBit';
import { OsName } from './model/OsName';
import { OsStatisticsInfo } from './model/OsStatisticsInfo';
import { OsType } from './model/OsType';
import { OsVersion } from './model/OsVersion';
import { ParentProcessEgid } from './model/ParentProcessEgid';
import { ParentProcessEuid } from './model/ParentProcessEuid';
import { ParentProcessGid } from './model/ParentProcessGid';
import { ParentProcessPid } from './model/ParentProcessPid';
import { ParentProcessStartTime } from './model/ParentProcessStartTime';
import { ParentProcessUid } from './model/ParentProcessUid';
import { ParseMultiCloudClusterConfigRequest } from './model/ParseMultiCloudClusterConfigRequest';
import { ParseMultiCloudClusterConfigResponse } from './model/ParseMultiCloudClusterConfigResponse';
import { PluginInstallScriptResponseInfo } from './model/PluginInstallScriptResponseInfo';
import { PluginResponseInfo } from './model/PluginResponseInfo';
import { PodBaseInfo } from './model/PodBaseInfo';
import { PolicyContent } from './model/PolicyContent';
import { PolicyDetailsPortList } from './model/PolicyDetailsPortList';
import { PolicyGroupResponseInfo } from './model/PolicyGroupResponseInfo';
import { PolicyId } from './model/PolicyId';
import { PolicyInfo } from './model/PolicyInfo';
import { PolicyListDataList } from './model/PolicyListDataList';
import { PolicyName } from './model/PolicyName';
import { PolicyProtectScope } from './model/PolicyProtectScope';
import { PolicySwitchRequestInfo } from './model/PolicySwitchRequestInfo';
import { PolicyTemplateInfo } from './model/PolicyTemplateInfo';
import { PolicyTypeApp } from './model/PolicyTypeApp';
import { PortHostResponseInfo } from './model/PortHostResponseInfo';
import { PortResponseInfo } from './model/PortResponseInfo';
import { PortStatisticResponseInfo } from './model/PortStatisticResponseInfo';
import { PrivateImageRepositoryInfo } from './model/PrivateImageRepositoryInfo';
import { PrivateIp } from './model/PrivateIp';
import { PrivilegedProcessResponseInfo } from './model/PrivilegedProcessResponseInfo';
import { ProcessEgid } from './model/ProcessEgid';
import { ProcessEuid } from './model/ProcessEuid';
import { ProcessEventName } from './model/ProcessEventName';
import { ProcessEventResourceResponseInfo } from './model/ProcessEventResourceResponseInfo';
import { ProcessFilename } from './model/ProcessFilename';
import { ProcessGid } from './model/ProcessGid';
import { ProcessHandleMethod2 } from './model/ProcessHandleMethod2';
import { ProcessHash } from './model/ProcessHash';
import { ProcessName } from './model/ProcessName';
import { ProcessPath } from './model/ProcessPath';
import { ProcessPid } from './model/ProcessPid';
import { ProcessStartTime } from './model/ProcessStartTime';
import { ProcessStatisticResponseInfo } from './model/ProcessStatisticResponseInfo';
import { ProcessUid } from './model/ProcessUid';
import { ProcessUsername } from './model/ProcessUsername';
import { ProcessesHostResponseInfo } from './model/ProcessesHostResponseInfo';
import { ProjectConfigInfo } from './model/ProjectConfigInfo';
import { ProjectId } from './model/ProjectId';
import { ProtectMode } from './model/ProtectMode';
import { ProtectStatus } from './model/ProtectStatus';
import { ProtectionInfoRequestInfo } from './model/ProtectionInfoRequestInfo';
import { ProtectionPolicyInfo } from './model/ProtectionPolicyInfo';
import { ProtectionProxyInfoRequestInfo } from './model/ProtectionProxyInfoRequestInfo';
import { ProtectionServeInfo } from './model/ProtectionServeInfo';
import { ProtectionServerInfo } from './model/ProtectionServerInfo';
import { ProtectionServerInfoBackupError } from './model/ProtectionServerInfoBackupError';
import { PublicIp } from './model/PublicIp';
import { PwdPolicyInfoResponseInfo } from './model/PwdPolicyInfoResponseInfo';
import { QuotaResourcesResponseInfo } from './model/QuotaResourcesResponseInfo';
import { QuotaStatisticsInfo } from './model/QuotaStatisticsInfo';
import { QuotaStatisticsResponseInfo } from './model/QuotaStatisticsResponseInfo';
import { RaspProtectHistoryResponseInfo } from './model/RaspProtectHistoryResponseInfo';
import { RaspProtectStatus } from './model/RaspProtectStatus';
import { RecentTime } from './model/RecentTime';
import { RecordUserViewVulTaskRequest } from './model/RecordUserViewVulTaskRequest';
import { RecordUserViewVulTaskRequestInfo } from './model/RecordUserViewVulTaskRequestInfo';
import { RecordUserViewVulTaskResponse } from './model/RecordUserViewVulTaskResponse';
import { Region } from './model/Region';
import { RegistryInfo } from './model/RegistryInfo';
import { Remarks } from './model/Remarks';
import { RemoveAlarmWhiteListRequest } from './model/RemoveAlarmWhiteListRequest';
import { RemoveAlarmWhiteListRequestInfo } from './model/RemoveAlarmWhiteListRequestInfo';
import { RemoveAlarmWhiteListResponse } from './model/RemoveAlarmWhiteListResponse';
import { RemoveLoginWhiteListRequest } from './model/RemoveLoginWhiteListRequest';
import { RemoveLoginWhiteListRequestInfo } from './model/RemoveLoginWhiteListRequestInfo';
import { RemoveLoginWhiteListResponse } from './model/RemoveLoginWhiteListResponse';
import { RemoveMultiCloudClustersRequest } from './model/RemoveMultiCloudClustersRequest';
import { RemoveMultiCloudClustersResponse } from './model/RemoveMultiCloudClustersResponse';
import { RemoveSystemUserWhiteListRequest } from './model/RemoveSystemUserWhiteListRequest';
import { RemoveSystemUserWhiteListRequestInfo } from './model/RemoveSystemUserWhiteListRequestInfo';
import { RemoveSystemUserWhiteListResponse } from './model/RemoveSystemUserWhiteListResponse';
import { RepairPriorityListInfo } from './model/RepairPriorityListInfo';
import { ResourceInfo } from './model/ResourceInfo';
import { ResourceProductDataObjectInfo } from './model/ResourceProductDataObjectInfo';
import { ResourceQuotasInfo } from './model/ResourceQuotasInfo';
import { ResourceTagInfo } from './model/ResourceTagInfo';
import { Resources } from './model/Resources';
import { RestoreVulHostBackupRequest } from './model/RestoreVulHostBackupRequest';
import { RestoreVulHostBackupResponse } from './model/RestoreVulHostBackupResponse';
import { ResultDetailResponseInfo } from './model/ResultDetailResponseInfo';
import { ResultFileResponseInfo } from './model/ResultFileResponseInfo';
import { ResultId } from './model/ResultId';
import { ResultResourceResponseInfo } from './model/ResultResourceResponseInfo';
import { RiskHostNum } from './model/RiskHostNum';
import { RootPermission } from './model/RootPermission';
import { RunDuration } from './model/RunDuration';
import { RunHostAssetManualCollectRequest } from './model/RunHostAssetManualCollectRequest';
import { RunHostAssetManualCollectResponse } from './model/RunHostAssetManualCollectResponse';
import { RunImageSynchronizeRequest } from './model/RunImageSynchronizeRequest';
import { RunImageSynchronizeRequestInfo } from './model/RunImageSynchronizeRequestInfo';
import { RunImageSynchronizeResponse } from './model/RunImageSynchronizeResponse';
import { RuntimeRequestBody } from './model/RuntimeRequestBody';
import { SaveBrowsingHistoryRequest } from './model/SaveBrowsingHistoryRequest';
import { SaveBrowsingHistoryRequestInfo } from './model/SaveBrowsingHistoryRequestInfo';
import { SaveBrowsingHistoryResponse } from './model/SaveBrowsingHistoryResponse';
import { ScanDir } from './model/ScanDir';
import { ScanFileNum } from './model/ScanFileNum';
import { ScanHour } from './model/ScanHour';
import { ScanMinute } from './model/ScanMinute';
import { ScanPeriod } from './model/ScanPeriod';
import { ScanPeriodDate } from './model/ScanPeriodDate';
import { ScanProgress } from './model/ScanProgress';
import { ScanTime } from './model/ScanTime';
import { ScanType } from './model/ScanType';
import { SecurityCheckHostInfoResponseInfo } from './model/SecurityCheckHostInfoResponseInfo';
import { SecurityCheckInfoResponseInfo } from './model/SecurityCheckInfoResponseInfo';
import { SecurityCheckTaskCondition } from './model/SecurityCheckTaskCondition';
import { SecurityGroup } from './model/SecurityGroup';
import { SecurityGroupPolicyResponseInfo } from './model/SecurityGroupPolicyResponseInfo';
import { ServerAppStatusResponseInfo } from './model/ServerAppStatusResponseInfo';
import { ServerlessCronJobInfo } from './model/ServerlessCronJobInfo';
import { ServerlessDeploymentInfo } from './model/ServerlessDeploymentInfo';
import { ServerlessJobInfo } from './model/ServerlessJobInfo';
import { ServerlessPodInfo } from './model/ServerlessPodInfo';
import { ServerlessStatefulSetInfo } from './model/ServerlessStatefulSetInfo';
import { ServicePortInfo } from './model/ServicePortInfo';
import { SetMalwareRemindersRequest } from './model/SetMalwareRemindersRequest';
import { SetMalwareRemindersRequestBody } from './model/SetMalwareRemindersRequestBody';
import { SetMalwareRemindersResponse } from './model/SetMalwareRemindersResponse';
import { SetProtectDirSwitchInfoRequest } from './model/SetProtectDirSwitchInfoRequest';
import { SetProtectDirSwitchInfoResponse } from './model/SetProtectDirSwitchInfoResponse';
import { SetProtectDirSwitchRequestInfo } from './model/SetProtectDirSwitchRequestInfo';
import { SetRaspSwitchRequest } from './model/SetRaspSwitchRequest';
import { SetRaspSwitchRequestInfo } from './model/SetRaspSwitchRequestInfo';
import { SetRaspSwitchResponse } from './model/SetRaspSwitchResponse';
import { SetRemoteBackupInfoRequest } from './model/SetRemoteBackupInfoRequest';
import { SetRemoteBackupInfoRequestInfo } from './model/SetRemoteBackupInfoRequestInfo';
import { SetRemoteBackupInfoResponse } from './model/SetRemoteBackupInfoResponse';
import { SetTwoFactorLoginConfigRequest } from './model/SetTwoFactorLoginConfigRequest';
import { SetTwoFactorLoginConfigRequestBody } from './model/SetTwoFactorLoginConfigRequestBody';
import { SetTwoFactorLoginConfigResponse } from './model/SetTwoFactorLoginConfigResponse';
import { SetWtpProtectionStatusInfoRequest } from './model/SetWtpProtectionStatusInfoRequest';
import { SetWtpProtectionStatusInfoResponse } from './model/SetWtpProtectionStatusInfoResponse';
import { SetWtpProtectionStatusRequestInfo } from './model/SetWtpProtectionStatusRequestInfo';
import { Severity } from './model/Severity';
import { ShowAgentDaemonsetDeployTemplateRequest } from './model/ShowAgentDaemonsetDeployTemplateRequest';
import { ShowAgentDaemonsetDeployTemplateResponse } from './model/ShowAgentDaemonsetDeployTemplateResponse';
import { ShowAgentDaemonsetDetailInfoRequest } from './model/ShowAgentDaemonsetDetailInfoRequest';
import { ShowAgentDaemonsetDetailInfoResponse } from './model/ShowAgentDaemonsetDetailInfoResponse';
import { ShowAgentStatisticsStatusRequest } from './model/ShowAgentStatisticsStatusRequest';
import { ShowAgentStatisticsStatusResponse } from './model/ShowAgentStatisticsStatusResponse';
import { ShowAntivirusFreeQuotaRequest } from './model/ShowAntivirusFreeQuotaRequest';
import { ShowAntivirusFreeQuotaResponse } from './model/ShowAntivirusFreeQuotaResponse';
import { ShowAntivirusPayPerScanStatusRequest } from './model/ShowAntivirusPayPerScanStatusRequest';
import { ShowAntivirusPayPerScanStatusResponse } from './model/ShowAntivirusPayPerScanStatusResponse';
import { ShowAntivirusStatisticRequest } from './model/ShowAntivirusStatisticRequest';
import { ShowAntivirusStatisticResponse } from './model/ShowAntivirusStatisticResponse';
import { ShowAppRaspSwitchStatusRequest } from './model/ShowAppRaspSwitchStatusRequest';
import { ShowAppRaspSwitchStatusResponse } from './model/ShowAppRaspSwitchStatusResponse';
import { ShowAppWhitelistAgentStaticsRequest } from './model/ShowAppWhitelistAgentStaticsRequest';
import { ShowAppWhitelistAgentStaticsResponse } from './model/ShowAppWhitelistAgentStaticsResponse';
import { ShowAppWhitelistPolicyRequest } from './model/ShowAppWhitelistPolicyRequest';
import { ShowAppWhitelistPolicyResponse } from './model/ShowAppWhitelistPolicyResponse';
import { ShowAssetStatisticRequest } from './model/ShowAssetStatisticRequest';
import { ShowAssetStatisticResponse } from './model/ShowAssetStatisticResponse';
import { ShowBackupPolicyInfoRequest } from './model/ShowBackupPolicyInfoRequest';
import { ShowBackupPolicyInfoResponse } from './model/ShowBackupPolicyInfoResponse';
import { ShowBaselineDirectoryInfo } from './model/ShowBaselineDirectoryInfo';
import { ShowBaselineDirectoryInfoDataList } from './model/ShowBaselineDirectoryInfoDataList';
import { ShowBaselineDirectoryRequest } from './model/ShowBaselineDirectoryRequest';
import { ShowBaselineDirectoryResponse } from './model/ShowBaselineDirectoryResponse';
import { ShowBaselineScanStatusRequest } from './model/ShowBaselineScanStatusRequest';
import { ShowBaselineScanStatusResponse } from './model/ShowBaselineScanStatusResponse';
import { ShowBaselineWhiteListRequest } from './model/ShowBaselineWhiteListRequest';
import { ShowBaselineWhiteListResponse } from './model/ShowBaselineWhiteListResponse';
import { ShowCheckRuleDetailRequest } from './model/ShowCheckRuleDetailRequest';
import { ShowCheckRuleDetailResponse } from './model/ShowCheckRuleDetailResponse';
import { ShowCicdConfigurationRequest } from './model/ShowCicdConfigurationRequest';
import { ShowCicdConfigurationResponse } from './model/ShowCicdConfigurationResponse';
import { ShowClusterAssetStatisticsRequest } from './model/ShowClusterAssetStatisticsRequest';
import { ShowClusterAssetStatisticsResponse } from './model/ShowClusterAssetStatisticsResponse';
import { ShowClusterProtectPolicyTemplateRequest } from './model/ShowClusterProtectPolicyTemplateRequest';
import { ShowClusterProtectPolicyTemplateResponse } from './model/ShowClusterProtectPolicyTemplateResponse';
import { ShowClusterScanStatisticsRequest } from './model/ShowClusterScanStatisticsRequest';
import { ShowClusterScanStatisticsResponse } from './model/ShowClusterScanStatisticsResponse';
import { ShowCommonPortRequest } from './model/ShowCommonPortRequest';
import { ShowCommonPortResponse } from './model/ShowCommonPortResponse';
import { ShowContainerNetworkInfoRequest } from './model/ShowContainerNetworkInfoRequest';
import { ShowContainerNetworkInfoResponse } from './model/ShowContainerNetworkInfoResponse';
import { ShowContainerNodeStatisticsRequest } from './model/ShowContainerNodeStatisticsRequest';
import { ShowContainerNodeStatisticsResponse } from './model/ShowContainerNodeStatisticsResponse';
import { ShowContainerProtectionStatusRequest } from './model/ShowContainerProtectionStatusRequest';
import { ShowContainerProtectionStatusResponse } from './model/ShowContainerProtectionStatusResponse';
import { ShowDecoyPortPolicyDetailsRequest } from './model/ShowDecoyPortPolicyDetailsRequest';
import { ShowDecoyPortPolicyDetailsResponse } from './model/ShowDecoyPortPolicyDetailsResponse';
import { ShowEventAttackTagRequest } from './model/ShowEventAttackTagRequest';
import { ShowEventAttackTagResponse } from './model/ShowEventAttackTagResponse';
import { ShowFileStatisticRequest } from './model/ShowFileStatisticRequest';
import { ShowFileStatisticResponse } from './model/ShowFileStatisticResponse';
import { ShowHostAssetManualCollectStatusRequest } from './model/ShowHostAssetManualCollectStatusRequest';
import { ShowHostAssetManualCollectStatusResponse } from './model/ShowHostAssetManualCollectStatusResponse';
import { ShowHostProtectionStatusRequest } from './model/ShowHostProtectionStatusRequest';
import { ShowHostProtectionStatusResponse } from './model/ShowHostProtectionStatusResponse';
import { ShowImageAssetStatisticsRequest } from './model/ShowImageAssetStatisticsRequest';
import { ShowImageAssetStatisticsResponse } from './model/ShowImageAssetStatisticsResponse';
import { ShowImageCheckRuleDetailRequest } from './model/ShowImageCheckRuleDetailRequest';
import { ShowImageCheckRuleDetailResponse } from './model/ShowImageCheckRuleDetailResponse';
import { ShowImageUploadCommandRequest } from './model/ShowImageUploadCommandRequest';
import { ShowImageUploadCommandResponse } from './model/ShowImageUploadCommandResponse';
import { ShowImageWhiteListDetailRequest } from './model/ShowImageWhiteListDetailRequest';
import { ShowImageWhiteListDetailResponse } from './model/ShowImageWhiteListDetailResponse';
import { ShowK8sContainerDetailRequest } from './model/ShowK8sContainerDetailRequest';
import { ShowK8sContainerDetailResponse } from './model/ShowK8sContainerDetailResponse';
import { ShowK8sPodDetailRequest } from './model/ShowK8sPodDetailRequest';
import { ShowK8sPodDetailResponse } from './model/ShowK8sPodDetailResponse';
import { ShowKubernetesEndpointInfoRequest } from './model/ShowKubernetesEndpointInfoRequest';
import { ShowKubernetesEndpointInfoResponse } from './model/ShowKubernetesEndpointInfoResponse';
import { ShowKubernetesServiceInfoRequest } from './model/ShowKubernetesServiceInfoRequest';
import { ShowKubernetesServiceInfoResponse } from './model/ShowKubernetesServiceInfoResponse';
import { ShowLatestExportTaskByTypeRequest } from './model/ShowLatestExportTaskByTypeRequest';
import { ShowLatestExportTaskByTypeResponse } from './model/ShowLatestExportTaskByTypeResponse';
import { ShowMalwareRemindersRequest } from './model/ShowMalwareRemindersRequest';
import { ShowMalwareRemindersResponse } from './model/ShowMalwareRemindersResponse';
import { ShowMultiCloudClusterAuthRequest } from './model/ShowMultiCloudClusterAuthRequest';
import { ShowMultiCloudClusterAuthResponse } from './model/ShowMultiCloudClusterAuthResponse';
import { ShowMultiCloudClusterImageCommandRequest } from './model/ShowMultiCloudClusterImageCommandRequest';
import { ShowMultiCloudClusterImageCommandResponse } from './model/ShowMultiCloudClusterImageCommandResponse';
import { ShowMultiCloudClusterProxyScriptRequest } from './model/ShowMultiCloudClusterProxyScriptRequest';
import { ShowMultiCloudClusterProxyScriptResponse } from './model/ShowMultiCloudClusterProxyScriptResponse';
import { ShowNetworkStatisticsRequest } from './model/ShowNetworkStatisticsRequest';
import { ShowNetworkStatisticsResponse } from './model/ShowNetworkStatisticsResponse';
import { ShowOsStatisticsInfoRequest } from './model/ShowOsStatisticsInfoRequest';
import { ShowOsStatisticsInfoResponse } from './model/ShowOsStatisticsInfoResponse';
import { ShowPageNoticesInfo } from './model/ShowPageNoticesInfo';
import { ShowPageNoticesRequest } from './model/ShowPageNoticesRequest';
import { ShowPageNoticesResponse } from './model/ShowPageNoticesResponse';
import { ShowPeriodResponseInfo } from './model/ShowPeriodResponseInfo';
import { ShowPolicySwitchStatusRequest } from './model/ShowPolicySwitchStatusRequest';
import { ShowPolicySwitchStatusResponse } from './model/ShowPolicySwitchStatusResponse';
import { ShowProductdataOfferingInfosRequest } from './model/ShowProductdataOfferingInfosRequest';
import { ShowProductdataOfferingInfosResponse } from './model/ShowProductdataOfferingInfosResponse';
import { ShowPwdDirectoryInfo } from './model/ShowPwdDirectoryInfo';
import { ShowQuotaStatisticsInfoRequest } from './model/ShowQuotaStatisticsInfoRequest';
import { ShowQuotaStatisticsInfoResponse } from './model/ShowQuotaStatisticsInfoResponse';
import { ShowRaspPolicyDetailRequest } from './model/ShowRaspPolicyDetailRequest';
import { ShowRaspPolicyDetailResponse } from './model/ShowRaspPolicyDetailResponse';
import { ShowRaspProtectStatisticsRequest } from './model/ShowRaspProtectStatisticsRequest';
import { ShowRaspProtectStatisticsResponse } from './model/ShowRaspProtectStatisticsResponse';
import { ShowRaspServerDetailRequest } from './model/ShowRaspServerDetailRequest';
import { ShowRaspServerDetailResponse } from './model/ShowRaspServerDetailResponse';
import { ShowRemoteBackupHostInfoRequest } from './model/ShowRemoteBackupHostInfoRequest';
import { ShowRemoteBackupHostInfoResponse } from './model/ShowRemoteBackupHostInfoResponse';
import { ShowResourceQuotasRequest } from './model/ShowResourceQuotasRequest';
import { ShowResourceQuotasResponse } from './model/ShowResourceQuotasResponse';
import { ShowRiskConfigDetailRequest } from './model/ShowRiskConfigDetailRequest';
import { ShowRiskConfigDetailResponse } from './model/ShowRiskConfigDetailResponse';
import { ShowSecurityCheckClusterReportRequest } from './model/ShowSecurityCheckClusterReportRequest';
import { ShowSecurityCheckClusterReportResponse } from './model/ShowSecurityCheckClusterReportResponse';
import { ShowSingleBackupPolicyInfoRequest } from './model/ShowSingleBackupPolicyInfoRequest';
import { ShowSingleBackupPolicyInfoResponse } from './model/ShowSingleBackupPolicyInfoResponse';
import { ShowTaskStatisticsRequest } from './model/ShowTaskStatisticsRequest';
import { ShowTaskStatisticsResponse } from './model/ShowTaskStatisticsResponse';
import { ShowVulBackupStatisticsRequest } from './model/ShowVulBackupStatisticsRequest';
import { ShowVulBackupStatisticsResponse } from './model/ShowVulBackupStatisticsResponse';
import { ShowVulReportDataRequest } from './model/ShowVulReportDataRequest';
import { ShowVulReportDataResponse } from './model/ShowVulReportDataResponse';
import { ShowVulReportDataResponseInfoCveList } from './model/ShowVulReportDataResponseInfoCveList';
import { ShowVulReportDataResponseInfoHosts } from './model/ShowVulReportDataResponseInfoHosts';
import { ShowVulReportDataResponseInfoSumary } from './model/ShowVulReportDataResponseInfoSumary';
import { ShowVulReportDataResponseInfoVulnerabilities } from './model/ShowVulReportDataResponseInfoVulnerabilities';
import { ShowVulScanPolicyRequest } from './model/ShowVulScanPolicyRequest';
import { ShowVulScanPolicyResponse } from './model/ShowVulScanPolicyResponse';
import { ShowVulStaticsRequest } from './model/ShowVulStaticsRequest';
import { ShowVulStaticsResponse } from './model/ShowVulStaticsResponse';
import { ShowVulTaskStatisticsRequest } from './model/ShowVulTaskStatisticsRequest';
import { ShowVulTaskStatisticsResponse } from './model/ShowVulTaskStatisticsResponse';
import { ShowWebTamperHostPolicyRequest } from './model/ShowWebTamperHostPolicyRequest';
import { ShowWebTamperHostPolicyResponse } from './model/ShowWebTamperHostPolicyResponse';
import { ShowWebTamperRaspPathRequest } from './model/ShowWebTamperRaspPathRequest';
import { ShowWebTamperRaspPathResponse } from './model/ShowWebTamperRaspPathResponse';
import { ShowWtpProtectStatisticsRequest } from './model/ShowWtpProtectStatisticsRequest';
import { ShowWtpProtectStatisticsResponse } from './model/ShowWtpProtectStatisticsResponse';
import { SrcIp } from './model/SrcIp';
import { StartAutoKillVirusStatusRequest } from './model/StartAutoKillVirusStatusRequest';
import { StartAutoKillVirusStatusResponse } from './model/StartAutoKillVirusStatusResponse';
import { StartProtectionRequest } from './model/StartProtectionRequest';
import { StartProtectionResponse } from './model/StartProtectionResponse';
import { StartTime } from './model/StartTime';
import { StartType } from './model/StartType';
import { StopProtectionRequest } from './model/StopProtectionRequest';
import { StopProtectionResponse } from './model/StopProtectionResponse';
import { SuspiciousNum } from './model/SuspiciousNum';
import { SwitchAntivirusTaskRequest } from './model/SwitchAntivirusTaskRequest';
import { SwitchAntivirusTaskRequestInfo } from './model/SwitchAntivirusTaskRequestInfo';
import { SwitchAntivirusTaskResponse } from './model/SwitchAntivirusTaskResponse';
import { SwitchAppWhitelistPolicyHostRequest } from './model/SwitchAppWhitelistPolicyHostRequest';
import { SwitchAppWhitelistPolicyHostRequestInfo } from './model/SwitchAppWhitelistPolicyHostRequestInfo';
import { SwitchAppWhitelistPolicyHostResponse } from './model/SwitchAppWhitelistPolicyHostResponse';
import { SwitchAppWhitelistPolicyLearnStatusRequest } from './model/SwitchAppWhitelistPolicyLearnStatusRequest';
import { SwitchAppWhitelistPolicyLearnStatusRequestInfo } from './model/SwitchAppWhitelistPolicyLearnStatusRequestInfo';
import { SwitchAppWhitelistPolicyLearnStatusResponse } from './model/SwitchAppWhitelistPolicyLearnStatusResponse';
import { SwitchClusterProtectionModeRequest } from './model/SwitchClusterProtectionModeRequest';
import { SwitchClusterProtectionModeRequestBody } from './model/SwitchClusterProtectionModeRequestBody';
import { SwitchClusterProtectionModeResponse } from './model/SwitchClusterProtectionModeResponse';
import { SwitchContainerHostsProtectStatusRequestInfo } from './model/SwitchContainerHostsProtectStatusRequestInfo';
import { SwitchContainerProtectStatusRequest } from './model/SwitchContainerProtectStatusRequest';
import { SwitchContainerProtectStatusResponse } from './model/SwitchContainerProtectStatusResponse';
import { SwitchDecoyPortHostPolicyRequest } from './model/SwitchDecoyPortHostPolicyRequest';
import { SwitchDecoyPortHostPolicyResponse } from './model/SwitchDecoyPortHostPolicyResponse';
import { SwitchHostsProtectStatusRequest } from './model/SwitchHostsProtectStatusRequest';
import { SwitchHostsProtectStatusRequestInfo } from './model/SwitchHostsProtectStatusRequestInfo';
import { SwitchHostsProtectStatusResponse } from './model/SwitchHostsProtectStatusResponse';
import { SwitchRaspRequest } from './model/SwitchRaspRequest';
import { SwitchRaspRequestInfo } from './model/SwitchRaspRequestInfo';
import { SwitchRaspResponse } from './model/SwitchRaspResponse';
import { SyncClusterListRequest } from './model/SyncClusterListRequest';
import { SyncClusterListResponse } from './model/SyncClusterListResponse';
import { SyncClusterProtectionEventRequest } from './model/SyncClusterProtectionEventRequest';
import { SyncClusterProtectionEventResponse } from './model/SyncClusterProtectionEventResponse';
import { SyncContainerNetworkNodeRequest } from './model/SyncContainerNetworkNodeRequest';
import { SyncContainerNetworkNodeResponse } from './model/SyncContainerNetworkNodeResponse';
import { SyncContainerNetworkPolicyListRequest } from './model/SyncContainerNetworkPolicyListRequest';
import { SyncContainerNetworkPolicyListResponse } from './model/SyncContainerNetworkPolicyListResponse';
import { SyncMultiCloudClusterStatusRequest } from './model/SyncMultiCloudClusterStatusRequest';
import { SyncMultiCloudClusterStatusResponse } from './model/SyncMultiCloudClusterStatusResponse';
import { SyncSecurityGroupPoliciesRequest } from './model/SyncSecurityGroupPoliciesRequest';
import { SyncSecurityGroupPoliciesResponse } from './model/SyncSecurityGroupPoliciesResponse';
import { SysArch } from './model/SysArch';
import { SystemUserName } from './model/SystemUserName';
import { SystemUserWhiteListRequestInfo } from './model/SystemUserWhiteListRequestInfo';
import { SystemUserWhiteListResponseInfo } from './model/SystemUserWhiteListResponseInfo';
import { TagInfo } from './model/TagInfo';
import { TaskId } from './model/TaskId';
import { TaskName } from './model/TaskName';
import { TaskStatus } from './model/TaskStatus';
import { TimezoneOffset } from './model/TimezoneOffset';
import { TimingRangeConfigInfo } from './model/TimingRangeConfigInfo';
import { TimingRangeConfigRequestInfo } from './model/TimingRangeConfigRequestInfo';
import { TotalNum } from './model/TotalNum';
import { TrustNum } from './model/TrustNum';
import { TrustProcessInfo } from './model/TrustProcessInfo';
import { TwoFactorLoginHostResponseInfo } from './model/TwoFactorLoginHostResponseInfo';
import { UnknownNum } from './model/UnknownNum';
import { UnprotectHostNum } from './model/UnprotectHostNum';
import { UpdateAgentDaemonsetRequest } from './model/UpdateAgentDaemonsetRequest';
import { UpdateAgentDaemonsetResponse } from './model/UpdateAgentDaemonsetResponse';
import { UpdateBackupHostInfoRequest } from './model/UpdateBackupHostInfoRequest';
import { UpdateBackupHostInfoResponse } from './model/UpdateBackupHostInfoResponse';
import { UpdateBackupHostRequestInfo } from './model/UpdateBackupHostRequestInfo';
import { UpdateBackupPolicyInfoRequest } from './model/UpdateBackupPolicyInfoRequest';
import { UpdateBackupPolicyInfoResponse } from './model/UpdateBackupPolicyInfoResponse';
import { UpdateBackupPolicyRequestInfo } from './model/UpdateBackupPolicyRequestInfo';
import { UpdateBackupPolicyRequestInfo1 } from './model/UpdateBackupPolicyRequestInfo1';
import { UpdateContainerNetworkPolicyRequest } from './model/UpdateContainerNetworkPolicyRequest';
import { UpdateContainerNetworkPolicyResponse } from './model/UpdateContainerNetworkPolicyResponse';
import { UpdateDaemonsetInfo } from './model/UpdateDaemonsetInfo';
import { UpdateDaemonsetRequestBody } from './model/UpdateDaemonsetRequestBody';
import { UpdateDaemonsetRespInfo } from './model/UpdateDaemonsetRespInfo';
import { UpdateMultiCloudClusterRequestBody } from './model/UpdateMultiCloudClusterRequestBody';
import { UpdateMultiCloudClustersRequest } from './model/UpdateMultiCloudClustersRequest';
import { UpdateMultiCloudClustersResponse } from './model/UpdateMultiCloudClustersResponse';
import { UpdateNetworkPolicy } from './model/UpdateNetworkPolicy';
import { UpdatePolicyRequest } from './model/UpdatePolicyRequest';
import { UpdatePolicyRequestBody } from './model/UpdatePolicyRequestBody';
import { UpdatePolicyResponse } from './model/UpdatePolicyResponse';
import { UpdateProtectionPolicyInfoRequestInfo } from './model/UpdateProtectionPolicyInfoRequestInfo';
import { UpdateProtectionPolicyRequest } from './model/UpdateProtectionPolicyRequest';
import { UpdateProtectionPolicyResponse } from './model/UpdateProtectionPolicyResponse';
import { UpdateRegistryRequest } from './model/UpdateRegistryRequest';
import { UpdateRegistryRequestBody } from './model/UpdateRegistryRequestBody';
import { UpdateRegistryResponse } from './model/UpdateRegistryResponse';
import { UpdateSecurityGroupPolicyRequest } from './model/UpdateSecurityGroupPolicyRequest';
import { UpdateSecurityGroupPolicyRequestBody } from './model/UpdateSecurityGroupPolicyRequestBody';
import { UpdateSecurityGroupPolicyResponse } from './model/UpdateSecurityGroupPolicyResponse';
import { UpdateSystemUserWhiteListRequest } from './model/UpdateSystemUserWhiteListRequest';
import { UpdateSystemUserWhiteListRequestInfo } from './model/UpdateSystemUserWhiteListRequestInfo';
import { UpdateSystemUserWhiteListResponse } from './model/UpdateSystemUserWhiteListResponse';
import { UpdateTime } from './model/UpdateTime';
import { UpdateWebTamperHostPolicyRequest } from './model/UpdateWebTamperHostPolicyRequest';
import { UpdateWebTamperHostPolicyRequestInfo } from './model/UpdateWebTamperHostPolicyRequestInfo';
import { UpdateWebTamperHostPolicyResponse } from './model/UpdateWebTamperHostPolicyResponse';
import { UpdateWebTamperRaspPathRequest } from './model/UpdateWebTamperRaspPathRequest';
import { UpdateWebTamperRaspPathRequestInfo } from './model/UpdateWebTamperRaspPathRequestInfo';
import { UpdateWebTamperRaspPathResponse } from './model/UpdateWebTamperRaspPathResponse';
import { UserChangeHistoryResponseInfo } from './model/UserChangeHistoryResponseInfo';
import { UserGroupName } from './model/UserGroupName';
import { UserHomeDir } from './model/UserHomeDir';
import { UserName } from './model/UserName';
import { UserResponseInfo } from './model/UserResponseInfo';
import { UserStatisticInfoResponseInfo } from './model/UserStatisticInfoResponseInfo';
import { VirusNum } from './model/VirusNum';
import { VulAffectContainerAppInfo } from './model/VulAffectContainerAppInfo';
import { VulAffectContainerAppPath } from './model/VulAffectContainerAppPath';
import { VulAffectImagesResponseInfo } from './model/VulAffectImagesResponseInfo';
import { VulBackupStatisticsRequestInfo } from './model/VulBackupStatisticsRequestInfo';
import { VulContainerInfo } from './model/VulContainerInfo';
import { VulCveInfo } from './model/VulCveInfo';
import { VulHostAppsResponseInfoDataList } from './model/VulHostAppsResponseInfoDataList';
import { VulHostAppsResponseInfoPaths } from './model/VulHostAppsResponseInfoPaths';
import { VulHostBackupsResponseInfoDataList } from './model/VulHostBackupsResponseInfoDataList';
import { VulHostInfo } from './model/VulHostInfo';
import { VulHostProcessResponseInfoDataList } from './model/VulHostProcessResponseInfoDataList';
import { VulInfo } from './model/VulInfo';
import { VulInfoCveList } from './model/VulInfoCveList';
import { VulOperateInfo } from './model/VulOperateInfo';
import { VulReportRequestBody } from './model/VulReportRequestBody';
import { VulScanTaskHostInfo } from './model/VulScanTaskHostInfo';
import { VulScanTaskHostInfoFailedReasons } from './model/VulScanTaskHostInfoFailedReasons';
import { VulScanTaskHostInfoScanVulList } from './model/VulScanTaskHostInfoScanVulList';
import { VulScanTaskHostInfoVulScanDetails } from './model/VulScanTaskHostInfoVulScanDetails';
import { VulScanTaskInfo } from './model/VulScanTaskInfo';
import { VulUrgentResponseInfoCveList } from './model/VulUrgentResponseInfoCveList';
import { VulUrgentResponseInfoDataList } from './model/VulUrgentResponseInfoDataList';
import { VulUrgentResponseInfoDisabledOperateTypes } from './model/VulUrgentResponseInfoDisabledOperateTypes';
import { VulhandleHistoryResponseInfoDataList } from './model/VulhandleHistoryResponseInfoDataList';
import { VulnerabilityHostNumberInfo } from './model/VulnerabilityHostNumberInfo';
import { WeakPwdAccountInfoResponseInfo } from './model/WeakPwdAccountInfoResponseInfo';
import { WeakPwdListInfoResponseInfo } from './model/WeakPwdListInfoResponseInfo';
import { WebAppAndServiceResponseInfo } from './model/WebAppAndServiceResponseInfo';
import { WebAppAndServiceStatisticResponseInfo } from './model/WebAppAndServiceStatisticResponseInfo';
import { WebFrameworkHostInfo } from './model/WebFrameworkHostInfo';
import { WebFrameworkInfo } from './model/WebFrameworkInfo';
import { WebFrameworkStatisticsResponseInfo } from './model/WebFrameworkStatisticsResponseInfo';
import { WebSiteHostInfo } from './model/WebSiteHostInfo';
import { WebSiteInfo } from './model/WebSiteInfo';
import { WebSiteStatisticsResponseInfo } from './model/WebSiteStatisticsResponseInfo';
import { WebTamperHostResponseInfo } from './model/WebTamperHostResponseInfo';
import { WebTamperPrivilegedProcessRequestInfo } from './model/WebTamperPrivilegedProcessRequestInfo';
import { WebTamperProtectDirRequestInfo } from './model/WebTamperProtectDirRequestInfo';
import { WebTamperProtectHostDirRequestInfo } from './model/WebTamperProtectHostDirRequestInfo';
import { WebTamperTimingOffConfigInfoRequestInfo } from './model/WebTamperTimingOffConfigInfoRequestInfo';
import { WhetherPaidTask } from './model/WhetherPaidTask';
import { WhetherUsingQuota } from './model/WhetherUsingQuota';
import { WhiteImageInfo } from './model/WhiteImageInfo';
import { Workload } from './model/Workload';
import { WtpBackupHostResponseInfo } from './model/WtpBackupHostResponseInfo';
import { WtpProtectDirResponseInfo } from './model/WtpProtectDirResponseInfo';
import { WtpProtectHostDirResponseInfo } from './model/WtpProtectHostDirResponseInfo';
import { WtpProtectHostResponseInfo } from './model/WtpProtectHostResponseInfo';
import { WtpRemoteBackupResponseInfo } from './model/WtpRemoteBackupResponseInfo';
import { WtpStatus } from './model/WtpStatus';

export class HssClient {
    public static newBuilder(): ClientBuilder<HssClient> {
            let client = new ClientBuilder<HssClient>(newClient);
            return client;
    }

    private hcClient: HcClient;
    public constructor(client: HcClient) {
        this.hcClient = client;
    }

    public getPath() {
        return __dirname;
    }


    /**
     * 新增基线白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新增基线白名单
     * @param {AddBaselineWhiteListRequestBody} addBaselineWhiteListRequestBody 新增基线白名单请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addBaselineWhiteList(addBaselineWhiteListRequest?: AddBaselineWhiteListRequest): Promise<AddBaselineWhiteListResponse> {
        const options = ParamCreater().addBaselineWhiteList(addBaselineWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 新建cce集成防护配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新建cce集成防护配置
     * @param {CceIntegrationProtectionRequestBody} addCceIntegrationProtectionRequestBody 新建cce集成防护配置
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addCceIntegrationProtection(addCceIntegrationProtectionRequest?: AddCceIntegrationProtectionRequest): Promise<AddCceIntegrationProtectionResponse> {
        const options = ParamCreater().addCceIntegrationProtection(addCceIntegrationProtectionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建服务器组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建服务器组
     * @param {AddHostsGroupRequestInfo} addHostsGroupRequestBody 创建服务器组的请求体
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addHostsGroup(addHostsGroupRequest?: AddHostsGroupRequest): Promise<AddHostsGroupResponse> {
        const options = ParamCreater().addHostsGroup(addHostsGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 添加登录白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加登录白名单
     * @param {AddLoginWhiteListRequestInfo} addLoginWhiteListRequestBody 登录白名单
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addLoginWhiteList(addLoginWhiteListRequest?: AddLoginWhiteListRequest): Promise<AddLoginWhiteListResponse> {
        const options = ParamCreater().addLoginWhiteList(addLoginWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 添加防护策略：创建防护策略，包含策略名称、相关规则开启状态、防护动作以及检测规则配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加防护策略
     * @param {string} policyName 策略名称
     * @param {AddPolicyRequestInfo} addPolicyRequestBody 添加防护策略Body体
     * @param {string} [enterpriseProjectId] 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {string} [osType] 操作系统类型，包含如下2种。 - Linux - Windows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addPolicy(addPolicyRequest?: AddPolicyRequest): Promise<AddPolicyResponse> {
        const options = ParamCreater().addPolicy(addPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 添加防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加防护策略
     * @param {AddProtectionPolicyInfoRequestInfo} addProtectionPolicyRequestBody 需要添加的防护策略的请求体
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addProtectionPolicy(addProtectionPolicyRequest?: AddProtectionPolicyRequest): Promise<AddProtectionPolicyResponse> {
        const options = ParamCreater().addProtectionPolicy(addProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 添加系统用户白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加系统用户白名单
     * @param {AddSystemUserWhiteListRequestInfo} addSystemUserWhiteListRequestBody 系统用户白名单
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addSystemUserWhiteList(addSystemUserWhiteListRequest?: AddSystemUserWhiteListRequest): Promise<AddSystemUserWhiteListResponse> {
        const options = ParamCreater().addSystemUserWhiteList(addSystemUserWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量添加账号
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量添加账号
     * @param {BatchAddAccountsRequestInfo} batchAddAccountsRequestBody Batch add Accounts
     * @param {string} [xSecurityToken] 如果正在使用临时安全凭据，则此header是必需的，该值是临时安全凭据的安全令牌（会话令牌）。
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchAddAccounts(batchAddAccountsRequest?: BatchAddAccountsRequest): Promise<BatchAddAccountsResponse> {
        const options = ParamCreater().batchAddAccounts(batchAddAccountsRequest);

         // @ts-ignore
        options['responseHeaders'] = ['X-request-id'];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量创建标签
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量创建标签
     * @param {string} resourceType 由标签管理服务定义的资源类别，企业主机安全服务调用此接口时资源类别为hss
     * @param {string} resourceId 由标签管理服务定义的资源id，企业主机安全服务调用此接口时资源id为配额ID
     * @param {BatchCreateTagsRequestInfo} batchCreateTagsRequestBody 批量创建标签的请求体
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchCreateTags(batchCreateTagsRequest?: BatchCreateTagsRequest): Promise<BatchCreateTagsResponse> {
        const options = ParamCreater().batchCreateTags(batchCreateTagsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 镜像仓库镜像批量扫描
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 镜像仓库镜像批量扫描
     * @param {BatchScanPrivateImageRequestInfo} batchScanSwrImageRequestBody request
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchScanSwrImage(batchScanSwrImageRequest?: BatchScanSwrImageRequest): Promise<BatchScanSwrImageResponse> {
        const options = ParamCreater().batchScanSwrImage(batchScanSwrImageRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量开启勒索病毒防护，若开启备份防护，请保证该region有cbr云备份服务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量开启勒索病毒防护2.0
     * @param {BatchStartProtectionRequestInfo} batchStartProtectionRequestBody 开启勒索病毒防护请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchStartProtection(batchStartProtectionRequest?: BatchStartProtectionRequest): Promise<BatchStartProtectionResponse> {
        const options = ParamCreater().batchStartProtection(batchStartProtectionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启或关闭“Agent自动升级”配置开关
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启或关闭“Agent自动升级”配置开关
     * @param {ChangeAgentAutoUpgradeStatusRequestInfo} changeAgentAutoUpgradeStatusRequestBody **参数解释**： 开启或关闭“Agent自动升级”配置开关 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAgentAutoUpgradeStatus(changeAgentAutoUpgradeStatusRequest?: ChangeAgentAutoUpgradeStatusRequest): Promise<ChangeAgentAutoUpgradeStatusResponse> {
        const options = ParamCreater().changeAgentAutoUpgradeStatus(changeAgentAutoUpgradeStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启或关闭“自动绑定配额”配置开关
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启或关闭“自动绑定配额”配置开关
     * @param {ChangeAutoOpenQuotaStatusRequestInfo} changeAutoOpenQuotaStatusRequestBody **参数解释**： 开启或关闭“自动绑定配额”配置开关 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAutoOpenQuotaStatus(changeAutoOpenQuotaStatusRequest?: ChangeAutoOpenQuotaStatusRequest): Promise<ChangeAutoOpenQuotaStatusResponse> {
        const options = ParamCreater().changeAutoOpenQuotaStatus(changeAutoOpenQuotaStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改基线白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改基线白名单
     * @param {ChangeBaselineWhiteListRequestBody} changeBaselineWhiteListRequestBody 修改基线白名单请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeBaselineWhiteList(changeBaselineWhiteListRequest?: ChangeBaselineWhiteListRequest): Promise<ChangeBaselineWhiteListResponse> {
        const options = ParamCreater().changeBaselineWhiteList(changeBaselineWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 解除已拦截IP
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 解除已拦截IP
     * @param {ChangeBlockedIpRequestInfo} changeBlockedIpRequestBody 解除拦截IP列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeBlockedIp(changeBlockedIpRequest?: ChangeBlockedIpRequest): Promise<ChangeBlockedIpResponse> {
        const options = ParamCreater().changeBlockedIp(changeBlockedIpRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 对未通过的配置检查项进行忽略/取消忽略/修复/验证操作
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 对未通过的配置检查项进行忽略/取消忽略/修复/验证操作
     * @param {string} action 动作 - \&quot;ignore\&quot; - \&quot;unignore\&quot; - \&quot;fix\&quot; - \&quot;verify\&quot;
     * @param {CheckRuleIdListRequestInfo} changeCheckRuleActionRequestBody 要执行操作的检查项ID列表
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostId] 主机ID，不赋值时，查租户所有主机
     * @param {boolean} [checkCce] 是否校验cce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeCheckRuleAction(changeCheckRuleActionRequest?: ChangeCheckRuleActionRequest): Promise<ChangeCheckRuleActionResponse> {
        const options = ParamCreater().changeCheckRuleAction(changeCheckRuleActionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改告警状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改告警状态
     * @param {ModClusterProtectionEventRequest} changeClusterEventsRequestBody 修改告警事件
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeClusterEvents(changeClusterEventsRequest?: ChangeClusterEventsRequest): Promise<ChangeClusterEventsResponse> {
        const options = ParamCreater().changeClusterEvents(changeClusterEventsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改集群防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改集群防护策略
     * @param {ModPolicyRequestInfo} changeClusterProtectionPolicyRequestBody 策略信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeClusterProtectionPolicy(changeClusterProtectionPolicyRequest?: ChangeClusterProtectionPolicyRequest): Promise<ChangeClusterProtectionPolicyResponse> {
        const options = ParamCreater().changeClusterProtectionPolicy(changeClusterProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 处理告警事件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 处理告警事件
     * @param {ChangeEventRequestInfo} changeEventRequestBody 处理告警事件列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [containerName] 容器实例名称
     * @param {string} [containerId] 容器Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeEvent(changeEventRequest?: ChangeEventRequest): Promise<ChangeEventResponse> {
        const options = ParamCreater().changeEvent(changeEventRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 编辑服务器组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 编辑服务器组
     * @param {ChangeHostsGroupRequestInfo} changeHostsGroupRequestBody request
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeHostsGroup(changeHostsGroupRequest?: ChangeHostsGroupRequest): Promise<ChangeHostsGroupResponse> {
        const options = ParamCreater().changeHostsGroup(changeHostsGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 恢复已隔离文件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 恢复已隔离文件
     * @param {ChangeIsolatedFileRequestInfo} changeIsolatedFileRequestBody 恢复已隔离文件列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeIsolatedFile(changeIsolatedFileRequest?: ChangeIsolatedFileRequest): Promise<ChangeIsolatedFileResponse> {
        const options = ParamCreater().changeIsolatedFile(changeIsolatedFileRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启或关闭恶意软件云查样本收集配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启或关闭恶意软件云查样本收集配置
     * @param {ChangeMalwareCollectStatusRequestInfo} changeMalwareCollectStatusRequestBody 开启或关闭恶意软件云查样本收集配置
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeMalwareCollectStatus(changeMalwareCollectStatusRequest?: ChangeMalwareCollectStatusRequest): Promise<ChangeMalwareCollectStatusResponse> {
        const options = ParamCreater().changeMalwareCollectStatus(changeMalwareCollectStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 对口令复杂度检测未通过的主机进行忽略/取消忽略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 对口令复杂度检测未通过的主机进行忽略/取消忽略
     * @param {string} action 动作类型   - ignore ：对口令复杂度检测未通过的主机执行忽略动作    - unignore ：对已忽略的口令复杂度检测未通过的主机执行取消忽略动作
     * @param {ChangePasswordComplexityStatusRequestBody} changePasswordComplexityStatusRequestBody 口令复杂度检测未通过主机忽略/取消忽略操作请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changePasswordComplexityStatus(changePasswordComplexityStatusRequest?: ChangePasswordComplexityStatusRequest): Promise<ChangePasswordComplexityStatusResponse> {
        const options = ParamCreater().changePasswordComplexityStatus(changePasswordComplexityStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改指定策略的总开关，将该策略的所有主机都打开或者关闭此策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改指定策略的总开关，将该策略的所有主机都打开或者关闭此策略
     * @param {string} enterpriseProjectId **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {PolicySwitchRequestInfo} changePolicySwitchStatusRequestBody 策略开关状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changePolicySwitchStatus(changePolicySwitchStatusRequest?: ChangePolicySwitchStatusRequest): Promise<ChangePolicySwitchStatusResponse> {
        const options = ParamCreater().changePolicySwitchStatus(changePolicySwitchStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改漏洞的状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改漏洞的状态
     * @param {ChangeVulStatusRequestInfo} changeVulStatusRequestBody vul_operate请求体
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeVulStatus(changeVulStatusRequest?: ChangeVulStatusRequest): Promise<ChangeVulStatusResponse> {
        const options = ParamCreater().changeVulStatus(changeVulStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 新建集群防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新建集群防护策略
     * @param {ModPolicyRequestInfo} createClusterProtectionPolicyRequestBody 策略信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createClusterProtectionPolicy(createClusterProtectionPolicyRequest?: CreateClusterProtectionPolicyRequest): Promise<CreateClusterProtectionPolicyResponse> {
        const options = ParamCreater().createClusterProtectionPolicy(createClusterProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步集群信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步集群信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createClustersInfo(createClustersInfoRequest?: CreateClustersInfoRequest): Promise<CreateClustersInfoResponse> {
        const options = ParamCreater().createClustersInfo(createClustersInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 容器集群网络添加配置策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 容器集群网络添加配置策略
     * @param {string} clusterId 集群ID
     * @param {CreateNetworkPolicyRequestInfo} createContainerNetworkPolicyRequestBody 策略详细信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createContainerNetworkPolicy(createContainerNetworkPolicyRequest?: CreateContainerNetworkPolicyRequest): Promise<CreateContainerNetworkPolicyResponse> {
        const options = ParamCreater().createContainerNetworkPolicy(createContainerNetworkPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 新增动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新增动态端口蜜罐策略
     * @param {HoneypotPortPolicyContent} createDecoyPortPolicyRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createDecoyPortPolicy(createDecoyPortPolicyRequest?: CreateDecoyPortPolicyRequest): Promise<CreateDecoyPortPolicyResponse> {
        const options = ParamCreater().createDecoyPortPolicy(createDecoyPortPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建全局资产扫描任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建全局资产扫描任务
     * @param {string} category **参数解释**: 事件类别 **约束限制**: 不涉及 **取值范围**: - host：主机安全事件 - container：容器安全事件  **默认取值**: 不涉及 
     * @param {CreateGlobalAssetScanTaskRequestInfo} createGlobalAssetScanTaskRequestBody 请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createGlobalAssetScanTask(createGlobalAssetScanTaskRequest?: CreateGlobalAssetScanTaskRequest): Promise<CreateGlobalAssetScanTaskResponse> {
        const options = ParamCreater().createGlobalAssetScanTask(createGlobalAssetScanTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * HSS服务创建订单订购配额，只支持包周期计费模式
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary HSS服务创建订单订购配额
     * @param {CreateQuotasOrderRequestInfo} createQuotasOrderRequestBody 创建订单订购配额请求体对象
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createQuotasOrder(createQuotasOrderRequest?: CreateQuotasOrderRequest): Promise<CreateQuotasOrderResponse> {
        const options = ParamCreater().createQuotasOrder(createQuotasOrderRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建安全组策略(云原生网络模型)
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建安全组策略
     * @param {string} clusterId 集群id
     * @param {string} namespace 命名空间
     * @param {CreateSecurityGroupPolicyRequestBody} createSecurityGroupPolicyRequestBody 策略内容
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createSecurityGroupPolicy(createSecurityGroupPolicyRequest?: CreateSecurityGroupPolicyRequest): Promise<CreateSecurityGroupPolicyResponse> {
        const options = ParamCreater().createSecurityGroupPolicy(createSecurityGroupPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除账号
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除账号
     * @param {DeleteAccountRequestInfo} deleteAccountRequestBody Delete Account
     * @param {string} [xSecurityToken] 如果正在使用临时安全凭据，则此header是必需的，该值是临时安全凭据的安全令牌（会话令牌）。
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteAccount(deleteAccountRequest?: DeleteAccountRequest): Promise<DeleteAccountResponse> {
        const options = ParamCreater().deleteAccount(deleteAccountRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除基线白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除基线白名单
     * @param {DeleteBaselineWhiteListRequestBody} deleteBaselineWhiteListRequestBody 删除基线白名单请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteBaselineWhiteList(deleteBaselineWhiteListRequest?: DeleteBaselineWhiteListRequest): Promise<DeleteBaselineWhiteListResponse> {
        const options = ParamCreater().deleteBaselineWhiteList(deleteBaselineWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除集群防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除集群防护策略
     * @param {DeletePolicyRequestInfo} deleteClusterProtectionPolicyRequestBody 策略信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteClusterProtectionPolicy(deleteClusterProtectionPolicyRequest?: DeleteClusterProtectionPolicyRequest): Promise<DeleteClusterProtectionPolicyResponse> {
        const options = ParamCreater().deleteClusterProtectionPolicy(deleteClusterProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 容器集群网络删除配置策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 容器集群网络删除配置策略
     * @param {string} clusterId 集群ID
     * @param {IdArray} deleteContainerNetworkPolicyRequestBody 删除策略信息列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteContainerNetworkPolicy(deleteContainerNetworkPolicyRequest?: DeleteContainerNetworkPolicyRequest): Promise<DeleteContainerNetworkPolicyResponse> {
        const options = ParamCreater().deleteContainerNetworkPolicy(deleteContainerNetworkPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 关闭主机动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 关闭主机动态端口蜜罐策略
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} hostId 服务器ID,可填多个，通过,分隔
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteDecoyPortHostPolicy(deleteDecoyPortHostPolicyRequest?: DeleteDecoyPortHostPolicyRequest): Promise<DeleteDecoyPortHostPolicyResponse> {
        const options = ParamCreater().deleteDecoyPortHostPolicy(deleteDecoyPortHostPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除动态端口蜜罐策略
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteDecoyPortPolicy(deleteDecoyPortPolicyRequest?: DeleteDecoyPortPolicyRequest): Promise<DeleteDecoyPortPolicyResponse> {
        const options = ParamCreater().deleteDecoyPortPolicy(deleteDecoyPortPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除服务器组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除服务器组
     * @param {string} groupId 服务器组ID
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteHostsGroup(deleteHostsGroupRequest?: DeleteHostsGroupRequest): Promise<DeleteHostsGroupResponse> {
        const options = ParamCreater().deleteHostsGroup(deleteHostsGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除已隔离文件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除已隔离文件
     * @param {DeleteIsolatedFileRequestInfo} deleteIsolatedFileRequestBody 删除已隔离文件列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteIsolatedFile(deleteIsolatedFileRequest?: DeleteIsolatedFileRequest): Promise<DeleteIsolatedFileResponse> {
        const options = ParamCreater().deleteIsolatedFile(deleteIsolatedFileRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除防护策略：删除策略，已经在使用的防护策略不能删除
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除防护策略
     * @param {string} policyId 策略ID
     * @param {string} [enterpriseProjectId] 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deletePolicy(deletePolicyRequest?: DeletePolicyRequest): Promise<DeletePolicyResponse> {
        const options = ParamCreater().deletePolicy(deletePolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除防护策略
     * @param {string} enterpriseProjectId 租户企业项目ID
     * @param {string} policyId 防护策略id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteProtectionPolicy(deleteProtectionPolicyRequest?: DeleteProtectionPolicyRequest): Promise<DeleteProtectionPolicyResponse> {
        const options = ParamCreater().deleteProtectionPolicy(deleteProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除单个资源下的标签
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除资源标签
     * @param {string} resourceType 由标签管理服务定义的资源类别，企业主机安全服务调用此接口时资源类别为hss
     * @param {string} resourceId 由标签管理服务定义的资源id，企业主机安全服务调用此接口时资源id为配额ID
     * @param {string} key 待删除的key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteResourceInstanceTag(deleteResourceInstanceTagRequest?: DeleteResourceInstanceTagRequest): Promise<DeleteResourceInstanceTagResponse> {
        const options = ParamCreater().deleteResourceInstanceTag(deleteResourceInstanceTagRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除安全组策略(云原生网络模型)
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除安全组策略
     * @param {string} clusterId 集群id
     * @param {DeleteSecurityGroupPolicyRequestBody} deleteSecurityGroupPolicyRequestBody 待删除的安全组策略列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteSecurityGroupPolicy(deleteSecurityGroupPolicyRequest?: DeleteSecurityGroupPolicyRequest): Promise<DeleteSecurityGroupPolicyResponse> {
        const options = ParamCreater().deleteSecurityGroupPolicy(deleteSecurityGroupPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 导出资产指纹请求
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 导出资产指纹请求
     * @param {string} assetType **参数解释**: 资产指纹类型 **约束限制**: 不涉及 **取值范围**: - users         ：账号 - auto_launch   ：自启动项 - database      ：数据库 - jar_package   ：中间件 - port          ：开放端口 - process       ：进程 - web_cms       ：web应用 - web_framework ：web框架 - web_service   ：web服务 - web_site      ：web站点 - app           ：软件 - kernel_module ：内核模块  **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host     ：主机 - container：容器  **默认取值**: host 
     * @param {DownloadAssetFileRequestBody} downloadAssetFileRequestBody **参数解释**: \&quot;导出数据的表头字段列表\&quot; **约束限制**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public downloadAssetFile(downloadAssetFileRequest?: DownloadAssetFileRequest): Promise<DownloadAssetFileResponse> {
        const options = ParamCreater().downloadAssetFile(downloadAssetFileRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建容器导出任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建容器导出任务
     * @param {ExportContainerListRequestBody} exportContainerListRequestBody 创建容器导出任务请求信息，可通过以下参数对导出内容进行筛选
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [exportSize] **参数解释**: 导出条数 **约束限制**: 不涉及 **取值范围**: 取值1-100000 **默认取值**: 100000 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportContainerList(exportContainerListRequest?: ExportContainerListRequest): Promise<ExportContainerListResponse> {
        const options = ParamCreater().exportContainerList(exportContainerListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询多账号列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询多账号列表
     * @param {string} [xSecurityToken] 如果正在使用临时安全凭据，则此header是必需的，该值是临时安全凭据的安全令牌（会话令牌）。
     * @param {string} [region] Region ID
     * @param {number} [limit] 每页显示数量
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccounts(listAccountsRequest?: ListAccountsRequest): Promise<ListAccountsResponse> {
        const options = ParamCreater().listAccounts(listAccountsRequest);

         // @ts-ignore
        options['responseHeaders'] = ['X-request-id'];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询“Agent自动升级”配置开关状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询“Agent自动升级”配置开关状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAgentAutoUpgradeStatus(listAgentAutoUpgradeStatusRequest?: ListAgentAutoUpgradeStatusRequest): Promise<ListAgentAutoUpgradeStatusResponse> {
        const options = ParamCreater().listAgentAutoUpgradeStatus(listAgentAutoUpgradeStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询agent安装脚本
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询agent安装脚本
     * @param {'x86_64' | 'aarch64'} osArch 系统架构：x86_64和aarch64；当os_type为Windows时，只能选择x86_64
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {'Windows' | 'Linux'} [osType] os类型：Windows和Linux
     * @param {boolean} [outsideHost] 是否非华为云
     * @param {string} [outsideGroupId] 服务器组ID，此参数已废弃
     * @param {boolean} [batchInstall] 是否批量安装
     * @param {'password' | 'ssh_key'} [type] 类型：password和ssh_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAgentInstallScript(listAgentInstallScriptRequest?: ListAgentInstallScriptRequest): Promise<ListAgentInstallScriptResponse> {
        const options = ParamCreater().listAgentInstallScript(listAgentInstallScriptRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询告警白名单列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询告警白名单列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hash] 事件白名单SHA256
     * @param {number} [eventType] 事件类型，包含如下:   - 1001：通用恶意软件   - 1002：病毒   - 1003：蠕虫   - 1004：木马   - 1005：僵尸网络   - 1006：后门   - 1010：Rootkit   - 1011：勒索软件   - 1012：黑客工具   - 1015：Webshell   - 1016：挖矿   - 1017：反弹Shell   - 2001：一般漏洞利用   - 2012：远程代码执行   - 2047：Redis漏洞利用   - 2048：Hadoop漏洞利用   - 2049：MySQL漏洞利用   - 3002：文件提权   - 3003：进程提权   - 3004：关键文件变更   - 3005：文件/目录变更   - 3007：进程异常行为   - 3015：高危命令执行   - 3018：异常Shell   - 3027：Crontab可疑任务   - 3029：系统安全防护被禁用   - 3030：备份删除   - 3031：异常注册表操作   - 3036：容器镜像阻断   - 4002：暴力破解   - 4004：异常登录   - 4006：非法系统账号   - 4014：用户账号添加   - 4020：用户密码窃取   - 6002：端口扫描   - 6003：主机扫描   - 13001：Kubernetes事件删除   - 13002：Pod异常行为   - 13003：枚举用户信息   - 13004：绑定集群用户角色
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示个数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAlarmWhiteList(listAlarmWhiteListRequest?: ListAlarmWhiteListRequest): Promise<ListAlarmWhiteListResponse> {
        const options = ParamCreater().listAlarmWhiteList(listAlarmWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询病毒扫描历史处置记录列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询病毒扫描历史处置记录列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [malwareName] 病毒名称
     * @param {string} [filePath] 文件路径
     * @param {Array<string>} [severityList] 威胁等级，包含如下:   - Low：低危   - Medium：中危   - High：高危   - Critical：致命
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {string} [handleMethod] 处理方式，包含如下:   - mark_as_handled：手动处理   - ignore：忽略   - add_to_alarm_whitelist：加入告警白名单   - isolate_and_kill：隔离文件   - unhandle：取消手动处理   - do_not_ignore：取消忽略   - remove_from_alarm_whitelist：删除告警白名单   - do_not_isolate_or_kill：取消隔离文件
     * @param {string} [userName] 用户名
     * @param {number} [eventType] 事件类型
     * @param {string} [sortDir] 排序顺序，若sort_key不为空,设置返回结果按照sort_key升序或降序排序,默认降序排序，包含如下:   - asc : 升序   - desc : 降序
     * @param {string} [sortKey] 排序字段，包含如下:   - handle_time : 处置时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntivirusHandleHistory(listAntivirusHandleHistoryRequest?: ListAntivirusHandleHistoryRequest): Promise<ListAntivirusHandleHistoryResponse> {
        const options = ParamCreater().listAntivirusHandleHistory(listAntivirusHandleHistoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取软件信息的历史变动记录
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取软件信息的历史变动记录
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 主机id **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机ip **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 主机名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [appName] **参数解释**: 软件名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [variationType] **参数解释**: 变更类型 **约束限制**: 不涉及 **取值范围**: - add：新建 - delete：删除 - modify：修改  **默认取值**: 不涉及 
     * @param {string} [sortKey] **参数解释**: 排序的key值，目前只支持按照recent_scan_time排序，按照recent_scan_time排序时，根据sort_dir的值决定升序还是降序 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [sortDir] **参数解释**: 排序方式，默认为降序，当sort_key为按照recent_scan_time排序时，根据当前值决定升序还是降序，当sort_key为其他值时均为降序 **约束限制**: 不涉及 **取值范围**: - asc：升序 - desc：降序  **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [startTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppChangeHistories(listAppChangeHistoriesRequest?: ListAppChangeHistoriesRequest): Promise<ListAppChangeHistoriesResponse> {
        const options = ParamCreater().listAppChangeHistories(listAppChangeHistoriesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询软件列表，支持通过软件名称查询对应的服务器数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询软件列表
     * @param {string} [appName] **参数解释**: 软件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppStatistics(listAppStatisticsRequest?: ListAppStatisticsRequest): Promise<ListAppStatisticsResponse> {
        const options = ParamCreater().listAppStatistics(listAppStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询软件的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询软件的服务器列表
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [appName] **参数解释**: 软件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [version] **参数解释**: 软件版本号 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [installDir] **参数解释**: 安装目录 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {boolean} [partMatch] **参数解释**: 是否模糊匹配 **约束限制**: boolean类型 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listApps(listAppsRequest?: ListAppsRequest): Promise<ListAppsResponse> {
        const options = ParamCreater().listApps(listAppsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询程序自动隔离查杀状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询程序自动隔离查杀状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAutoKillVirusStatus(listAutoKillVirusStatusRequest?: ListAutoKillVirusStatusRequest): Promise<ListAutoKillVirusStatusResponse> {
        const options = ParamCreater().listAutoKillVirusStatus(listAutoKillVirusStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取自启动项的历史变动记录
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取自启动项的历史变动记录
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [autoLaunchName] **参数解释**: 自启动项名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {number} [type] **参数解释**: 自启动项类型 **约束限制**: 不涉及 **取值范围**: - 0：自启动服务 - 1：定时任务 - 2：预加载动态库 - 3：Run注册表键 - 4：开机启动文件夹  **默认取值**: 不涉及 
     * @param {string} [variationType] **参数解释**: 变更类型 **约束限制**: 不涉及 **取值范围**: - add：新建 - delete：删除 - modify：修改  **默认取值**: 不涉及 
     * @param {string} [sortKey] **参数解释**: 排序的key值，目前只支持按照recent_scan_time排序，按照recent_scan_time排序时，根据sort_dir的值决定升序还是降序 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [sortDir] **参数解释**: 排序方式，默认为降序，当sort_key为按照recent_scan_time排序时，根据当前值决定升序还是降序，当sort_key为其他值时均为降序 **约束限制**: 不涉及 **取值范围**: - asc：升序 - desc：降序  **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [startTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAutoLaunchChangeHistories(listAutoLaunchChangeHistoriesRequest?: ListAutoLaunchChangeHistoriesRequest): Promise<ListAutoLaunchChangeHistoriesResponse> {
        const options = ParamCreater().listAutoLaunchChangeHistories(listAutoLaunchChangeHistoriesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询自启动信息，支持通过传入自启动名称查询启动类型和服务器数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询自启动项信息
     * @param {string} [name] **参数解释**: 自启动项名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [type] **参数解释**: 自启动项类型 **约束限制**: 不涉及 **取值范围**: - 0：自启动服务 - 1：定时任务 - 2：预加载动态库 - 3：Run注册表键 - 4：开机启动文件夹  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAutoLaunchStatistics(listAutoLaunchStatisticsRequest?: ListAutoLaunchStatisticsRequest): Promise<ListAutoLaunchStatisticsResponse> {
        const options = ParamCreater().listAutoLaunchStatistics(listAutoLaunchStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询自启动项的服务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询自启动项的服务列表
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [name] **参数解释**: 自启动项名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [type] **参数解释**: 自启动项类型 **约束限制**: 不涉及 **取值范围**: - 0：自启动服务 - 1：定时任务 - 2：预加载动态库 - 3：Run注册表键 - 4：开机启动文件夹  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {boolean} [partMatch] **参数解释**: 是否模糊匹配 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAutoLaunchs(listAutoLaunchsRequest?: ListAutoLaunchsRequest): Promise<ListAutoLaunchsResponse> {
        const options = ParamCreater().listAutoLaunchs(listAutoLaunchsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询“自动绑定配额”配置开关状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询“自动绑定配额”配置开关状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAutoOpenQuotaStatus(listAutoOpenQuotaStatusRequest?: ListAutoOpenQuotaStatusRequest): Promise<ListAutoOpenQuotaStatusResponse> {
        const options = ParamCreater().listAutoOpenQuotaStatus(listAutoOpenQuotaStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询备份存储库列表，若进行绑定主机，则需要额外判断，同时满足以下条件：1、存储库状态为“可用”状态；2、备份策略状态为“已启用”；3、存储库有剩余可用备份容量；4、存储库绑定的服务器数量少于256。
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询备份存储库列表
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [vaultName] 备份存储库名称
     * @param {string} [vaultId] 备份存储库id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listBackupVaults(listBackupVaultsRequest?: ListBackupVaultsRequest): Promise<ListBackupVaultsResponse> {
        const options = ParamCreater().listBackupVaults(listBackupVaultsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询基线白名单列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询基线白名单列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [checkRuleName] 基线检查的检查项名称
     * @param {string} [osType] 基线检查的操作系统 - Linux - Windows
     * @param {string} [ruleType] 基线检查白名单的规则范围 - specific_host：部分主机 - all_host：全部主机
     * @param {string} [tag] 基线检查中检查项的检查类型 - 访问控制 - 服务配置
     * @param {string} [description] 基线检查白名单备注
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listBaselineWhiteLists(listBaselineWhiteListsRequest?: ListBaselineWhiteListsRequest): Promise<ListBaselineWhiteListsResponse> {
        const options = ParamCreater().listBaselineWhiteLists(listBaselineWhiteListsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询已拦截IP列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询已拦截IP列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [lastDays] 查询时间范围天数，与自定义查询时间begin_time，end_time互斥
     * @param {string} [hostName] 服务器名称
     * @param {string} [srcIp] 攻击源IP
     * @param {string} [interceptStatus] 拦截状态，包含如下:   - intercepted : 已拦截   - canceled : 已解除拦截   - cancelling : 待解除拦截
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示个数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listBlockedIp(listBlockedIpRequest?: ListBlockedIpRequest): Promise<ListBlockedIpResponse> {
        const options = ParamCreater().listBlockedIp(listBlockedIpRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群配置
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {CCEClusterInfoListRequestBody} [listCceClusterConfigRequestBody] 集群id列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCceClusterConfig(listCceClusterConfigRequest?: ListCceClusterConfigRequest): Promise<ListCceClusterConfigResponse> {
        const options = ParamCreater().listCceClusterConfig(listCceClusterConfigRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量获取容器集群风险信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量获取容器集群风险信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {CCEClusterIdListRequestBody} [listCceClusterDetectRiskRequestBody] 集群id列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCceClusterDetectRisk(listCceClusterDetectRiskRequest?: ListCceClusterDetectRiskRequest): Promise<ListCceClusterDetectRiskResponse> {
        const options = ParamCreater().listCceClusterDetectRisk(listCceClusterDetectRiskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询检测规则列表：查询默认检测规则信息，包含14种检测规则，默认都不开启
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询检测规则列表
     * @param {string} enterpriseProjectId 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {string} [osType] 操作系统类型，包含如下2种。 - Linux - Windows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCheckFeatureRule(listCheckFeatureRuleRequest?: ListCheckFeatureRuleRequest): Promise<ListCheckFeatureRuleResponse> {
        const options = ParamCreater().listCheckFeatureRule(listCheckFeatureRuleRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询k8s集群审计日志列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询k8s集群审计日志列表
     * @param {string} clusterId 集群id
     * @param {number} startTime 查询日志范围的最小时间
     * @param {number} endTime 查询日志范围的最大时间
     * @param {number} limit 每页显示个数，默认为10
     * @param {number} offset 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [clusterName] 集群名称
     * @param {string} [hostName] 主机名称
     * @param {string} [hostId] 主机id
     * @param {string} [hostIp] 主机ip
     * @param {string} [verb] 审计日志对应的动作，包含以下几种： - create：创建资源 - delete：删除资源 - deletecollection：批量删除资源集合 - patch：修改资源 - update：更新资源 - get：获取资源 - list：获取资源列表 - watch：监控资源
     * @param {string} [lineNum] 查询cce集群日志时需要传的分页行号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterAuditLogs(listClusterAuditLogsRequest?: ListClusterAuditLogsRequest): Promise<ListClusterAuditLogsResponse> {
        const options = ParamCreater().listClusterAuditLogs(listClusterAuditLogsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询k8s集群事件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询k8s集群事件列表
     * @param {string} clusterId 集群id
     * @param {number} startTime 查询日志范围的最小时间
     * @param {number} endTime 查询日志范围的最大时间
     * @param {number} limit 每页显示个数，默认为10
     * @param {number} offset 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [clusterName] 集群名称
     * @param {string} [namespace] 产生事件的命名空间
     * @param {string} [eventName] 事件名称
     * @param {string} [eventType] 事件类型，包含以下几种： - Warning：警告事件 - Normal：普通事件
     * @param {string} [resourceType] 产生事件的资源类型
     * @param {string} [resourceName] 产生事件的资源名称
     * @param {string} [reason] 事件的触发原因
     * @param {string} [lineNum] 查询cce集群事件时需要传的分页行号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterEventLogs(listClusterEventLogsRequest?: ListClusterEventLogsRequest): Promise<ListClusterEventLogsResponse> {
        const options = ParamCreater().listClusterEventLogs(listClusterEventLogsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取所有集群中告警事件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取所有集群中告警事件
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [clusterId] 集群ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterEvents(listClusterEventsRequest?: ListClusterEventsRequest): Promise<ListClusterEventsResponse> {
        const options = ParamCreater().listClusterEvents(listClusterEventsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 集群防护概览
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 集群防护概览
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectOverview(listClusterProtectOverviewRequest?: ListClusterProtectOverviewRequest): Promise<ListClusterProtectOverviewResponse> {
        const options = ParamCreater().listClusterProtectOverview(listClusterProtectOverviewRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群防护策略模板列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群组件防护策略模板列表
     * @param {number} limit 每页显示数量
     * @param {number} offset 偏移量：指定返回记录的开始位置
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [templateName] 模板名称
     * @param {string} [templateType] 模板类型
     * @param {string} [targetKind] 策略模板应用资源类型，多个资源类型通过分号分隔连接
     * @param {string} [tag] 标签
     * @param {string} [level] 推荐等级
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectPolicyTemplates(listClusterProtectPolicyTemplatesRequest?: ListClusterProtectPolicyTemplatesRequest): Promise<ListClusterProtectPolicyTemplatesResponse> {
        const options = ParamCreater().listClusterProtectPolicyTemplates(listClusterProtectPolicyTemplatesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群防护默认策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群防护默认策略列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectionDefaultPolicy(listClusterProtectionDefaultPolicyRequest?: ListClusterProtectionDefaultPolicyRequest): Promise<ListClusterProtectionDefaultPolicyResponse> {
        const options = ParamCreater().listClusterProtectionDefaultPolicy(listClusterProtectionDefaultPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群防护信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群防护信息
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectionInfo(listClusterProtectionInfoRequest?: ListClusterProtectionInfoRequest): Promise<ListClusterProtectionInfoResponse> {
        const options = ParamCreater().listClusterProtectionInfo(listClusterProtectionInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群所有防护项
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群所有防护项
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectionItem(listClusterProtectionItemRequest?: ListClusterProtectionItemRequest): Promise<ListClusterProtectionItemResponse> {
        const options = ParamCreater().listClusterProtectionItem(listClusterProtectionItemRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群防护策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群防护策略列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [clusterId] 集群ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectionPolicy(listClusterProtectionPolicyRequest?: ListClusterProtectionPolicyRequest): Promise<ListClusterProtectionPolicyResponse> {
        const options = ParamCreater().listClusterProtectionPolicy(listClusterProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看指定策略的详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看指定策略的详情
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterProtectionPolicyDetail(listClusterProtectionPolicyDetailRequest?: ListClusterProtectionPolicyDetailRequest): Promise<ListClusterProtectionPolicyDetailResponse> {
        const options = ParamCreater().listClusterProtectionPolicyDetail(listClusterProtectionPolicyDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取部分提示信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取部分提示信息
     * @param {number} limit 每页显示个数，默认200
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [type] 提示信息的类型，包含如下： - host_name：主机名称。 - host_id：主机id。 - public_ip：公网ip。 - private_ip：私网ip。 - vpc_id：vpc id。 - cluster_id：集群id。 - host_tags：主机标签。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCommonTips(listCommonTipsRequest?: ListCommonTipsRequest): Promise<ListCommonTipsResponse> {
        const options = ParamCreater().listCommonTips(listCommonTipsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器内运行的命令列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器内运行的命令列表
     * @param {number} limit 每页显示个数，默认为10
     * @param {number} offset 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [clusterId] 集群id
     * @param {string} [clusterName] 集群名称
     * @param {string} [hostName] 产生日志的容器所在主机的名称
     * @param {string} [hostId] 产生日志的容器所在主机的id
     * @param {string} [hostIp] 产生日志的容器所在主机的ip
     * @param {string} [containerId] 容器id
     * @param {string} [containerName] 产生日志的容器名称
     * @param {string} [cmd] 运行的命令行
     * @param {string} [path] 命令行对应的进程路径
     * @param {number} [startTime] 查询日志范围的最小时间
     * @param {number} [endTime] 查询日志范围的最大时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerCmdLogs(listContainerCmdLogsRequest?: ListContainerCmdLogsRequest): Promise<ListContainerCmdLogsResponse> {
        const options = ParamCreater().listContainerCmdLogs(listContainerCmdLogsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器镜像操作日志
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器镜像操作日志
     * @param {string} [resourceName] 资源名称
     * @param {string} [resourceType] 资源类型
     * @param {string} [eventType] 事件类型
     * @param {string} [eventName] 事件名称
     * @param {string} [sourceIp] 触发事件的源ip
     * @param {string} [userName] 操作用户
     * @param {number} [startTime] 查询日志范围的最小时间
     * @param {number} [endTime] 查询日志范围的最大时间
     * @param {number} [limit] 每页显示个数，默认为10
     * @param {number} [offset] 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerImageLogs(listContainerImageLogsRequest?: ListContainerImageLogsRequest): Promise<ListContainerImageLogsResponse> {
        const options = ParamCreater().listContainerImageLogs(listContainerImageLogsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器镜像列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器镜像列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [keyword] 搜索关键字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerImages(listContainerImagesRequest?: ListContainerImagesRequest): Promise<ListContainerImagesResponse> {
        const options = ParamCreater().listContainerImages(listContainerImagesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器日志列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器日志列表
     * @param {number} limit 每页显示个数，默认为10
     * @param {number} offset 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [clusterId] 集群id
     * @param {string} [clusterName] 集群名称
     * @param {string} [namespace] 产生日志的容器所属的命名空间
     * @param {string} [podName] 产生日志的容器所属pod的名称
     * @param {string} [podId] 产生日志的容器所属pod的id
     * @param {string} [podIp] 产生日志的容器所属pod的ip
     * @param {string} [hostIp] 产生日志的容器所在主机的ip
     * @param {string} [containerId] 容器id
     * @param {string} [containerName] 产生日志的容器名称
     * @param {string} [content] 日志内容
     * @param {number} [startTime] 查询日志范围的最小时间
     * @param {number} [endTime] 查询日志范围的最大时间
     * @param {string} [lineNum] 查询cce集群容器日志时需要传的分页行号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerLogs(listContainerLogsRequest?: ListContainerLogsRequest): Promise<ListContainerLogsResponse> {
        const options = ParamCreater().listContainerLogs(listContainerLogsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器防护的集群信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器防护的集群信息
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerNetworkClusters(listContainerNetworkClustersRequest?: ListContainerNetworkClustersRequest): Promise<ListContainerNetworkClustersResponse> {
        const options = ParamCreater().listContainerNetworkClusters(listContainerNetworkClustersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器集群网络的策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器集群VPC网络的节点列表
     * @param {string} clusterId 集群ID
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [queryField] 查询字段
     * @param {string} [queryValue] 查询字段值
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerNetworkNodeList(listContainerNetworkNodeListRequest?: ListContainerNetworkNodeListRequest): Promise<ListContainerNetworkNodeListResponse> {
        const options = ParamCreater().listContainerNetworkNodeList(listContainerNetworkNodeListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器集群网络的策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器集群网络的策略列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [namespace] 命名空间
     * @param {string} [keyword] 关键词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerNetworkPolicy(listContainerNetworkPolicyRequest?: ListContainerNetworkPolicyRequest): Promise<ListContainerNetworkPolicyResponse> {
        const options = ParamCreater().listContainerNetworkPolicy(listContainerNetworkPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器节点列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器节点列表
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位  **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 取值0-2000000  **默认取值**: 0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200  **默认取值**: 10 
     * @param {string} [hostName] **参数解释**: 节点名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位  **默认取值**: 不涉及 
     * @param {string} [agentStatus] **参数解释**: Agent状态 **约束限制**: 不涉及 **取值范围**: 包含如下3种。   - not_installed：未安装。   - online：在线。   - offline：离线。  **默认取值**: 不涉及 
     * @param {string} [protectStatus] **参数解释**: 防护状态 **约束限制**: 不涉及 **取值范围**: 包含如下2种。   - closed：关闭   - opened：开启  **默认取值**: 不涉及 
     * @param {string} [containerTags] **参数解释**: 用来识别cce节点或者自建节点的标签 **约束限制**: 不涉及 **取值范围**: 包含如下3种。   - cce：cce节点   - self：自建节点   - other：其他节点  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainerNodes(listContainerNodesRequest?: ListContainerNodesRequest): Promise<ListContainerNodesResponse> {
        const options = ParamCreater().listContainerNodes(listContainerNodesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器基本信息列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [containerName] **参数解释**: 容器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [podName] **参数解释**: 所属Pod名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [imageName] **参数解释**: 镜像名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {boolean} [clusterContainer] **参数解释**: 是否是集群纳管的容器 **约束限制**: 不涉及 **取值范围**:   - true：是集群纳管的容器。   - false：不是集群纳管的容器。 **默认取值**: false 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 取值0-2000000 **默认取值**: 0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listContainers(listContainersRequest?: ListContainersRequest): Promise<ListContainersResponse> {
        const options = ParamCreater().listContainers(listContainersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看动态端口蜜罐策略
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listDecoyPortPolicy(listDecoyPortPolicyRequest?: ListDecoyPortPolicyRequest): Promise<ListDecoyPortPolicyResponse> {
        const options = ParamCreater().listDecoyPortPolicy(listDecoyPortPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 下载导出文件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 下载导出文件
     * @param {string} fileId 文件id
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listDownloadExportedFile(listDownloadExportedFileRequest?: ListDownloadExportedFileRequest): Promise<ListDownloadExportedFileResponse> {
        const options = ParamCreater().listDownloadExportedFile(listDownloadExportedFileRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询ATT&amp;CK攻击阶段统计列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询ATT&CK攻击阶段统计列表
     * @param {string} region **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 事件类别 **约束限制**: 不涉及 **取值范围**: - host : 主机安全事件 - container : 容器安全事件 - serverless : serverless场景安全事件  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [lastDays] **参数解释**: 查询时间范围天数，与自定义查询时间begin_time，end_time互斥。 **约束限制**: 不涉及 **取值范围**: 最小值1，最大值30 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**： 服务器名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [hostId] **参数解释**： 服务器ID **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [privateIp] **参数解释**： 服务器私有IP **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [publicIp] **参数解释**： 服务器公网IP **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [containerName] **参数解释**： 容器实例名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-512位 **默认取值**： 不涉及 
     * @param {number} [eventType] **参数解释**: 事件类型 **约束限制**: 不涉及 **取值范围**: - 1001：通用恶意软件 - 1002：病毒 - 1003：蠕虫 - 1004：木马 - 1005：僵尸网络 - 1006：后门 - 1010：Rootkit - 1011：勒索软件 - 1012：黑客工具 - 1015：Webshell - 1016：挖矿 - 1017：反弹Shell - 2001：一般漏洞利用 - 2012：远程代码执行 - 2047：Redis漏洞利用 - 2048：Hadoop漏洞利用 - 2049：MySQL漏洞利用 - 3002：文件提权 - 3003：进程提权 - 3004：关键文件变更 - 3005：文件/目录变更 - 3007：进程异常行为 - 3015：高危命令执行 - 3018：异常Shell - 3026：crontab提权 - 3027：Crontab可疑任务 - 3029：系统安全防护被禁用 - 3030：备份删除 - 3031：异常注册表操作 - 3036：容器镜像阻断 - 4002：暴力破解 - 4004：异常登录 - 4006：非法系统账号 - 4014：用户账号添加 - 4020：用户密码窃取 - 6002：端口扫描 - 6003：主机扫描 - 13001：Kubernetes事件删除 - 13002：Pod异常行为 - 13003：枚举用户信息 - 13004：绑定集群用户角色  **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled：未处理 - handled：已处理  **默认取值**: 不涉及 
     * @param {string} [severity] **参数解释**: 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {Array<string>} [severityList] **参数解释**: 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {string} [attackTag] **参数解释**: 攻击标识 **约束限制**: 不涉及 **取值范围**: - attack_success：攻击成功 - attack_attempt：攻击尝试 - attack_blocked：攻击被阻断 - abnormal_behavior：异常行为 - collapsible_host：主机失陷 - system_vulnerability：系统脆弱性  **默认取值**: 不涉及 
     * @param {string} [assetValue] **参数解释**: 资产重要性 **约束限制**: 不涉及 **取值范围**: - important：重要资产 - common：般资产 - test：测试资产  **默认取值**: 不涉及 
     * @param {Array<string>} [tagList] 事件标签列表，例如:[\&quot;热点事件\&quot;]
     * @param {string} [eventName] **参数解释**： 告警名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listEventAttCk(listEventAttCkRequest?: ListEventAttCkRequest): Promise<ListEventAttCkResponse> {
        const options = ParamCreater().listEventAttCk(listEventAttCkRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询告警事件历史处置记录列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询告警事件历史处置记录列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [severity] 威胁等级，包含如下:   - Security：安全   - Low：低危   - Medium：中危   - High：高危   - Critical：危急
     * @param {string} [attackTag] 攻击标识，包含如下：   - attack_success : 攻击成功   - attack_attempt : 攻击尝试   - attack_blocked : 攻击被阻断   - abnormal_behavior : 异常行为   - collapsible_host : 主机失陷   - system_vulnerability : 系统脆弱性
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {Array<string>} [eventClassIds] 事件标识，包含如下: - container_1001：容器命名空间 - container_1002：容器开放端口 - container_1003：容器安全选项 - container_1004：容器挂载目录 - containerescape_0001：容器高危系统调用 - containerescape_0002：Shocker攻击 - containerescape_0003：DirtCow攻击 - containerescape_0004：容器文件逃逸攻击 - dockerfile_001：用户自定义容器保护文件被修改 - dockerfile_002：容器文件系统可执行文件被修改 - dockerproc_001：容器进程异常事件上报 - fileprotect_0001：文件提权 - fileprotect_0002：关键文件变更 - fileprotect_0003：关键文件路径变更 - fileprotect_0004：文件/目录变更 - av_1002：病毒 - av_1003：蠕虫 - av_1004：木马 - av_1005：僵尸网络 - av_1006：后门 - av_1007：间谍软件 - av_1008：恶意广告软件 - av_1009：钓鱼 - av_1010：Rootkit - av_1011：勒索软件 - av_1012：黑客工具 - av_1013：灰色软件 - av_1015：Webshell - av_1016：挖矿软件 - login_0001：尝试暴力破解 - login_0002：爆破成功 - login_1001：登录成功 - login_1002：异地登录 - login_1003：弱口令 - malware_0001：shell变更事件上报 - malware_0002：反弹shell事件上报 - malware_1001：恶意程序 - procdet_0001：进程异常行为检测 - procdet_0002：进程提权 - crontab_0001：crontab脚本提权 - crontab_0002：恶意路径提权 - procreport_0001：危险命令 - user_1001：账号变更 - user_1002：风险账号 - vmescape_0001：虚拟机敏感命令执行 - vmescape_0002：虚拟化进程访问敏感文件 - vmescape_0003：虚拟机异常端口访问 - webshell_0001：网站后门 - network_1001：恶意挖矿 - network_1002：对外DDoS攻击 - network_1003：恶意扫描 - network_1004：敏感区域攻击 - ransomware_0001：勒索攻击 - ransomware_0002：勒索攻击 - ransomware_0003：勒索攻击 - fileless_0001：进程注入 - fileless_0002：动态库注入进程 - fileless_0003：关键配置变更 - fileless_0004：环境变量变更 - fileless_0005：内存文件进程 - fileless_0006：vdso劫持 - crontab_1001：Crontab可疑任务 - vul_exploit_0001：Redis漏洞利用攻击 - vul_exploit_0002：Hadoop漏洞利用攻击 - vul_exploit_0003：MySQL漏洞利用攻击 - rootkit_0001：可疑rootkit文件 - rootkit_0002：可疑内核模块 - RASP_0004：上传Webshell - RASP_0018：无文件Webshell - blockexec_001：已知勒索攻击 - hips_0001：Windows Defender防护被禁用 - hips_0002：可疑的黑客工具 - hips_0003：可疑的勒索加密行为 - hips_0004：隐藏账号创建 - hips_0005：读取用户密码凭据 - hips_0006：可疑的SAM文件导出 - hips_0007：可疑shadow copy删除操作 - hips_0008：备份文件删除 - hips_0009：可疑勒索病毒操作注册表 - hips_0010：可疑的异常进程行为 - hips_0011：可疑的扫描探测 - hips_0012：可疑的勒索病毒脚本运行 - hips_0013：可疑的挖矿命令执行 - hips_0014：可疑的禁用windows安全中心 - hips_0015：可疑的停止防火墙服务行为 - hips_0016：可疑的系统自动恢复禁用 - hips_0017：Offies创建可执行文件 - hips_0018：带宏Offies文件异常创建 - hips_0019：可疑的注册表操作 - hips_0020：Confluence远程代码执行 - hips_0021：MSDT远程代码执行 - portscan_0001：通用端口扫描 - portscan_0002：秘密端口扫描 - k8s_1001：Kubernetes事件删除 - k8s_1002：创建特权Pod - k8s_1003：Pod中使用交互式shell - k8s_1004：创建敏感目录Pod - k8s_1005：创建主机网络的Pod - k8s_1006：创建主机Pid空间的Pod - k8s_1007：普通pod访问APIserver认证失败 - k8s_1008：普通Pod通过Curl访问APIServer - k8s_1009：系统管理空间执行exec - k8s_1010：系统管理空间创建Pod - k8s_1011：创建静态Pod - k8s_1012：创建DaemonSet - k8s_1013：创建集群计划任务 - k8s_1014：Secrets操作 - k8s_1015：枚举用户可执行的操作 - k8s_1016：高权限RoleBinding或ClusterRoleBinding - k8s_1017：ServiceAccount创建 - k8s_1018：创建Cronjob - k8s_1019：Pod中exec使用交互式shell - k8s_1020：无权限访问Apiserver - k8s_1021：使用curl访问APIServer - k8s_1022：Ingress漏洞 - k8s_1023：中间人攻击 - k8s_1024：蠕虫挖矿木马 - k8s_1025：K8s事件删除 - k8s_1026：SelfSubjectRulesReview场景 - imgblock_0001：镜像白名单阻断 - imgblock_0002：镜像黑名单阻断 - imgblock_0003：镜像标签白名单阻断 - imgblock_0004：镜像标签黑名单阻断 - imgblock_0005：创建容器白名单阻断 - imgblock_0006：创建容器黑名单阻断 - imgblock_0007：容器mount proc阻断 - imgblock_0008：容器seccomp unconfined阻断 - imgblock_0009：容器特权阻断 - imgblock_0010：容器capabilities阻断
     * @param {string} [eventName] 告警名称
     * @param {number} [eventType] **参数解释**： 事件类型 **取值范围**：   - 1001：通用恶意软件   - 1002：病毒   - 1003：蠕虫   - 1004：木马   - 1005：僵尸网络   - 1006：后门   - 1010：Rootkit   - 1011：勒索软件   - 1012 ：黑客工具   - 1015：Webshell   - 1016：挖矿   - 1017：反弹Shell   - 2001：一般漏洞利用   - 2012：远程代码执行   - 2047：Redis漏洞利用   - 2048：Hadoop漏洞利用   - 2049：MySQL漏洞利用   - 3002：文件提权   - 3003：进程提权   - 3004：关键文件变更   - 3005：文件/目录变更   - 3007：进程异常行为   - 3015：高危命令执行   - 3018：异常Shell   - 3027：Crontab可疑任务   - 3029：系统安全防护被禁用   - 3030：备份删除   - 3031：异常注册表操作   - 3036：容器镜像阻断   - 4002：暴力破解   - 4004：异常登录   - 4006：非法系统账号   - 4014：用户账号添加   - 4020：用户密码窃取   - 6002：端口扫描   - 6003：主机扫描   - 13001：Kubernetes事件删除   - 13002：Pod异常行为   - 13003：枚举用户信息   - 13004：绑定集群用户角色 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [handleStatus] 处置状态，包含如下:   - unhandled：未处理   - handled：已处理
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [sortDir] 排序顺序，若sort_key不为空，设置返回结果按照sort_key升序或降序排序，默认降序排序，包含如下：   - asc：升序   - desc：降序
     * @param {string} [sortKey] 排序字段，包含如下：   - handle_time：处置时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listEventHandleHistory(listEventHandleHistoryRequest?: ListEventHandleHistoryRequest): Promise<ListEventHandleHistoryResponse> {
        const options = ParamCreater().listEventHandleHistory(listEventHandleHistoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询资产全局扫描任务状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询资产全局扫描任务状态
     * @param {string} category **参数解释**: 事件类别 **约束限制**: 不涉及 **取值范围**: - host：主机安全事件 - container：容器安全事件  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listGlobalAssetScanTask(listGlobalAssetScanTaskRequest?: ListGlobalAssetScanTaskRequest): Promise<ListGlobalAssetScanTaskResponse> {
        const options = ParamCreater().listGlobalAssetScanTask(listGlobalAssetScanTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询今日处理漏洞/累计处理漏洞
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 处理的漏洞
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [vulName] **参数解释**: 漏洞名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [cveId] **参数解释**: 漏洞cve编号 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [labelList] **参数解释**: 漏洞标签 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**： 漏洞状态 **约束限制**： 不涉及 **取值范围**： - vul_status_ignored: 已忽略。 - vul_status_fixed: 修复成功。  **默认取值**： 不涉及 
     * @param {string} [assetValue] **参数解释**： 资产重要性 **约束限制**: 不涉及 **取值范围**: - important：重要资产。 - common：一般资产。 - test：测试资产。  **默认取值**: 不涉及 
     * @param {string} [groupName] **参数解释**: 服务器组名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 主机名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机ip **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [type] **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [handleCircle] **参数解释**： 处理周期 **约束限制**: 不涉及 **取值范围**: - today：今日处理。 - all：累计处理。  **默认取值**: 不涉及 
     * @param {string} [repairPriority] **参数解释**： 修复优先级 **约束限制**: 不涉及 **取值范围**: - Critical：紧急。 - High：高。 - Medium：中。 - Low：低。  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHandleVuls(listHandleVulsRequest?: ListHandleVulsRequest): Promise<ListHandleVulsResponse> {
        const options = ParamCreater().listHandleVuls(listHandleVulsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询服务器组列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询服务器组列表
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [groupName] **参数解释**: 服务器组名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHostGroups(listHostGroupsRequest?: ListHostGroupsRequest): Promise<ListHostGroupsResponse> {
        const options = ParamCreater().listHostGroups(listHostGroupsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询云服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询云服务器列表
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [version] **参数解释**： 主机开通的版本 **约束限制**: 不涉及 **取值范围**： 包含如下7种输入。 - hss.version.null ：无。 - hss.version.basic ：基础版。 - hss.version.advanced ：专业版。 - hss.version.enterprise ：企业版。 - hss.version.premium ：旗舰版。 - hss.version.wtp ：网页防篡改版。 - hss.version.container.enterprise：容器版。 **默认取值**: 不涉及
     * @param {string} [agentStatus] **参数解释**: Agent的状态 **约束限制**: 不涉及 **取值范围**: Agent的状态分为两类： - installed：已安装。已安装状态包含以下四种情况：   - online：在线。表示Agent已经成功安装并且与HSS云端防护中心保持连接。   - offline：离线。表示虽然Agent已经安装，但当前与HSS云端防护中心的连接中断。   - install_failed：安装失败。表示在尝试安装过程中遇到错误或问题，导致安装未能完成。   - installing：安装中。表示当前正在进行Agent安装。 - not_installed ：未安装。表示服务器中尚未安装Agent。 如果您要筛选除在线以外所有状态的Agent，可设置not_online（仅作为查询条件） **默认取值**: 不涉及
     * @param {string} [detectResult] **参数解释**: 检测结果 **约束限制**: 不涉及 **取值范围**: 包含如下4种。   - undetected ：未检测。   - clean ：无风险。   - risk ：有风险。   - scanning ：检测中。 **默认取值**: 不涉及
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostStatus] **参数解释**: 主机状态 **约束限制**: 不涉及 **取值范围**: 包含如下4种。 - ACTIVE ：正在运行。 - SHUTOFF ：关机。 - BUILDING ：创建中。 - ERROR ：故障。 **默认取值**: 不涉及
     * @param {string} [osType] **参数解释**: 操作系统类型 **约束限制**: 不涉及 **取值范围**: 包含如下2种。 - Linux ：Linux。 - Windows ：Windows。 **默认取值**: 不涉及
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [ipAddr] **参数解释**: 公网或私网IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及
     * @param {string} [protectStatus] **参数解释**: 防护状态 **约束限制**: 不涉及 **取值范围**: 包含如下3种： - closed ：关闭。 - opened ：开启。 - protection_exception ：防护异常。 **默认取值**: 不涉及
     * @param {string} [groupId] 服务器组ID
     * @param {string} [groupName] **参数解释**: 服务器组名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [vpcId] **参数解释**: VPC的ID **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {boolean} [hasIntrusion] **参数解释**: 存在告警事件 **约束限制**: 不涉及 **取值范围**: true或者false **默认取值**: 不涉及 
     * @param {boolean} [hasVul] **参数解释**: 存在漏洞风险 **约束限制**: 不涉及 **取值范围**: true或者false **默认取值**: 不涉及 
     * @param {boolean} [hasBaseline] **参数解释**: 存在基线风险 **约束限制**: 不涉及 **取值范围**: true或者false **默认取值**: 不涉及 
     * @param {string} [sortKey] **参数解释**: 排序字段 **约束限制**: 不涉及 **取值范围**: 只支持risk_num **默认取值**: 不涉及 
     * @param {string} [sortDir] **参数解释**: 排序的顺序 **约束限制**: 不涉及 **取值范围**: - asc: 正序 - desc: 倒序 **默认取值**: 不涉及 
     * @param {string} [policyGroupId] **参数解释**: 策略组ID **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [policyGroupName] **参数解释**: 策略组名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [chargingMode] **参数解释**： 收费模式 **约束限制**: 不涉及 **取值范围**: - packet_cycle ：包年/包月。 - on_demand ：按需。 **默认取值**: 不涉及
     * @param {boolean} [refresh] **参数解释** : 是否强制从ECS同步主机 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [getCommonLoginLocations] **参数解释** : 是否获取主机常用登录地信息 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [aboveVersion] **参数解释** : 是否返回比当前版本高的所有版本 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [outsideHost] **参数解释** : 是否华为云主机 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {string} [assetValue] **参数解释** : 资产重要性 **约束限制** : 不涉及 **取值范围** : 包含如下4种 - important ：重要资产 - common ：一般资产 - test ：测试资产 **默认取值** : 不涉及 
     * @param {string} [label] **参数解释** : 资产标签 **约束限制** : 不涉及 **取值范围** : 字符长度1-64位 **默认取值** : 不涉及 
     * @param {string} [serverGroup] **参数解释** : 资产服务器组 **约束限制** : 不涉及 **取值范围** : 字符长度1-64位 **默认取值** : 不涉及 
     * @param {boolean} [agentUpgradable] **参数解释** : agent是否可升级 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [installMode] **参数解释** : 是否安装模式场景 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [bindingKey] **参数解释** : 是否绑定DEW密钥 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [protectInterrupt] **参数解释** : 是否防护中断 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [incluster] **参数解释** : 是否集群内节点 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {boolean} [protectDegradation] **参数解释** : 是否防护降级 **约束限制** : 不涉及 **取值范围** : true或者false **默认取值** : 不涉及 
     * @param {string} [clusterId] **参数解释**: 集群ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHostStatus(listHostStatusRequest?: ListHostStatusRequest): Promise<ListHostStatusResponse> {
        const options = ParamCreater().listHostStatus(listHostStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像漏洞处置操作影响的漏洞列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像漏洞处置操作影响的漏洞列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {HandleImageVulnerabilityRequestBody} listImageHandleAffectVulnerabilitiesRequestBody **参数解释**: 查询漏洞处置操作影响的漏洞列表的请求体 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [imageName] **参数解释**: 镜像名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-512 **默认取值**: 不涉及 
     * @param {string} [vulName] **参数解释**: 漏洞名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-512 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageHandleAffectVulnerabilities(listImageHandleAffectVulnerabilitiesRequest?: ListImageHandleAffectVulnerabilitiesRequest): Promise<ListImageHandleAffectVulnerabilitiesResponse> {
        const options = ParamCreater().listImageHandleAffectVulnerabilities(listImageHandleAffectVulnerabilitiesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 本地镜像列表查询
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 本地镜像列表查询
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [imageName] 镜像名称
     * @param {string} [imageVersion] 镜像版本
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {string} [scanStatus] 扫描状态，包含如下:   - unscan : 未扫描   - success : 扫描完成   - scanning : 扫描中   - failed : 扫描失败   - waiting_for_scan : 等待扫描
     * @param {string} [localImageType] 镜像类型，包含如下:  - other_image : 非SWR镜像  - swr_image : SWR镜像
     * @param {number} [imageSize] 镜像大小，单位字节
     * @param {number} [startLatestUpdateTime] 最近更新时间搜索开始日期，时间单位：毫秒（ms）
     * @param {number} [endLatestUpdateTime] 最近更新时间搜索结束日期，时间单位：毫秒（ms）
     * @param {number} [startLatestScanTime] 最近一次扫描完成时间搜索开始日期，时间单位：毫秒（ms）
     * @param {number} [endLatestScanTime] 最近一次扫描完成时间搜索结束日期，时间单位：毫秒（ms）
     * @param {boolean} [hasVul] 是否存在软件漏洞
     * @param {string} [hostName] 本地镜像所关联服务器的名称
     * @param {string} [hostId] 本地镜像所关联服务器的ID
     * @param {string} [hostIp] 本地镜像所关联服务器的IP（公网或私网）
     * @param {string} [containerId] 本地镜像所关联容器的ID
     * @param {string} [containerName] 本地镜像所关联容器的名称
     * @param {string} [podId] 本地镜像所关联Pod的ID
     * @param {string} [podName] 本地镜像所关联Pod的名称
     * @param {string} [appName] 本地镜像所关联软件的名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageLocal(listImageLocalRequest?: ListImageLocalRequest): Promise<ListImageLocalResponse> {
        const options = ParamCreater().listImageLocal(listImageLocalRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像指定安全配置项的检查项列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像指定安全配置项的检查项列表
     * @param {string} imageType 镜像类型，包含如下:   - private_image : 私有镜像仓库   - shared_image : 共享镜像仓库   - local_image : 本地镜像   - instance_image : 企业镜像
     * @param {string} checkName 基线名称
     * @param {string} standard 标准类型，包含如下:   - cn_standard : 等保合规标准   - hw_standard : 云安全实践标准
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {string} [namespace] 组织名称（没有镜像相关信息时，表示查询所有镜像）
     * @param {string} [imageName] 镜像名称
     * @param {string} [imageVersion] 镜像版本名称
     * @param {string} [imageId] 镜像id
     * @param {string} [resultType] 结果类型，包含如下： - pass：已通过 - failed：未通过
     * @param {string} [checkRuleName] 检查项名称，支持模糊匹配
     * @param {string} [severity] 风险等级，包含如下:   - Security : 安全   - Low : 低危   - Medium : 中危   - High : 高危   - Critical : 危急
     * @param {string} [instanceId] 企业仓库实例ID，swr共享版无需使用该参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageRiskConfigRules(listImageRiskConfigRulesRequest?: ListImageRiskConfigRulesRequest): Promise<ListImageRiskConfigRulesResponse> {
        const options = ParamCreater().listImageRiskConfigRules(listImageRiskConfigRulesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像安全配置检测结果列表，当前支持检测CentOS 7、Debian 10、EulerOS和Ubuntu16镜像的系统配置项、SSH应用配置项。
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像安全配置检测结果列表
     * @param {string} imageType 镜像类型，包含如下:   - private_image : 私有镜像仓库   - shared_image : 共享镜像仓库   - local_image : 本地镜像   - instance_image : 企业镜像
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {string} [namespace] 组织名称
     * @param {string} [imageName] 镜像名称
     * @param {string} [imageVersion] 镜像版本名称
     * @param {string} [imageId] 镜像id
     * @param {string} [checkName] 基线名称
     * @param {string} [severity] 风险等级，包含如下:   - Security : 安全   - Low : 低危   - Medium : 中危   - High : 高危
     * @param {string} [standard] 标准类型，包含如下:   - cn_standard : 等保合规标准   - hw_standard : 云安全实践标准
     * @param {string} [instanceId] 企业仓库实例ID，swr共享版无需使用该参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageRiskConfigs(listImageRiskConfigsRequest?: ListImageRiskConfigsRequest): Promise<ListImageRiskConfigsResponse> {
        const options = ParamCreater().listImageRiskConfigs(listImageRiskConfigsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像的漏洞信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像的漏洞信息
     * @param {string} imageType 镜像类型，包含如下:   - private_image : 私有镜像仓库   - shared_image : 共享镜像仓库   - local_image : 本地镜像   - instance_image : 企业镜像
     * @param {string} imageId 镜像id
     * @param {string} namespace 组织名称
     * @param {string} imageName 镜像名称
     * @param {string} tagName 镜像版本
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {string} [instanceId] 企业仓库实例ID，swr共享版无需使用该参数
     * @param {string} [repairNecessity] 危险程度，包含如下3种。   - immediate_repair ：高危。   - delay_repair ：中危。   - not_needed_repair ：低危。
     * @param {string} [vulId] 漏洞ID（支持模糊查询）
     * @param {string} [appName] 软件名
     * @param {string} [type] 漏洞类型，包含如下：   -linux_vul : linux漏洞   -app_vul : 应用漏洞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageVulnerabilities(listImageVulnerabilitiesRequest?: ListImageVulnerabilitiesRequest): Promise<ListImageVulnerabilitiesResponse> {
        const options = ParamCreater().listImageVulnerabilities(listImageVulnerabilitiesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询已隔离文件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询已隔离文件列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [filePath] 文件路径
     * @param {string} [hostName] 服务器名称
     * @param {string} [privateIp] 服务器私有IP
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [fileHash] 文件hash，当前为sha256
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示个数
     * @param {string} [isolationStatus] 隔离状态，包含如下:   - isolated：已隔离   - restored：已恢复   - isolating：已下发隔离任务   - restoring：已下发恢复任务
     * @param {number} [lastDays] 查询时间范围天数，与自定义查询时间begin_time，end_time互斥
     * @param {number} [beginTime] 自定义查询时间，与查询时间范围天数互斥，查询时间段的起始时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {number} [endTime] 自定义时间，查询时间段的终止时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listIsolatedFile(listIsolatedFileRequest?: ListIsolatedFileRequest): Promise<ListIsolatedFileResponse> {
        const options = ParamCreater().listIsolatedFile(listIsolatedFileRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询指定中间件的服务器列表，通过传入中间件名称参数，返回对应的中间件服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定中间件的服务器列表
     * @param {string} fileName **参数解释**: 文件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 服务器IP **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {boolean} [partMatch] **参数解释**: 是否模糊匹配 **约束限制**: 不涉及 **取值范围**: - true：模糊匹配 - false：精确匹配  **默认取值**: false 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listJarPackageHostInfo(listJarPackageHostInfoRequest?: ListJarPackageHostInfoRequest): Promise<ListJarPackageHostInfoResponse> {
        const options = ParamCreater().listJarPackageHostInfo(listJarPackageHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-主机管理-指纹类型-中间件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-主机管理-指纹类型-中间件
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host : 主机 - container : 容器  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [fileName] **参数解释**: 文件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listJarPackageInfo(listJarPackageInfoRequest?: ListJarPackageInfoRequest): Promise<ListJarPackageInfoResponse> {
        const options = ParamCreater().listJarPackageInfo(listJarPackageInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询中间件列表，支持通过中间件名称查询对应的服务器树
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询中间件列表
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [fileName] jar包名称
     * @param {string} [category] 类别，包含如下:   - host : 主机   - container : 容器
     * @param {number} [limit] 每页显示数量
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listJarPackageStatistics(listJarPackageStatisticsRequest?: ListJarPackageStatisticsRequest): Promise<ListJarPackageStatisticsResponse> {
        const options = ParamCreater().listJarPackageStatistics(listJarPackageStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询cronjobs基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询cronjobs基本信息列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [cronjobName] job名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sCronJobs(listK8sCronJobsRequest?: ListK8sCronJobsRequest): Promise<ListK8sCronJobsResponse> {
        const options = ParamCreater().listK8sCronJobs(listK8sCronJobsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询daemonsets基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询daemonsets基本信息列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [daemonsetName] daemonset名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sDaemonSets(listK8sDaemonSetsRequest?: ListK8sDaemonSetsRequest): Promise<ListK8sDaemonSetsResponse> {
        const options = ParamCreater().listK8sDaemonSets(listK8sDaemonSetsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询deployment基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询deployment基本信息列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [deploymentName] deployment名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sDeployments(listK8sDeploymentsRequest?: ListK8sDeploymentsRequest): Promise<ListK8sDeploymentsResponse> {
        const options = ParamCreater().listK8sDeployments(listK8sDeploymentsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询jobs基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询jobs基本信息列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [jobName] job名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sJobs(listK8sJobsRequest?: ListK8sJobsRequest): Promise<ListK8sJobsResponse> {
        const options = ParamCreater().listK8sJobs(listK8sJobsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询pod基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询pod基本信息列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [podName] pod名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sPods(listK8sPodsRequest?: ListK8sPodsRequest): Promise<ListK8sPodsResponse> {
        const options = ParamCreater().listK8sPods(listK8sPodsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询statefulset基本信息列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询statefulset基本信息列表
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [statefulsetName] statefulset名称
     * @param {string} [namespaceName] 命名空间名称
     * @param {string} [clusterName] 所属集群名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listK8sStatefulSets(listK8sStatefulSetsRequest?: ListK8sStatefulSetsRequest): Promise<ListK8sStatefulSetsResponse> {
        const options = ParamCreater().listK8sStatefulSets(listK8sStatefulSetsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-内核模块的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-内核模块的服务器列表
     * @param {string} name 内核模块名称
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostIp] 服务器IP
     * @param {boolean} [partMatch] 是否模糊匹配，默认false表示精确匹配
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKernelModuleHostInfo(listKernelModuleHostInfoRequest?: ListKernelModuleHostInfoRequest): Promise<ListKernelModuleHostInfoResponse> {
        const options = ParamCreater().listKernelModuleHostInfo(listKernelModuleHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-主机管理-指纹类型-内核模块
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-主机管理-指纹类型-内核模块
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [name] **参数解释**: 内核模块名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKernelModuleInfo(listKernelModuleInfoRequest?: ListKernelModuleInfoRequest): Promise<ListKernelModuleInfoResponse> {
        const options = ParamCreater().listKernelModuleInfo(listKernelModuleInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-内核模块左侧树
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-内核模块左侧树
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [name] 内核模块名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKernelModuleStatistics(listKernelModuleStatisticsRequest?: ListKernelModuleStatisticsRequest): Promise<ListKernelModuleStatisticsResponse> {
        const options = ParamCreater().listKernelModuleStatistics(listKernelModuleStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器Kubernetes集群列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器Kubernetes集群列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [clusterName] 集群名称
     * @param {boolean} [loadAgentInfo] 是否加载agent相关信息，默认false
     * @param {string} [scene] 查询场景类型，包含如下：   -cluster_risk : 集群风险场景
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKubernetesClusterDetails(listKubernetesClusterDetailsRequest?: ListKubernetesClusterDetailsRequest): Promise<ListKubernetesClusterDetailsResponse> {
        const options = ParamCreater().listKubernetesClusterDetails(listKubernetesClusterDetailsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器Kubernetes端点列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器Kubernetes端点列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [name] 端点名称
     * @param {string} [clusterName] 集群名称
     * @param {string} [namespace] 命名空间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKubernetesEndpointDetails(listKubernetesEndpointDetailsRequest?: ListKubernetesEndpointDetailsRequest): Promise<ListKubernetesEndpointDetailsResponse> {
        const options = ParamCreater().listKubernetesEndpointDetails(listKubernetesEndpointDetailsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器Kubernetes服务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器Kubernetes服务列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [name] 服务名称
     * @param {string} [clusterName] 集群名称
     * @param {string} [namespace] 命名空间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listKubernetesServiceDetails(listKubernetesServiceDetailsRequest?: ListKubernetesServiceDetailsRequest): Promise<ListKubernetesServiceDetailsResponse> {
        const options = ParamCreater().listKubernetesServiceDetails(listKubernetesServiceDetailsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询常用登录IP信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询常用登录IP信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [ipAddr] 登录IP地址+掩码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listLoginCommonIp(listLoginCommonIpRequest?: ListLoginCommonIpRequest): Promise<ListLoginCommonIpResponse> {
        const options = ParamCreater().listLoginCommonIp(listLoginCommonIpRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询常用登录地信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询常用登录地信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [areaCode] 国家城市的编码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listLoginCommonLocation(listLoginCommonLocationRequest?: ListLoginCommonLocationRequest): Promise<ListLoginCommonLocationResponse> {
        const options = ParamCreater().listLoginCommonLocation(listLoginCommonLocationRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询SSH登录IP白名单列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询SSH登录IP白名单列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [whiteIp] 白名单IP/IP网段，IP网段由IP地址和掩码组成，以‘/’连接。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listLoginWhiteIp(listLoginWhiteIpRequest?: ListLoginWhiteIpRequest): Promise<ListLoginWhiteIpResponse> {
        const options = ParamCreater().listLoginWhiteIp(listLoginWhiteIpRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询登录白名单列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询登录白名单列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [loginIp] 登录源IP
     * @param {string} [loginUserName] 登录用户名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listLoginWhiteList(listLoginWhiteListRequest?: ListLoginWhiteListRequest): Promise<ListLoginWhiteListResponse> {
        const options = ParamCreater().listLoginWhiteList(listLoginWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询恶意软件云查样本收集配置开关状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询恶意软件云查样本收集配置开关状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listMalwareCollectStatus(listMalwareCollectStatusRequest?: ListMalwareCollectStatusRequest): Promise<ListMalwareCollectStatusResponse> {
        const options = ParamCreater().listMalwareCollectStatus(listMalwareCollectStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群下的namespace
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群下的namespace
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listNamespaces(listNamespacesRequest?: ListNamespacesRequest): Promise<ListNamespacesResponse> {
        const options = ParamCreater().listNamespaces(listNamespacesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询备份恢复任务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询备份恢复任务列表
     * @param {number} offset 查询起始点
     * @param {number} limit 每页显示个数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [status] 恢复状态，包含如下：   - success : 成功   - skipped : 跳过   - failed : 失败   - running : 正在运行   - timeout : 超时   - waiting : 等待
     * @param {string} [resourceName] 服务器名称
     * @param {number} [lastDays] 查询时间范围
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listOperationLogsByVaultName(listOperationLogsByVaultNameRequest?: ListOperationLogsByVaultNameRequest): Promise<ListOperationLogsByVaultNameResponse> {
        const options = ParamCreater().listOperationLogsByVaultName(listOperationLogsByVaultNameRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询账号组织
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询账号组织
     * @param {string} [xSecurityToken] 如果正在使用临时安全凭据，则此header是必需的，该值是临时安全凭据的安全令牌（会话令牌）。
     * @param {string} [region] Region ID
     * @param {boolean} [isRefresh] 是否强制从organization同步组织信息
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listOrganizationTree(listOrganizationTreeRequest?: ListOrganizationTreeRequest): Promise<ListOrganizationTreeResponse> {
        const options = ParamCreater().listOrganizationTree(listOrganizationTreeRequest);

         // @ts-ignore
        options['responseHeaders'] = ['X-request-id'];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询口令复杂度策略检测报告
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询口令复杂度策略检测报告
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 0 
     * @param {string} [hostIp] **参数解释**: 服务器IP地址 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 0 
     * @param {string} [hostId] **参数解释**: 主机id，不赋值时，查租户所有主机 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 0 
     * @param {string} [resultType] **参数解释**: 结果类型 **约束限制**: 不涉及 **取值范围**: - unhandled : 未忽略的 - ignored   : 已忽略的 **默认取值**: unhandled 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPasswordComplexity(listPasswordComplexityRequest?: ListPasswordComplexityRequest): Promise<ListPasswordComplexityResponse> {
        const options = ParamCreater().listPasswordComplexity(listPasswordComplexityRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取docker插件安装脚本
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取docker插件安装脚本
     * @param {string} plugin **参数解释**： 插件类型 **约束限制**： 不涉及 **取值范围**： - opa-docker-authz：docker插件。  **默认取值**： opa-docker-authz 
     * @param {string} operateType **参数解释**： 操作类型 **约束限制**： 不涉及 **取值范围**： - install：安装。 - upgrade：升级。 - uninstall：卸载。  **默认取值**： install 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {boolean} [outsideHost] **参数解释**： 是否非华为云 **约束限制**： 不涉及 **取值范围**： - true：是。 - false：否。  **默认取值**： false 
     * @param {boolean} [batchInstall] **参数解释**： 是否批量安装 **约束限制**： 不涉及 **取值范围**： - true：是。 - false：否。  **默认取值**： true 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPluginInstallScript(listPluginInstallScriptRequest?: ListPluginInstallScriptRequest): Promise<ListPluginInstallScriptResponse> {
        const options = ParamCreater().listPluginInstallScript(listPluginInstallScriptRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询插件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询插件列表
     * @param {string} name **参数解释**： 插件名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位  **默认取值**： opa-docker-authz 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [groupId] 服务器组ID
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [agentStatus] **参数解释**： 客户端状态 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位  **默认取值**： 不涉及 
     * @param {string} [detectResult] **参数解释**： 检测结果 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位  **默认取值**： 不涉及 
     * @param {string} [hostStatus] **参数解释**： 主机状态 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位  **默认取值**： 不涉及 
     * @param {string} [osType] **参数解释**： 操作系统类型 **约束限制**： 不涉及 **取值范围**： - Linux：Linux操作系统。 - Windows：Windows操作系统。  **默认取值**： 不涉及 
     * @param {string} [ipAddr] 公网或私网IP
     * @param {string} [protectStatus] 防护状态
     * @param {string} [groupName] 服务器组名称
     * @param {string} [policyGroupId] 策略组ID
     * @param {string} [policyGroupName] 策略组名称
     * @param {string} [label] 资产标签
     * @param {string} [chargingMode] 收费模式
     * @param {boolean} [refresh] **参数解释**： 是否强制从ECS同步主机 **约束限制**： 不涉及 **取值范围**： - true：是。 - false：否。  **默认取值**： false 
     * @param {boolean} [aboveVersion] 是否返回比当前版本高的所有版本
     * @param {string} [version] **参数解释**： 主机开通的版本 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位  **默认取值**： 不涉及 
     * @param {string} [plugin] **参数解释**： 插件类型 **约束限制**： 不涉及 **取值范围**： - opa-docker-authz：docker插件。  **默认取值**： opa-docker-authz 
     * @param {boolean} [outsideHost] **参数解释**： 是否非华为云 **约束限制**： 不涉及 **取值范围**： - true：是。 - false：否。  **默认取值**： false 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPlugins(listPluginsRequest?: ListPluginsRequest): Promise<ListPluginsResponse> {
        const options = ParamCreater().listPlugins(listPluginsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询主机策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询主机策略列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} agentId agent ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPolicies(listPoliciesRequest?: ListPoliciesRequest): Promise<ListPoliciesResponse> {
        const options = ParamCreater().listPolicies(listPoliciesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 具备该端口的主机/容器信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产指纹-端口-服务器列表
     * @param {number} port 端口号
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostName] 主机名称
     * @param {string} [hostIp] 主机ip
     * @param {string} [type] 端口类型：目前包括TCP，UDP两种
     * @param {string} [category] 类别，默认为host，包含如下： - host：主机 - container：容器
     * @param {number} [limit] 每页显示数量
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPortHost(listPortHostRequest?: ListPortHostRequest): Promise<ListPortHostResponse> {
        const options = ParamCreater().listPortHost(listPortHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询开放端口列表，支持通过传入端口或协议类型查询服务器数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询开放端口统计信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {string} [sortDir] **参数解释**: 排序的顺序 **约束限制**: 不涉及 **取值范围**:   - asc  : 正序   - desc : 倒序  **默认取值**: 正序排序 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [port] **参数解释**: 端口号，该字段用来进行精确匹配 **约束限制**: 与port_string同时使用的话，二者有包含关系则按精确匹配，无包含关系则结果为空 **取值范围**: 最小值1，最大值65535 **默认取值**: 不涉及 
     * @param {string} [portString] **参数解释**: 端口字符串，该字段用来进行模糊匹配 **约束限制**: 与port同时使用的话，二者有包含关系则按精确匹配，无包含关系则结果为空 **取值范围**: 最小值1，最大值65535 **默认取值**: 不涉及 
     * @param {string} [type] **参数解释**: 端口类型 **约束限制**: 不涉及 **取值范围**: - UDP - UDP6 - TCP - TCP6  **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 端口状态 **约束限制**: 不涉及 **取值范围**: - danger: 危险端口 - normal: 正常端口 - unknow: 无已知危险的端口  **默认取值**: 不涉及 
     * @param {string} [sortKey] **参数解释**: 排序的key值，目前支持按照端口号port排序 **约束限制**: 不涉及 **取值范围**: - port: 端口号  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPortStatistics(listPortStatisticsRequest?: ListPortStatisticsRequest): Promise<ListPortStatisticsResponse> {
        const options = ParamCreater().listPortStatistics(listPortStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单服务器的开放端口列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单服务器的开放端口列表
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {number} [port] **参数解释**: 端口号 **约束限制**: 不涉及 **取值范围**: 最小值1，最大值65535 **默认取值**: 不涉及 
     * @param {string} [type] **参数解释**: 端口类型：目前包括TCP，UDP两种 **约束限制**: 不涉及 **取值范围**: - TCP: TCP类型的端口 - UDP: UDP类型的端口 **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 端口状态 **约束限制**: 不涉及 **取值范围**: - danger: 危险端口 - unknow: 无已知危险的端口 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 主机所属的企业项目ID。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。 **约束限制**: 开通企业项目功能后才需要配置企业项目。 **取值范围**: 字符长度0-256位 **默认取值**: 0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [category] **参数解释**: 类别，默认为host **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器 **默认取值**: host 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPorts(listPortsRequest?: ListPortsRequest): Promise<ListPortsResponse> {
        const options = ParamCreater().listPorts(listPortsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程列表，通过传入进程路径参数查询对应的服务器数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {string} [path] **参数解释** : 可执行进程路径 **约束限制** : 不涉及 **取值范围** : 字符长度1-256位 **默认取值** : 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProcessStatistics(listProcessStatisticsRequest?: ListProcessStatisticsRequest): Promise<ListProcessStatisticsResponse> {
        const options = ParamCreater().listProcessStatistics(listProcessStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 具备该进程的主机/容器信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产指纹-进程-服务器列表
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostName] 主机名称
     * @param {string} [hostIp] 主机ip
     * @param {string} [path] 进程可执行文件路径
     * @param {string} [category] 类型，默认为host，包含如下： - host：主机 - container：容器
     * @param {number} [limit] 每页显示数量
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProcessesHost(listProcessesHostRequest?: ListProcessesHostRequest): Promise<ListProcessesHostResponse> {
        const options = ParamCreater().listProcessesHost(listProcessesHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询租户当前项目下所有用过的标签
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询租户当前项目下所有用过的标签
     * @param {string} resourceType 资源类别，hss
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProjectTags(listProjectTagsRequest?: ListProjectTagsRequest): Promise<ListProjectTagsResponse> {
        const options = ParamCreater().listProjectTags(listProjectTagsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询勒索病毒的防护策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询勒索病毒的防护策略列表
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 取值0-2000000 **默认取值**: 0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [policyName] **参数解释**: 防护策略名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-255 **默认取值**: 不涉及 
     * @param {string} [protectPolicyId] **参数解释**: 防护策略id **约束限制**: 不涉及 **取值范围**: 字符长度0-128 **默认取值**: 不涉及 
     * @param {string} [operatingSystem] **参数解释**: 策略支持的操作系统 **约束限制**: 不涉及 **取值范围**: 包含如下：   - Windows : Windows系统   - Linux : Linux系统 **默认取值**: 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProtectionPolicy(listProtectionPolicyRequest?: ListProtectionPolicyRequest): Promise<ListProtectionPolicyResponse> {
        const options = ParamCreater().listProtectionPolicy(listProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询勒索防护服务器列表，与云备份服务配合使用。因此使用勒索相关接口之前确保该局点有云备份服务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询勒索防护服务器列表
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 取值0-2000000 **默认取值**: 0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [osType] **参数解释**: 操作系统类型 **约束限制**: 不涉及 **取值范围**: 包含如下2种。   - Linux ：Linux。   - Windows ：Windows。 字符长度0-64 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 服务器IP地址 **约束限制**: 不涉及 **取值范围**: 字符长度0-256 **默认取值**: 不涉及 
     * @param {string} [hostStatus] **参数解释**: 主机状态 **约束限制**: 不涉及 **取值范围**: 包含如下3种。   - 不传参默认为全部。   - ACTIVE ：正在运行。   - SHUTOFF ：关机。 **默认取值**: 不涉及 
     * @param {number} [lastDays] **参数解释**: 查询时间范围天数 **约束限制**: 不涉及 **取值范围**: 长度1-30。若不填，则默认查询一天内的防护事件和已有备份数。 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProtectionServer(listProtectionServerRequest?: ListProtectionServerRequest): Promise<ListProtectionServerResponse> {
        const options = ParamCreater().listProtectionServer(listProtectionServerRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询防护服务器列表：查询防护服务器相关数据，包含服务器名称、ip地址、操作系统、服务器组名称、防护策略、防护状态、微服务防护状态、RASP防护状态、RASP攻击数量信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询防护服务器列表
     * @param {number} offset 查询起始点
     * @param {number} limit 每页显示个数
     * @param {'closed' | 'opened'} appStatus 应用防护状态，包含如下2种。   - closed ：未开启。   - opened ：防护中。
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] 云主机名称
     * @param {string} [osType] 操作系统类型，包含如下2种。  - linux ：linux类型应用防护。  - windows ：windows类型应用防护。
     * @param {string} [hostIp] 云主机私有IP
     * @param {'java'} [appType] 应用类型，包含如下1种。   - java ：java类型应用防护。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProtectionServers(listProtectionServersRequest?: ListProtectionServersRequest): Promise<ListProtectionServersResponse> {
        const options = ParamCreater().listProtectionServers(listProtectionServersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询导出任务信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询导出任务信息
     * @param {string} taskId 任务id
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listQueryExportTask(listQueryExportTaskRequest?: ListQueryExportTaskRequest): Promise<ListQueryExportTaskResponse> {
        const options = ParamCreater().listQueryExportTask(listQueryExportTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询配额详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询配额详情
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [version] **参数解释**： 主机开通的版本 **约束限制**: 不涉及 **取值范围**： 包含如下7种输入。 - hss.version.null ：无。 - hss.version.basic ：基础版。 - hss.version.advanced ：专业版。 - hss.version.enterprise ：企业版。 - hss.version.premium ：旗舰版。 - hss.version.wtp ：网页防篡改版。 - hss.version.container.enterprise：容器版。 **默认取值**: 不涉及
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: 包含如下两种： - host_resource ：主机 - container_resource ：容器 **默认取值**: 不涉及
     * @param {string} [quotaStatus] **参数解释**: 配额状态 **约束限制**: 不涉及 **取值范围**: 包含如下三种： - normal ： 正常 - expired ：过期 - freeze ：冻结 **默认取值**: 不涉及
     * @param {string} [usedStatus] **参数解释**: 使用状态 **约束限制**: 不涉及 **取值范围**: 包含如下两种： - idle ：空闲的 - used ：使用中 **默认取值**: 不涉及
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [resourceId] **参数解释** : HSS配额的资源ID **约束限制** : 不涉及 **取值范围** : 字符长度1-128位 **默认取值** : 不涉及 
     * @param {string} [chargingMode] **参数解释**： 收费模式 **约束限制**: 不涉及 **取值范围**: - packet_cycle ：包年/包月。 - on_demand ：按需。 **默认取值**: 不涉及
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listQuotasDetail(listQuotasDetailRequest?: ListQuotasDetailRequest): Promise<ListQuotasDetailResponse> {
        const options = ParamCreater().listQuotasDetail(listQuotasDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询勒索防护服务器列表，与云备份服务配合使用。因此使用勒索相关接口之前确保该局点有云备份服务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询勒索防护服务器列表2.0
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostId] 服务器ID
     * @param {string} [osType] 操作系统类型，包含如下2种。   - Linux ：Linux。   - Windows ：Windows。
     * @param {string} [hostIp] 服务器IP地址，服务器公网IP地址
     * @param {string} [privateIp] 服务器私有IP
     * @param {string} [hostStatus] 主机状态，包含如下3种。   - 不传参默认为全部。   - ACTIVE ：正在运行。   - SHUTOFF ：关机。
     * @param {string} [ransomProtectionStatus] 勒索防护状态，包含如下6种。   - closed ：未开启。   - opened ：防护中。   - opening ：开启中。   - closing ：关闭中。   - protect_failed：防护失败。   - protect_degraded：防护降级。
     * @param {string} [protectPolicyName] 勒索防护策略名称
     * @param {string} [policyName] 防护策略名称
     * @param {string} [policyId] 防护策略id
     * @param {string} [agentStatus] Agent状态
     * @param {string} [groupId] 服务器组ID
     * @param {string} [groupName] 服务器组名称
     * @param {number} [lastDays] 查询时间范围天数，1~30天，若不填，则默认查询一天
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRansomwareProtectionNodes(listRansomwareProtectionNodesRequest?: ListRansomwareProtectionNodesRequest): Promise<ListRansomwareProtectionNodesResponse> {
        const options = ParamCreater().listRansomwareProtectionNodes(listRansomwareProtectionNodesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询应用防护事件列表：展示防护事件相关信息，包含告警级别、服务器名称、告警名称、告警时间、攻击源ip、攻击源url数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询应用防护事件列表
     * @param {string} hostId Host Id
     * @param {number} startTime 查询时间段的起始时间，毫秒级时间戳(ms)
     * @param {number} endTime 查询时间段的终止时间，毫秒级时间戳(ms)
     * @param {number} limit 默认10
     * @param {number} offset 默认0
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {'java'} [appType] 应用类型，包含如下1种。   - java ：java类型应用防护。
     * @param {string} [severity] 告警级别 |- 告警级别，包含如下1种。 - 0 ：Info级别告警 - 1 ：Low级别告警 - 2 ：Medium级别告警 - 3 ：High级别告警 - 4 ：Critical级别告警
     * @param {string} [attackTag] 攻击标识 |- 攻击标识，包含如下6种。 - Attack Success：攻击成功 - Attack Attempt：攻击尝试 - Attack Blocked：攻击被阻断 - Abnormal Behavior：异常行为 - Collapsible Host：主机失陷 - System Vulnerability：系统脆弱性
     * @param {'closed' | 'opened'} [protectStatus] 防护状态，包含如下2种。   - closed ：未开启。   - opened ：防护中。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRaspEvents(listRaspEventsRequest?: ListRaspEventsRequest): Promise<ListRaspEventsResponse> {
        const options = ParamCreater().listRaspEvents(listRaspEventsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询防护策略列表：查询创建的防护策略信息，包含防护策略名称、检测规则、关联服务器数量
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询防护策略列表
     * @param {string} region region id
     * @param {string} [enterpriseProjectId] 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {string} [osType] 操作系统类型，包含如下2种。 - Linux - Windows
     * @param {number} [limit] 每页显示个数，默认10
     * @param {number} [offset] 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [policyName] 策略名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRaspPolicies(listRaspPoliciesRequest?: ListRaspPoliciesRequest): Promise<ListRaspPoliciesResponse> {
        const options = ParamCreater().listRaspPolicies(listRaspPoliciesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询指定安全配置项的检查项列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定安全配置项的检查项列表
     * @param {string} checkName **参数解释**: 配置检查（基线）的名称，例如SSH、CentOS 7、Windows **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} standard **参数解释**: 标准类型 **约束限制**: 不涉及 **取值范围**: - cn_standard : 等保合规标准 - hw_standard : 云安全实践标准 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [resultType] **参数解释**: 结果类型 **约束限制**: 不涉及 **取值范围**: - safe : 已通过 - unhandled : 未通过，且未忽略的 - ignored : 未通过，且已忽略的 **默认取值**: unhandled 
     * @param {string} [checkRuleName] **参数解释**: 检查项（检查规则）名称，支持模糊匹配 **约束限制**: 不涉及 **取值范围**: 字符长度0-2048位 **默认取值**: 不涉及 
     * @param {string} [severity] **参数解释**: 风险等级 **约束限制**: 不涉及 **取值范围**: - Security : 安全 - Low : 低危 - Medium : 中危 - High : 高危 - Critical : 危急 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 主机ID，不赋值时，查租户所有主机 **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRiskConfigCheckRules(listRiskConfigCheckRulesRequest?: ListRiskConfigCheckRulesRequest): Promise<ListRiskConfigCheckRulesResponse> {
        const options = ParamCreater().listRiskConfigCheckRules(listRiskConfigCheckRulesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询指定安全配置项的受影响服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定安全配置项的受影响服务器列表
     * @param {string} checkName **参数解释**: 配置检查（基线）的名称，例如SSH、CentOS 7、Windows **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} standard **参数解释**: 标准类型 **约束限制**: 不涉及 **取值范围**: - cn_standard : 等保合规标准 - hw_standard : 云安全实践标准 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 服务器IP地址 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRiskConfigHosts(listRiskConfigHostsRequest?: ListRiskConfigHostsRequest): Promise<ListRiskConfigHostsResponse> {
        const options = ParamCreater().listRiskConfigHosts(listRiskConfigHostsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询租户的服务器安全配置检测结果列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询租户的服务器安全配置检测结果列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [checkName] **参数解释**: 配置检查（基线）的名称，例如SSH、CentOS 7、Windows **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [groupId] **参数解释**: 策略组ID **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [severity] **参数解释**: 风险等级 **约束限制**: 不涉及 **取值范围**: - Security : 安全 - Low : 低危 - Medium : 中危 - High : 高危 **默认取值**: 不涉及 
     * @param {string} [standard] **参数解释**: 标准类型 **约束限制**: 不涉及 **取值范围**: - cn_standard : 等保合规标准 - hw_standard : 云安全实践标准 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 主机id **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRiskConfigs(listRiskConfigsRequest?: ListRiskConfigsRequest): Promise<ListRiskConfigsResponse> {
        const options = ParamCreater().listRiskConfigs(listRiskConfigsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查入侵事件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查入侵事件列表
     * @param {string} category **参数解释**： 事件类别 **约束限制**: 不涉及 **取值范围**: - host：主机安全事件 - container：容器安全事件  **默认取值**: 不涉及 
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [lastDays] **参数解释**: 查询时间范围天数，与自定义查询时间begin_time，end_time互斥。 **约束限制**: 不涉及 **取值范围**: 最小值1，最大值30 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**： 服务器名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [hostId] **参数解释**： 服务器ID **约束限制**： 不涉及 **取值范围**： 字符长度0-64位 **默认取值**： 不涉及 
     * @param {string} [privateIp] **参数解释**： 服务器私有IP **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [publicIp] **参数解释**： 服务器公网IP **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [containerName] **参数解释**： 容器实例名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-512位 **默认取值**： 不涉及 
     * @param {number} [offset] **参数解释**: 偏移量，指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 最小值10，最大值1000 **默认取值**: 10 
     * @param {Array<number>} [eventTypes] **参数解释**: 事件类型 **约束限制**: 不涉及 **取值范围**: - 1001：通用恶意软件 - 1002：病毒 - 1003：蠕虫 - 1004：木马 - 1005：僵尸网络 - 1006：后门 - 1010：Rootkit - 1011：勒索软件 - 1012：黑客工具 - 1015：Webshell - 1016：挖矿 - 1017：反弹Shell - 2001：一般漏洞利用 - 2012：远程代码执行 - 2047：Redis漏洞利用 - 2048：Hadoop漏洞利用 - 2049：MySQL漏洞利用 - 3002：文件提权 - 3003：进程提权 - 3004：关键文件变更 - 3005：文件/目录变更 - 3007：进程异常行为 - 3015：高危命令执行 - 3018：异常Shell - 3026：crontab提权 - 3027：Crontab可疑任务 - 3029：系统安全防护被禁用 - 3030：备份删除 - 3031：异常注册表操作 - 3036：容器镜像阻断 - 4002：暴力破解 - 4004：异常登录 - 4006：非法系统账号 - 4014：用户账号添加 - 4020：用户密码窃取 - 6002：端口扫描 - 6003：主机扫描 - 13001：Kubernetes事件删除 - 13002：Pod异常行为 - 13003：枚举用户信息 - 13004：绑定集群用户角色  **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled：未处理 - handled：已处理  **默认取值**: 不涉及 
     * @param {string} [severity] **参数解释**: 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {string} [beginTime] **参数解释**： 自定义查询时间，与查询时间范围天数互斥，查询时间段的起始时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥 **约束限制**： 不涉及 **取值范围**： 字符长度13位 **默认取值**： 不涉及 
     * @param {string} [endTime] **参数解释**： 自定义时间，查询时间段的终止时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥 **约束限制**： 不涉及 **取值范围**： 字符长度13位 **默认取值**： 不涉及 
     * @param {Array<string>} [eventClassIds] **参数解释**: 事件标识 **约束限制**: 不涉及 **取值范围**: - container_1001：容器命名空间 - container_1002：容器开放端口 - container_1003：容器安全选项 - container_1004：容器挂载目录 - containerescape_0001：容器高危系统调用 - containerescape_0002：Shocker攻击 - containerescape_0003：DirtCow攻击 - containerescape_0004：容器文件逃逸攻击 - dockerfile_001：用户自定义容器保护文件被修改 - dockerfile_002：容器文件系统可执行文件被修改 - dockerproc_001：容器进程异常事件上报 - fileprotect_0001：文件提权 - fileprotect_0002：关键文件变更 - fileprotect_0003：关键文件路径变更 - fileprotect_0004：文件/目录变更 - av_1002：病毒 - av_1003：蠕虫 - av_1004：木马 - av_1005：僵尸网络 - av_1006：后门 - av_1007：间谍软件 - av_1008：恶意广告软件 - av_1009：钓鱼 - av_1010：Rootkit - av_1011：勒索软件 - av_1012：黑客工具 - av_1013：灰色软件 - av_1015：Webshell - av_1016：挖矿软件 - login_0001：尝试暴力破解 - login_0002：爆破成功 - login_1001：登录成功 - login_1002：异地登录 - login_1003：弱口令 - malware_0001：shell变更事件上报 - malware_0002：反弹shell事件上报 - malware_1001：恶意程序 - procdet_0001：进程异常行为检测 - procdet_0002：进程提权 - crontab_0001：crontab脚本提权 - crontab_0002：恶意路径提权 - procreport_0001：危险命令 - user_1001：账号变更 - user_1002：风险账号 - vmescape_0001：虚拟机敏感命令执行 - vmescape_0002：虚拟化进程访问敏感文件 - vmescape_0003：虚拟机异常端口访问 - webshell_0001：网站后门 - network_1001：恶意挖矿 - network_1002：对外DDoS攻击 - network_1003：恶意扫描 - network_1004：敏感区域攻击 - ransomware_0001：勒索攻击 - ransomware_0002：勒索攻击 - ransomware_0003：勒索攻击 - fileless_0001：进程注入 - fileless_0002：动态库注入进程 - fileless_0003：关键配置变更 - fileless_0004：环境变量变更 - fileless_0005：内存文件进程 - fileless_0006：vdso劫持 - crontab_1001：Crontab可疑任务 - vul_exploit_0001：Redis漏洞利用攻击 - vul_exploit_0002：Hadoop漏洞利用攻击 - vul_exploit_0003：MySQL漏洞利用攻击 - rootkit_0001：可疑rootkit文件 - rootkit_0002：可疑内核模块 - RASP_0004：上传Webshell - RASP_0018：无文件Webshell - blockexec_001：已知勒索攻击 - hips_0001：Windows Defender防护被禁用 - hips_0002：可疑的黑客工具 - hips_0003：可疑的勒索加密行为 - hips_0004：隐藏账号创建 - hips_0005：读取用户密码凭据 - hips_0006：可疑的SAM文件导出 - hips_0007：可疑shadow copy删除操作 - hips_0008：备份文件删除 - hips_0009：可疑勒索病毒操作注册表 - hips_0010：可疑的异常进程行为 - hips_0011：可疑的扫描探测 - hips_0012：可疑的勒索病毒脚本运行 - hips_0013：可疑的挖矿命令执行 - hips_0014：可疑的禁用windows安全中心 - hips_0015：可疑的停止防火墙服务行为 - hips_0016：可疑的系统自动恢复禁用 - hips_0017：Offies创建可执行文件 - hips_0018：带宏Offies文件异常创建 - hips_0019：可疑的注册表操作 - hips_0020：Confluence远程代码执行 - hips_0021：MSDT远程代码执行 - portscan_0001：通用端口扫描 - portscan_0002：秘密端口扫描 - k8s_1001：Kubernetes事件删除 - k8s_1002：创建特权Pod - k8s_1003：Pod中使用交互式shell - k8s_1004：创建敏感目录Pod - k8s_1005：创建主机网络的Pod - k8s_1006：创建主机Pid空间的Pod - k8s_1007：普通pod访问APIserver认证失败 - k8s_1008：普通Pod通过Curl访问APIServer - k8s_1009：系统管理空间执行exec - k8s_1010：系统管理空间创建Pod - k8s_1011：创建静态Pod - k8s_1012：创建DaemonSet - k8s_1013：创建集群计划任务 - k8s_1014：Secrets操作 - k8s_1015：枚举用户可执行的操作 - k8s_1016：高权限RoleBinding或ClusterRoleBinding - k8s_1017：ServiceAccount创建 - k8s_1018：创建Cronjob - k8s_1019：Pod中exec使用交互式shell - k8s_1020：无权限访问Apiserver - k8s_1021：使用curl访问APIServer - k8s_1022：Ingress漏洞 - k8s_1023：中间人攻击 - k8s_1024：蠕虫挖矿木马 - k8s_1025：K8s事件删除 - k8s_1026：SelfSubjectRulesReview场景 - imgblock_0001：镜像白名单阻断 - imgblock_0002：镜像黑名单阻断 - imgblock_0003：镜像标签白名单阻断 - imgblock_0004：镜像标签黑名单阻断 - imgblock_0005：创建容器白名单阻断 - imgblock_0006：创建容器黑名单阻断 - imgblock_0007：容器mount proc阻断 - imgblock_0008：容器seccomp unconfined阻断 - imgblock_0009：容器特权阻断 - imgblock_0010：容器capabilities阻断  **默认取值**: 不涉及 
     * @param {Array<string>} [severityList] **参数解释**: 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {string} [attackTag] **参数解释**: 攻击标识 **约束限制**: 不涉及 **取值范围**: - attack_success：攻击成功 - attack_attempt：攻击尝试 - attack_blocked：攻击被阻断 - abnormal_behavior：异常行为 - collapsible_host：主机失陷 - system_vulnerability：系统脆弱性  **默认取值**: 不涉及 
     * @param {string} [assetValue] **参数解释**: 资产重要性 **约束限制**: 不涉及 **取值范围**: - important：重要资产 - common：般资产 - test：测试资产  **默认取值**: 不涉及 
     * @param {Array<string>} [tagList] 事件标签列表，例如:[\&quot;热点事件\&quot;]
     * @param {string} [attCk] **参数解释**: ATT&amp;CK攻击阶段 **约束限制**: 不涉及 **取值范围**: - Reconnaissance：侦察 - Initial Access：初始访问 - Execution：执行 - Persistence：持久化 - Privilege Escalation：权限提升 - Defense Evasion：防御绕过 - Credential Access：凭据访问 - Command and Control：命令与控制 - Impact：影响破坏  **默认取值**: 不涉及 
     * @param {string} [eventName] **参数解释**： 告警名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {boolean} [autoBlock] **参数解释**： 是否自动阻断告警 **约束限制**： 不涉及 **取值范围**： - true：自动阻断告警 - false：不自动阻断告警 **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listSecurityEvents(listSecurityEventsRequest?: ListSecurityEventsRequest): Promise<ListSecurityEventsResponse> {
        const options = ParamCreater().listSecurityEvents(listSecurityEventsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询云原生网络模式2.0的集群已配置的安全组策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询云原生网络模式2.0的集群已配置的安全组策略
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listSecurityGroupPolicies(listSecurityGroupPoliciesRequest?: ListSecurityGroupPoliciesRequest): Promise<ListSecurityGroupPoliciesResponse> {
        const options = ParamCreater().listSecurityGroupPolicies(listSecurityGroupPoliciesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询企业项目下所有的安全组列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询企业项目下所有的安全组列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listSecurityGroups(listSecurityGroupsRequest?: ListSecurityGroupsRequest): Promise<ListSecurityGroupsResponse> {
        const options = ParamCreater().listSecurityGroups(listSecurityGroupsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询swr镜像仓库镜像列表,如果需要从swr同步最新镜像，需要先调用“从swr同步镜像”接口
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询swr镜像仓库镜像列表-接口已废弃，不再推荐使用
     * @param {string} imageType 镜像类型，包含如下:   - private_image : 私有镜像仓库   - shared_image : 共享镜像仓库   - local_image : 本地镜像   - instance_image : 企业镜像
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [namespace] 组织名称
     * @param {string} [imageName] 镜像名称
     * @param {string} [imageVersion] 镜像版本
     * @param {boolean} [latestVersion] 仅关注最新版本镜像
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {string} [scanStatus] 扫描状态，包含如下:   - unscan : 未扫描   - success : 扫描完成   - scanning : 扫描中   - failed : 扫描失败   - waiting_for_scan : 等待扫描
     * @param {string} [instanceName] 企业镜像实例名称
     * @param {number} [imageSize] 镜像大小
     * @param {number} [startLatestUpdateTime] 创建时间开始日期，时间单位：毫秒（ms）
     * @param {number} [endLatestUpdateTime] 创建时间结束日期，时间单位：毫秒（ms）
     * @param {number} [startLatestScanTime] 最近一次扫描完成时间开始日期，时间单位：毫秒（ms）
     * @param {number} [endLatestScanTime] 最近一次扫描完成时间结束日期，时间单位：毫秒（ms）
     * @param {boolean} [hasMaliciousFile] 是否存在恶意文件
     * @param {boolean} [hasUnsafeSetting] 是否存在基线检查
     * @param {boolean} [hasVul] 是否存在软件漏洞
     * @param {string} [instanceId] 企业仓库实例ID，swr共享版无需使用该参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listSwrImageRepository(listSwrImageRepositoryRequest?: ListSwrImageRepositoryRequest): Promise<ListSwrImageRepositoryResponse> {
        const options = ParamCreater().listSwrImageRepository(listSwrImageRepositoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询系统用户白名单列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询系统用白名单列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [systemUserName] 系统用户名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listSystemUserWhiteList(listSystemUserWhiteListRequest?: ListSystemUserWhiteListRequest): Promise<ListSystemUserWhiteListResponse> {
        const options = ParamCreater().listSystemUserWhiteList(listSystemUserWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询双因子主机列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询双因子主机列表
     * @param {number} limit 默认10
     * @param {number} offset 默认0
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] 主机名
     * @param {string} [displayName] 显示名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listTwoFactorLoginHost(listTwoFactorLoginHostRequest?: ListTwoFactorLoginHostRequest): Promise<ListTwoFactorLoginHostResponse> {
        const options = ParamCreater().listTwoFactorLoginHost(listTwoFactorLoginHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取账户变动历史记录信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取账户变动历史信息
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [userName] **参数解释**: 用户名 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位  **默认取值**: 不涉及 
     * @param {boolean} [rootPermission] **参数解释**: 是否有root权限 **约束限制**: 不涉及 **取值范围**: true: 具有root权限 false: 不具有root权限  **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位  **默认取值**: 不涉及 
     * @param {string} [changeType] **参数解释**: 账号变更类型 **约束限制**: 不涉及 **取值范围**: - ADD ：添加 - DELETE ：删除 - MODIFY ： 修改  **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200  **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值10000  **默认取值**: 不涉及 
     * @param {number} [startTime] **参数解释**: 变更开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 取值0-4070880000000  **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 变更结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 取值0-4070880000000  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listUserChangeHistories(listUserChangeHistoriesRequest?: ListUserChangeHistoriesRequest): Promise<ListUserChangeHistoriesResponse> {
        const options = ParamCreater().listUserChangeHistories(listUserChangeHistoriesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询账号信息列表，支持通过传入账号名称参数查询对应的服务器数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询账号信息列表
     * @param {string} [userName] 账号名称，参考windows文件命名规则，支持字母、数字、下划线、中文，特殊字符!@.-等，不包括中文标点符号
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [limit] 每页显示数量
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {string} [category] 类别，默认为host，包含如下： - host：主机 - container：容器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listUserStatistics(listUserStatisticsRequest?: ListUserStatisticsRequest): Promise<ListUserStatisticsResponse> {
        const options = ParamCreater().listUserStatistics(listUserStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询账号的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询账号的服务器列表
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [userName] **参数解释**: 账号名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-32位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {boolean} [loginPermission] **参数解释**: 是否允许登录 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {boolean} [rootPermission] **参数解释**: 是否有root权限 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {string} [userGroup] **参数解释**: 是否是主机用户组 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [category] **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: 不涉及 
     * @param {boolean} [partMatch] **参数解释**: 是否模糊匹配 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listUsers(listUsersRequest?: ListUsersRequest): Promise<ListUsersResponse> {
        const options = ParamCreater().listUsers(listUsersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞历史处置记录列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞历史处置记录列表
     * @param {string} enterpriseProjectId 企业项目ID
     * @param {number} limit 每页个数
     * @param {number} offset 偏移量
     * @param {Array<string>} [status] 漏洞状态，包含如下：   - vul_status_unfix：未处理   - vul_status_ignored：已忽略   - vul_status_verified：验证中   - vul_status_fixing：修复中   - vul_status_fixed：修复成功   - vul_status_reboot：修复成功待重启   - vul_status_failed：修复失败   - vul_status_fix_after_reboot：请重启主机再次修复
     * @param {string} [vulId] 漏洞ID
     * @param {string} [vulType] 漏洞类型，包含如下:   - linux_vul：Linux漏洞   - windows_vul：Windows漏洞   - web_cms：Web-CMS漏洞   - app_vul：应用漏洞   - urgent_vul：应急漏洞
     * @param {string} [assetValue] 资产重要性，包含如下:   - important：重要资产   - common：一般资产   - test：测试资产
     * @param {string} [groupName] 服务器组
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostIp] 服务器IP
     * @param {string} [clusterId] 集群ID
     * @param {'handle_time'} [sortKey] 排序字段，包含如下：   - handle_time：处置时间
     * @param {'asc' | 'desc'} [sortDir] 排序顺序，若sort_key不为空，设置返回结果按照sort_key升序或降序排序，默认降序排序，包含如下：   - asc：升序   - desc：降序
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [privateIp] 服务器私网IP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHandleHistory(listVulHandleHistoryRequest?: ListVulHandleHistoryRequest): Promise<ListVulHandleHistoryResponse> {
        const options = ParamCreater().listVulHandleHistory(listVulHandleHistoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询受影响服务器详情-软件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询受影响服务器详情-软件列表
     * @param {string} hostId **参数解释**: 主机id **约束限制**: 不涉及 **取值范围**: 字符长度1-128 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [vulId] **参数解释**: 漏洞ID **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 漏洞处置状态 **约束限制**: 不涉及 **取值范围**: - handled : 已处理 - unhandled : 未处理  **默认取值**: 不涉及 
     * @param {string} [containerId] **参数解释**: 存在漏洞的容器ID **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {boolean} [isContainer] **参数解释**: 是否是容器场景 **约束限制**: 不涉及 **取值范围**: - true：是容器场景 - false：不是容器场景  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHostApps(listVulHostAppsRequest?: ListVulHostAppsRequest): Promise<ListVulHostAppsResponse> {
        const options = ParamCreater().listVulHostApps(listVulHostAppsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询可回滚的备份列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询可回滚的备份列表
     * @param {string} vulId **参数解释**: 漏洞ID **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} hostId **参数解释**: 主机ID **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHostBackups(listVulHostBackupsRequest?: ListVulHostBackupsRequest): Promise<ListVulHostBackupsResponse> {
        const options = ParamCreater().listVulHostBackups(listVulHostBackupsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询受影响服务器详情-进程列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询受影响服务器详情-进程列表
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [appName] **参数解释**： 软件名称 **约束限制**： 不涉及 **取值范围**： 字符长度0-256位 **默认取值**： 不涉及 
     * @param {string} [handleStatus] **参数解释**: 处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled：未处理。 - handled：已处理。  **默认取值**: 不涉及 
     * @param {string} [containerId] **参数解释**： 受影响容器ID **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHostProcess(listVulHostProcessRequest?: ListVulHostProcessRequest): Promise<ListVulHostProcessResponse> {
        const options = ParamCreater().listVulHostProcess(listVulHostProcessRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询处理对应的主机存储库的列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询处理对应的主机存储库的列表
     * @param {string} backupInfoId **参数解释**: 本次漏洞处置对应的备份信息id **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHostVaults(listVulHostVaultsRequest?: ListVulHostVaultsRequest): Promise<ListVulHostVaultsResponse> {
        const options = ParamCreater().listVulHostVaults(listVulHostVaultsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 漏洞对应cve信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 漏洞对应cve信息
     * @param {string} vulId 漏洞ID
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {number} [limit] 每页显示数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulnerabilityCve(listVulnerabilityCveRequest?: ListVulnerabilityCveRequest): Promise<ListVulnerabilityCveResponse> {
        const options = ParamCreater().listVulnerabilityCve(listVulnerabilityCveRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询弱口令检测结果列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询弱口令检测结果列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 服务器IP地址 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [userName] **参数解释**: 弱口令账号名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-32位 **默认取值**: 不涉及 
     * @param {string} [hostId] **参数解释**: 主机ID，不赋值时，查租户所有主机 **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWeakPasswordUsers(listWeakPasswordUsersRequest?: ListWeakPasswordUsersRequest): Promise<ListWeakPasswordUsersResponse> {
        const options = ParamCreater().listWeakPasswordUsers(listWeakPasswordUsersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-左侧WebAppAndService名称树信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-左侧WebAppAndService名称树信息
     * @param {string} name WebAppAndService资产名称
     * @param {string} category 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} catalogue 资产类型 - web-app       web应用 - web-service   web服务 - database      数据库
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebAppAndServiceStatistics(listWebAppAndServiceStatisticsRequest?: ListWebAppAndServiceStatisticsRequest): Promise<ListWebAppAndServiceStatisticsResponse> {
        const options = ParamCreater().listWebAppAndServiceStatistics(listWebAppAndServiceStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-右侧WebAppAndService资产信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-右侧WebAppAndService资产信息
     * @param {string} name WebAppAndService资产的名称
     * @param {string} category 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} catalogue 资产类型 - web-app：web应用 - web-service：web服务 - database：数据库
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostName] 服务器名称(可选)，可让用户根据主机名字搜索
     * @param {string} [hostId] 服务器id(可选)，可让用户根据主机id搜索
     * @param {string} [hostIp] 服务器ip(可选)，可让用户根据主机ip搜索
     * @param {string} [version] WebAppAndService资产版本，可让用户根据版本搜索
     * @param {string} [installDir] WebAppAndService资产安装目录，可让用户根据安装目录搜索
     * @param {boolean} [partMatch] 是否模糊匹配，默认false表示精确匹配
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebAppAndServices(listWebAppAndServicesRequest?: ListWebAppAndServicesRequest): Promise<ListWebAppAndServicesResponse> {
        const options = ParamCreater().listWebAppAndServices(listWebAppAndServicesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-Web框架的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-Web框架的服务器列表
     * @param {string} category 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [fileName] 文件名称
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostIp] 服务器IP
     * @param {boolean} [partMatch] 是否模糊匹配，默认false表示精确匹配
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebFrameworkHostInfo(listWebFrameworkHostInfoRequest?: ListWebFrameworkHostInfoRequest): Promise<ListWebFrameworkHostInfoResponse> {
        const options = ParamCreater().listWebFrameworkHostInfo(listWebFrameworkHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-主机管理-指纹类型-Web框架
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-主机管理-指纹类型-Web框架
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host : 主机 - container : 容器  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [fileName] **参数解释**: 文件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebFrameworkInfo(listWebFrameworkInfoRequest?: ListWebFrameworkInfoRequest): Promise<ListWebFrameworkInfoResponse> {
        const options = ParamCreater().listWebFrameworkInfo(listWebFrameworkInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-Web框架左侧树
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-Web框架左侧树
     * @param {string} category 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [fileName] 框架文件名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebFrameworkStatistics(listWebFrameworkStatisticsRequest?: ListWebFrameworkStatisticsRequest): Promise<ListWebFrameworkStatisticsResponse> {
        const options = ParamCreater().listWebFrameworkStatistics(listWebFrameworkStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-Web站点的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-Web站点的服务器列表
     * @param {string} category 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} domain 域名
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostIp] 服务器IP
     * @param {boolean} [partMatch] 是否模糊匹配，默认false表示精确匹配
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebSiteHostInfo(listWebSiteHostInfoRequest?: ListWebSiteHostInfoRequest): Promise<ListWebSiteHostInfoResponse> {
        const options = ParamCreater().listWebSiteHostInfo(listWebSiteHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-主机管理-指纹类型-Web站点
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-主机管理-指纹类型-Web站点
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 类别 **约束限制**: 不涉及 **取值范围**: - host : 主机 - container : 容器  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [domain] **参数解释**: 域名 **约束限制**: 不涉及 **取值范围**: 字符长度1-256 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebSiteInfo(listWebSiteInfoRequest?: ListWebSiteInfoRequest): Promise<ListWebSiteInfoResponse> {
        const options = ParamCreater().listWebSiteInfo(listWebSiteInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-资产指纹-Web站点左侧树
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-资产指纹-Web站点左侧树
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [domain] 域名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebSiteStatistics(listWebSiteStatisticsRequest?: ListWebSiteStatisticsRequest): Promise<ListWebSiteStatisticsResponse> {
        const options = ParamCreater().listWebSiteStatistics(listWebSiteStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群下某一命名空间下的工作负载
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群下某一命名空间下的工作负载
     * @param {string} clusterId 集群id
     * @param {string} namespace 命名空间
     * @param {string} workloadType 工作负载类型，包含如下：   - deployments：无状态负载   - statefulsets：有状态负载   - daemonsets：守护进程表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWorkLoads(listWorkLoadsRequest?: ListWorkLoadsRequest): Promise<ListWorkLoadsResponse> {
        const options = ParamCreater().listWorkLoads(listWorkLoadsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 编辑动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 编辑动态端口蜜罐策略
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {HoneypotPortPolicyContent} modifyDecoyPortPolicyRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public modifyDecoyPortPolicy(modifyDecoyPortPolicyRequest?: ModifyDecoyPortPolicyRequest): Promise<ModifyDecoyPortPolicyResponse> {
        const options = ParamCreater().modifyDecoyPortPolicy(modifyDecoyPortPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除告警白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除告警白名单
     * @param {RemoveAlarmWhiteListRequestInfo} removeAlarmWhiteListRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public removeAlarmWhiteList(removeAlarmWhiteListRequest?: RemoveAlarmWhiteListRequest): Promise<RemoveAlarmWhiteListResponse> {
        const options = ParamCreater().removeAlarmWhiteList(removeAlarmWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除登录白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除登录白名单
     * @param {RemoveLoginWhiteListRequestInfo} removeLoginWhiteListRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public removeLoginWhiteList(removeLoginWhiteListRequest?: RemoveLoginWhiteListRequest): Promise<RemoveLoginWhiteListResponse> {
        const options = ParamCreater().removeLoginWhiteList(removeLoginWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除系统用户白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除系统用户白名单
     * @param {RemoveSystemUserWhiteListRequestInfo} removeSystemUserWhiteListRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public removeSystemUserWhiteList(removeSystemUserWhiteListRequest?: RemoveSystemUserWhiteListRequest): Promise<RemoveSystemUserWhiteListResponse> {
        const options = ParamCreater().removeSystemUserWhiteList(removeSystemUserWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 用备份进行回滚
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 用备份进行回滚
     * @param {string} backupId **参数解释**: 备份id **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public restoreVulHostBackup(restoreVulHostBackupRequest?: RestoreVulHostBackupRequest): Promise<RestoreVulHostBackupResponse> {
        const options = ParamCreater().restoreVulHostBackup(restoreVulHostBackupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 采集单主机资产指纹
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 采集单主机资产指纹
     * @param {string} type 资产类型 - web-app：web应用 - web-service：web服务 - web-framework：web框架 - web-site：web站点  - midware：中间件 - database：数据库 - kernel-module：内核模块
     * @param {string} hostId 主机ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public runHostAssetManualCollect(runHostAssetManualCollectRequest?: RunHostAssetManualCollectRequest): Promise<RunHostAssetManualCollectResponse> {
        const options = ParamCreater().runHostAssetManualCollect(runHostAssetManualCollectRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 从SWR服务同步镜像列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 从SWR服务同步镜像列表
     * @param {RunImageSynchronizeRequestInfo} runImageSynchronizeRequestBody request
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public runImageSynchronize(runImageSynchronizeRequest?: RunImageSynchronizeRequest): Promise<RunImageSynchronizeResponse> {
        const options = ParamCreater().runImageSynchronize(runImageSynchronizeRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 设置提示信息配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 设置提示信息配置
     * @param {SetMalwareRemindersRequestBody} setMalwareRemindersRequestBody 设置提示信息配置
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setMalwareReminders(setMalwareRemindersRequest?: SetMalwareRemindersRequest): Promise<SetMalwareRemindersResponse> {
        const options = ParamCreater().setMalwareReminders(setMalwareRemindersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 设置双因子登录配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 设置双因子登录配置
     * @param {SetTwoFactorLoginConfigRequestBody} setTwoFactorLoginConfigRequestBody set two factor login config
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setTwoFactorLoginConfig(setTwoFactorLoginConfigRequest?: SetTwoFactorLoginConfigRequest): Promise<SetTwoFactorLoginConfigResponse> {
        const options = ParamCreater().setTwoFactorLoginConfig(setTwoFactorLoginConfigRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-概览-资产状态-主机Agent状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-概览-资产状态-主机Agent状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAgentStatisticsStatus(showAgentStatisticsStatusRequest?: ShowAgentStatisticsStatusRequest): Promise<ShowAgentStatisticsStatusResponse> {
        const options = ParamCreater().showAgentStatisticsStatus(showAgentStatisticsStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询应用防护开启状态：查询单台服务器的应用防护功能开启状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询应用防护开启状态
     * @param {string} hostId host id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {'java'} [appType] 应用类型，包含如下1种。   - java ：java类型应用防护。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAppRaspSwitchStatus(showAppRaspSwitchStatusRequest?: ShowAppRaspSwitchStatusRequest): Promise<ShowAppRaspSwitchStatusResponse> {
        const options = ParamCreater().showAppRaspSwitchStatus(showAppRaspSwitchStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产统计信息，账号、端口、进程等
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 统计资产信息，账号、端口、进程等
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**： 主机ID **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {string} [category] **参数解释**: 类别，默认为host **约束限制**: 不涉及 **取值范围**: - host：主机 - container：容器  **默认取值**: host 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAssetStatistic(showAssetStatisticRequest?: ShowAssetStatisticRequest): Promise<ShowAssetStatisticResponse> {
        const options = ParamCreater().showAssetStatistic(showAssetStatisticRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询HSS存储库绑定的备份策略信息，确保已经购买了勒索防护存储库，可以从cbr云备份服务进行验证，确保已经存在HSS_projectid命名的存储库已经购买
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询HSS存储库绑定的备份策略信息
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showBackupPolicyInfo(showBackupPolicyInfoRequest?: ShowBackupPolicyInfoRequest): Promise<ShowBackupPolicyInfoResponse> {
        const options = ParamCreater().showBackupPolicyInfo(showBackupPolicyInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询基线扫描手动检测结果
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询基线扫描手动检测结果
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showBaselineScanStatus(showBaselineScanStatusRequest?: ShowBaselineScanStatusRequest): Promise<ShowBaselineScanStatusResponse> {
        const options = ParamCreater().showBaselineScanStatus(showBaselineScanStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询基线白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询基线白名单
     * @param {string} id 基线白名单id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showBaselineWhiteList(showBaselineWhiteListRequest?: ShowBaselineWhiteListRequest): Promise<ShowBaselineWhiteListResponse> {
        const options = ParamCreater().showBaselineWhiteList(showBaselineWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询配置检查项检测报告
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询配置检查项检测报告
     * @param {string} checkName **参数解释**: 配置检查（基线）的名称，例如SSH、CentOS 7、Windows **约束限制**: 不涉及 **取值范围**: 字符长度0-255位 **默认取值**: 不涉及
     * @param {string} checkType **参数解释**:  配置检查（基线）的类型,Linux系统支持的基线一般check_type和check_name相同,例如SSH、CentOS 7。 Windows系统支持的基线一般check_type和check_name不相同，例如check_name为Windows的配置检查（基线），它的check_type包含Windows Server 2019 R2、Windows Server 2016 R2等。check_type的值可以通过这个接口的返回数据获得：/v5/{project_id}/baseline/risk-configs **约束限制**: 不涉及 **取值范围**: 字符长度0-255位 **默认取值**: 不涉及
     * @param {string} checkRuleId **参数解释**:  检查项ID，值可以通过这个接口的返回数据获得：/v5/{project_id}/baseline/risk-config/{check_name}/check-rules **约束限制**: 不涉及 **取值范围**: 字符长度0-255位 **默认取值**: 不涉及
     * @param {string} standard **参数解释**: 标准类型 **约束限制**: 不涉及 **取值范围**: - cn_standard : 等保合规标准 - hw_standard : 云安全实践标准 **默认取值**: 不涉及
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 主机id **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showCheckRuleDetail(showCheckRuleDetailRequest?: ShowCheckRuleDetailRequest): Promise<ShowCheckRuleDetailResponse> {
        const options = ParamCreater().showCheckRuleDetail(showCheckRuleDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群资产统计数量
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群资产统计数量
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showClusterAssetStatistics(showClusterAssetStatisticsRequest?: ShowClusterAssetStatisticsRequest): Promise<ShowClusterAssetStatisticsResponse> {
        const options = ParamCreater().showClusterAssetStatistics(showClusterAssetStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群防护策略模板
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群组件防护策略模板
     * @param {string} policyTemplateId 策略模板ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showClusterProtectPolicyTemplate(showClusterProtectPolicyTemplateRequest?: ShowClusterProtectPolicyTemplateRequest): Promise<ShowClusterProtectPolicyTemplateResponse> {
        const options = ParamCreater().showClusterProtectPolicyTemplate(showClusterProtectPolicyTemplateRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 呈现某一端口详细信息，如本地端口：80，类型：TCP，危险程度：正常，端口描述：常用于SSH(SecureShell)-远程登录协议，用于安全登录文件传输（SCP，SFTP）及端口重新定向。
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 呈现某一端口详细信息
     * @param {number} port 端口号
     * @param {string} categoty 返回的资产类别 - 0: 主机 - 1: 容器
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showCommonPort(showCommonPortRequest?: ShowCommonPortRequest): Promise<ShowCommonPortResponse> {
        const options = ParamCreater().showCommonPort(showCommonPortRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器集群网络的网络信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器集群网络的网络信息
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showContainerNetworkInfo(showContainerNetworkInfoRequest?: ShowContainerNetworkInfoRequest): Promise<ShowContainerNetworkInfoResponse> {
        const options = ParamCreater().showContainerNetworkInfo(showContainerNetworkInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器节点防护总览数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器节点防护总览数据
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showContainerNodeStatistics(showContainerNodeStatisticsRequest?: ShowContainerNodeStatisticsRequest): Promise<ShowContainerNodeStatisticsResponse> {
        const options = ParamCreater().showContainerNodeStatistics(showContainerNodeStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-概览-资产状态-容器节点防护状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-概览-资产状态-容器节点防护状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showContainerProtectionStatus(showContainerProtectionStatusRequest?: ShowContainerProtectionStatusRequest): Promise<ShowContainerProtectionStatusResponse> {
        const options = ParamCreater().showContainerProtectionStatus(showContainerProtectionStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看动态端口蜜罐策略详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看动态端口蜜罐策略详情
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showDecoyPortPolicyDetails(showDecoyPortPolicyDetailsRequest?: ShowDecoyPortPolicyDetailsRequest): Promise<ShowDecoyPortPolicyDetailsResponse> {
        const options = ParamCreater().showDecoyPortPolicyDetails(showDecoyPortPolicyDetailsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询攻击标识分布统计列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询攻击标识分布统计列表
     * @param {string} region **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} category **参数解释**: 事件类别 **约束限制**: 必填 **取值范围**: - host : 主机安全事件 - container : 容器安全事件 - serverless : serverless场景安全事件  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [lastDays] **参数解释**: 查询时间范围天数，与自定义查询时间begin_time，end_time互斥。 **约束限制**: 不涉及 **取值范围**: 最小值1，最大值30 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**： 服务器名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [hostId] **参数解释**： 服务器ID **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [privateIp] **参数解释**： 服务器私有IP **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {string} [publicIp] **参数解释**： 服务器公网IP **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {string} [containerName] **参数解释**： 容器实例名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-512位 **默认取值**： 不涉及 
     * @param {number} [eventType] **参数解释**: 事件类型 **约束限制**: 不涉及 **取值范围**: - 1001：通用恶意软件 - 1002：病毒 - 1003：蠕虫 - 1004：木马 - 1005：僵尸网络 - 1006：后门 - 1010：Rootkit - 1011：勒索软件 - 1012：黑客工具 - 1015：Webshell - 1016：挖矿 - 1017：反弹Shell - 2001：一般漏洞利用 - 2012：远程代码执行 - 2047：Redis漏洞利用 - 2048：Hadoop漏洞利用 - 2049：MySQL漏洞利用 - 3002：文件提权 - 3003：进程提权 - 3004：关键文件变更 - 3005：文件/目录变更 - 3007：进程异常行为 - 3015：高危命令执行 - 3018：异常Shell - 3026：crontab提权 - 3027：Crontab可疑任务 - 3029：系统安全防护被禁用 - 3030：备份删除 - 3031：异常注册表操作 - 3036：容器镜像阻断 - 4002：暴力破解 - 4004：异常登录 - 4006：非法系统账号 - 4014：用户账号添加 - 4020：用户密码窃取 - 6002：端口扫描 - 6003：主机扫描 - 13001：Kubernetes事件删除 - 13002：Pod异常行为 - 13003：枚举用户信息 - 13004：绑定集群用户角色  **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**： 处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled：未处理 - handled：已处理  **默认取值**: 不涉及 
     * @param {string} [severity] **参数解释**： 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {Array<string>} [severityList] **参数解释**： 威胁等级 **约束限制**: 不涉及 **取值范围**: - Security：安全 - Low：低危 - Medium：中危 - High：高危 - Critical：危急  **默认取值**: 不涉及 
     * @param {string} [attackTag] **参数解释**： 攻击标识 **约束限制**: 不涉及 **取值范围**: - attack_success：攻击成功 - attack_attempt：攻击尝试 - attack_blocked：攻击被阻断 - abnormal_behavior：异常行为 - collapsible_host：主机失陷 - system_vulnerability：系统脆弱性  **默认取值**: 不涉及 
     * @param {string} [assetValue] **参数解释**： 资产重要性 **约束限制**: 不涉及 **取值范围**: - important：重要资产 - common：一般资产 - test：测试资产  **默认取值**: 不涉及 
     * @param {Array<string>} [tagList] 事件标签列表，例如:[\&quot;热点事件\&quot;]
     * @param {string} [attCk] **参数解释**： ATT&amp;CK攻击阶段 **约束限制**: 不涉及 **取值范围**: - Reconnaissance：侦察 - Initial Access：初始访问 - Execution：执行 - Persistence：持久化 - Privilege Escalation：权限提升 - Defense Evasion：防御绕过 - Credential Access：凭据访问 - Command and Control：命令与控制 - Impact：影响破坏  **默认取值**: 不涉及 
     * @param {string} [eventName] **参数解释**： 告警名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showEventAttackTag(showEventAttackTagRequest?: ShowEventAttackTagRequest): Promise<ShowEventAttackTagResponse> {
        const options = ParamCreater().showEventAttackTag(showEventAttackTagRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单主机资产指纹采集状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单主机资产指纹采集状态
     * @param {string} type 资产类型 - web-app：web应用 - web-service：web服务 - web-framework：web框架 - web-site：web站点  - midware：中间件 - database：数据库 - kernel-module：内核模块
     * @param {string} hostId 主机ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showHostAssetManualCollectStatus(showHostAssetManualCollectStatusRequest?: ShowHostAssetManualCollectStatusRequest): Promise<ShowHostAssetManualCollectStatusResponse> {
        const options = ParamCreater().showHostAssetManualCollectStatus(showHostAssetManualCollectStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-概览-资产状态-Agent状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-概览-资产状态-Agent状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showHostProtectionStatus(showHostProtectionStatusRequest?: ShowHostProtectionStatusRequest): Promise<ShowHostProtectionStatusResponse> {
        const options = ParamCreater().showHostProtectionStatus(showHostProtectionStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 容器资产-镜像统计
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 容器资产-镜像统计
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showImageAssetStatistics(showImageAssetStatisticsRequest?: ShowImageAssetStatisticsRequest): Promise<ShowImageAssetStatisticsResponse> {
        const options = ParamCreater().showImageAssetStatistics(showImageAssetStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像配置检查项检测报告
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像配置检查项检测报告
     * @param {string} imageType 镜像类型，包含如下:   - private_image : 私有镜像仓库   - shared_image : 共享镜像仓库   - local_image : 本地镜像   - instance_image : 企业镜像
     * @param {string} checkName 基线名称
     * @param {string} checkType 基线类型
     * @param {string} checkRuleId 检查项id
     * @param {string} standard 标准类型，包含如下:   - cn_standard : 等保合规标准   - hw_standard : 云安全实践标准
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [namespace] 组织名称（没有镜像相关信息时，表示查询所有镜像）
     * @param {string} [imageName] 镜像名称
     * @param {string} [imageVersion] 镜像版本名称
     * @param {string} [imageId] 镜像id
     * @param {string} [instanceId] 企业仓库实例ID，swr共享版无需使用该参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showImageCheckRuleDetail(showImageCheckRuleDetailRequest?: ShowImageCheckRuleDetailRequest): Promise<ShowImageCheckRuleDetailResponse> {
        const options = ParamCreater().showImageCheckRuleDetail(showImageCheckRuleDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器详细信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器详细信息
     * @param {string} containerId 容器ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showK8sContainerDetail(showK8sContainerDetailRequest?: ShowK8sContainerDetailRequest): Promise<ShowK8sContainerDetailResponse> {
        const options = ParamCreater().showK8sContainerDetail(showK8sContainerDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询pod详细信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询pod详细信息
     * @param {string} podName pod名称
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showK8sPodDetail(showK8sPodDetailRequest?: ShowK8sPodDetailRequest): Promise<ShowK8sPodDetailResponse> {
        const options = ParamCreater().showK8sPodDetail(showK8sPodDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器Kubernetes端点详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器Kubernetes端点详情
     * @param {string} id 端点id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showKubernetesEndpointInfo(showKubernetesEndpointInfoRequest?: ShowKubernetesEndpointInfoRequest): Promise<ShowKubernetesEndpointInfoResponse> {
        const options = ParamCreater().showKubernetesEndpointInfo(showKubernetesEndpointInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询容器Kubernetes服务详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询容器Kubernetes服务详情
     * @param {string} id 服务id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showKubernetesServiceInfo(showKubernetesServiceInfoRequest?: ShowKubernetesServiceInfoRequest): Promise<ShowKubernetesServiceInfoResponse> {
        const options = ParamCreater().showKubernetesServiceInfo(showKubernetesServiceInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询导出任务信息-按查询条件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询导出任务信息-按查询条件
     * @param {string} taskId 导出任务ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [exportTaskType] 导出任务类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showLatestExportTaskByType(showLatestExportTaskByTypeRequest?: ShowLatestExportTaskByTypeRequest): Promise<ShowLatestExportTaskByTypeResponse> {
        const options = ParamCreater().showLatestExportTaskByType(showLatestExportTaskByTypeRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取提示信息配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取提示信息配置
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showMalwareReminders(showMalwareRemindersRequest?: ShowMalwareRemindersRequest): Promise<ShowMalwareRemindersResponse> {
        const options = ParamCreater().showMalwareReminders(showMalwareRemindersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 集群网络策略总览
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 集群网络策略总览
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showNetworkStatistics(showNetworkStatisticsRequest?: ShowNetworkStatisticsRequest): Promise<ShowNetworkStatisticsResponse> {
        const options = ParamCreater().showNetworkStatistics(showNetworkStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-概览-资产状态-操作系统统计信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-概览-资产状态-操作系统统计信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showOsStatisticsInfo(showOsStatisticsInfoRequest?: ShowOsStatisticsInfoRequest): Promise<ShowOsStatisticsInfoResponse> {
        const options = ParamCreater().showOsStatisticsInfo(showOsStatisticsInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取页面通知信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取页面通知信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [pageLocation] **参数解释** 访问页面位置 **取值范围** - hostMgmt：主机管理-云服务器 - hostProtectQuota：主机管理-防护配额 - containerNodeList：容器管理-容器节点管理 - containerProtectQuota：容器管理-容器防护配额 - containerMirror：容器管理-容器镜像 - container：容器管理-容器 - clusterAgent：容器管理-集群Agent管理 - vulView：漏洞管理-漏洞视图 - vulHostView：漏洞管理-主机视图 - ransomwareProtection：勒索病毒防护 - policyMgmt：策略管理 - antiVirus：病毒查杀 - hostAlarm：安全告警事件-主机安全告警 - containerAlarm：安全告警事件-容器安全告警
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showPageNotices(showPageNoticesRequest?: ShowPageNoticesRequest): Promise<ShowPageNoticesResponse> {
        const options = ParamCreater().showPageNotices(showPageNoticesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询指定策略的总开关
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定策略的总开关
     * @param {string} enterpriseProjectId **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} policyName **参数解释**： 策略名称 **约束限制**： 不涉及 **取值范围**： - sp_feature：自保护策略。  **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showPolicySwitchStatus(showPolicySwitchStatusRequest?: ShowPolicySwitchStatusRequest): Promise<ShowPolicySwitchStatusResponse> {
        const options = ParamCreater().showPolicySwitchStatus(showPolicySwitchStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询产商品信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询产商品信息
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [siteCode] 站点信息：   - HWC_CN ：中国站   - HWC_HK ：国际站   - HWC_EU : 欧洲站
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showProductdataOfferingInfos(showProductdataOfferingInfosRequest?: ShowProductdataOfferingInfosRequest): Promise<ShowProductdataOfferingInfosResponse> {
        const options = ParamCreater().showProductdataOfferingInfos(showProductdataOfferingInfosRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 资产管理-概览-资产状态-防护配额统计信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 资产管理-概览-资产状态-防护配额统计信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showQuotaStatisticsInfo(showQuotaStatisticsInfoRequest?: ShowQuotaStatisticsInfoRequest): Promise<ShowQuotaStatisticsInfoResponse> {
        const options = ParamCreater().showQuotaStatisticsInfo(showQuotaStatisticsInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询防护策略详情：查询防护策略配置的相关检测规则信息，包含14种检测规则
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询防护策略详情
     * @param {string} enterpriseProjectId 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {string} policyId 策略ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showRaspPolicyDetail(showRaspPolicyDetailRequest?: ShowRaspPolicyDetailRequest): Promise<ShowRaspPolicyDetailResponse> {
        const options = ParamCreater().showRaspPolicyDetail(showRaspPolicyDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 防护数据统计：统计已添加防护服务器的数量以及近七天微服务RASP攻击数量
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 防护数据统计
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showRaspProtectStatistics(showRaspProtectStatisticsRequest?: ShowRaspProtectStatisticsRequest): Promise<ShowRaspProtectStatisticsResponse> {
        const options = ParamCreater().showRaspProtectStatistics(showRaspProtectStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询防护服务器java应用详情：查询防护服务器的java应用状态列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询防护服务器java应用详情
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {string} hostId 服务器ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [keyword] 搜索关键词
     * @param {number} [appProtectStatus] java单个应用防护状态，包含如下3种。 - 0 ：未防护。 - 1 ：防护失败。 - 2 ：防护成功。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showRaspServerDetail(showRaspServerDetailRequest?: ShowRaspServerDetailRequest): Promise<ShowRaspServerDetailResponse> {
        const options = ParamCreater().showRaspServerDetail(showRaspServerDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询配额信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询配额信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [version] **参数解释**： 主机开通的版本 **约束限制**: 不涉及 **取值范围**： 包含如下7种输入。 - hss.version.null ：无。 - hss.version.basic ：基础版。 - hss.version.advanced ：专业版。 - hss.version.enterprise ：企业版。 - hss.version.premium ：旗舰版。 - hss.version.wtp ：网页防篡改版。 - hss.version.container.enterprise：容器版。 **默认取值**: 不涉及
     * @param {string} [chargingMode] **参数解释**： 收费模式 **约束限制**: 不涉及 **取值范围**: - packet_cycle ：包年/包月。 - on_demand ：按需。 **默认取值**: 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showResourceQuotas(showResourceQuotasRequest?: ShowResourceQuotasRequest): Promise<ShowResourceQuotasResponse> {
        const options = ParamCreater().showResourceQuotas(showResourceQuotasRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询指定安全配置项的检查结果
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定安全配置项的检查结果
     * @param {string} checkName **参数解释**: 配置检查（基线）的名称，例如SSH、CentOS 7、Windows **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} standard **参数解释**: 标准类型 **约束限制**: 不涉及 **取值范围**: - cn_standard : 等保合规标准 - hw_standard : 云安全实践标准 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 主机ID，不赋值时，查租户所有主机 **约束限制**: 不涉及 **取值范围**: 字符长度0-64位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showRiskConfigDetail(showRiskConfigDetailRequest?: ShowRiskConfigDetailRequest): Promise<ShowRiskConfigDetailResponse> {
        const options = ParamCreater().showRiskConfigDetail(showRiskConfigDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单个备份策略信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单个备份策略信息
     * @param {string} policyId 备份策略ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showSingleBackupPolicyInfo(showSingleBackupPolicyInfoRequest?: ShowSingleBackupPolicyInfoRequest): Promise<ShowSingleBackupPolicyInfoResponse> {
        const options = ParamCreater().showSingleBackupPolicyInfo(showSingleBackupPolicyInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞处理对应主机的备份相关统计信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞处理对应主机的备份相关统计信息
     * @param {VulBackupStatisticsRequestInfo} showVulBackupStatisticsRequestBody 查询漏洞处理对应主机的备份相关统计信息的请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showVulBackupStatistics(showVulBackupStatisticsRequest?: ShowVulBackupStatisticsRequest): Promise<ShowVulBackupStatisticsResponse> {
        const options = ParamCreater().showVulBackupStatistics(showVulBackupStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 在主机试图中导出漏洞报告详细报告pdf格式
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 漏洞管理-主机视图-主机列表-导出报告
     * @param {VulReportRequestBody} showVulReportDataRequestBody 查询漏洞修复命令列表的请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showVulReportData(showVulReportDataRequest?: ShowVulReportDataRequest): Promise<ShowVulReportDataResponse> {
        const options = ParamCreater().showVulReportData(showVulReportDataRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启或关闭程序自动隔离查杀
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启或关闭程序自动隔离查杀
     * @param {ChangeAutoKillVirusStatusRequestInfo} startAutoKillVirusStatusRequestBody **参数解释**： 开启或关闭程序自动隔离查杀开关 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public startAutoKillVirusStatus(startAutoKillVirusStatusRequest?: StartAutoKillVirusStatusRequest): Promise<StartAutoKillVirusStatusResponse> {
        const options = ParamCreater().startAutoKillVirusStatus(startAutoKillVirusStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启勒索病毒防护，请保证该region有cbr云备份服务，勒索服务与云备份服务有关联关系
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启勒索病毒防护
     * @param {ProtectionInfoRequestInfo} startProtectionRequestBody 开启勒索病毒防护请求体
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public startProtection(startProtectionRequest?: StartProtectionRequest): Promise<StartProtectionResponse> {
        const options = ParamCreater().startProtection(startProtectionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 关闭勒索病毒防护
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 关闭勒索病毒防护
     * @param {CloseProtectionInfoRequestInfo} stopProtectionRequestBody 关闭勒索病毒防护请求体
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public stopProtection(stopProtectionRequest?: StopProtectionRequest): Promise<StopProtectionResponse> {
        const options = ParamCreater().stopProtection(stopProtectionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 操作集群防护模式
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 操作集群防护模式
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {SwitchClusterProtectionModeRequestBody} [switchClusterProtectionModeRequestBody] 操作集群防护请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchClusterProtectionMode(switchClusterProtectionModeRequest?: SwitchClusterProtectionModeRequest): Promise<SwitchClusterProtectionModeResponse> {
        const options = ParamCreater().switchClusterProtectionMode(switchClusterProtectionModeRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 切换防护状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 切换防护状态
     * @param {SwitchContainerHostsProtectStatusRequestInfo} switchContainerProtectStatusRequestBody 服务器列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchContainerProtectStatus(switchContainerProtectStatusRequest?: SwitchContainerProtectStatusRequest): Promise<SwitchContainerProtectStatusResponse> {
        const options = ParamCreater().switchContainerProtectStatus(switchContainerProtectStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 切换主机动态端口蜜罐策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 切换主机动态端口蜜罐策略
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} hostId 服务器ID,可填多个，通过,分隔
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchDecoyPortHostPolicy(switchDecoyPortHostPolicyRequest?: SwitchDecoyPortHostPolicyRequest): Promise<SwitchDecoyPortHostPolicyResponse> {
        const options = ParamCreater().switchDecoyPortHostPolicy(switchDecoyPortHostPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 切换防护状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 切换防护状态
     * @param {SwitchHostsProtectStatusRequestInfo} switchHostsProtectStatusRequestBody 服务器列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchHostsProtectStatus(switchHostsProtectStatusRequest?: SwitchHostsProtectStatusRequest): Promise<SwitchHostsProtectStatusResponse> {
        const options = ParamCreater().switchHostsProtectStatus(switchHostsProtectStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启/关闭应用防护，选择开启的防护策略，选择需要防护的服务器，下发防护策略，可传入端口号更新防护端口，关闭防护则清空策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启/关闭应用防护，更新防护端口
     * @param {SwitchRaspRequestInfo} switchRaspRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchRasp(switchRaspRequest?: SwitchRaspRequest): Promise<SwitchRaspResponse> {
        const options = ParamCreater().switchRasp(switchRaspRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步容器集群最新数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步容器集群最新数据
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncClusterList(syncClusterListRequest?: SyncClusterListRequest): Promise<SyncClusterListResponse> {
        const options = ParamCreater().syncClusterList(syncClusterListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步集群防护事件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步集群防护事件
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [clusterId] 集群ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncClusterProtectionEvent(syncClusterProtectionEventRequest?: SyncClusterProtectionEventRequest): Promise<SyncClusterProtectionEventResponse> {
        const options = ParamCreater().syncClusterProtectionEvent(syncClusterProtectionEventRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步集群下容器网络策略最新数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步集群下网络节点最新数据
     * @param {string} clusterId 集群ID
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncContainerNetworkNode(syncContainerNetworkNodeRequest?: SyncContainerNetworkNodeRequest): Promise<SyncContainerNetworkNodeResponse> {
        const options = ParamCreater().syncContainerNetworkNode(syncContainerNetworkNodeRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步集群下容器网络策略最新数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步集群下容器网络策略最新数据
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncContainerNetworkPolicyList(syncContainerNetworkPolicyListRequest?: SyncContainerNetworkPolicyListRequest): Promise<SyncContainerNetworkPolicyListResponse> {
        const options = ParamCreater().syncContainerNetworkPolicyList(syncContainerNetworkPolicyListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步集群下安全组策略最新数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步集群下安全组策略最新数据
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncSecurityGroupPolicies(syncSecurityGroupPoliciesRequest?: SyncSecurityGroupPoliciesRequest): Promise<SyncSecurityGroupPoliciesResponse> {
        const options = ParamCreater().syncSecurityGroupPolicies(syncSecurityGroupPoliciesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改存储库绑定的备份策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改存储库绑定的备份策略
     * @param {UpdateBackupPolicyRequestInfo} updateBackupPolicyInfoRequestBody 修改备份策略请求体
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateBackupPolicyInfo(updateBackupPolicyInfoRequest?: UpdateBackupPolicyInfoRequest): Promise<UpdateBackupPolicyInfoResponse> {
        const options = ParamCreater().updateBackupPolicyInfo(updateBackupPolicyInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 容器集群网络更新配置策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 容器集群网络更新配置策略
     * @param {string} clusterId 集群ID
     * @param {UpdateNetworkPolicy} updateContainerNetworkPolicyRequestBody 策略详细信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateContainerNetworkPolicy(updateContainerNetworkPolicyRequest?: UpdateContainerNetworkPolicyRequest): Promise<UpdateContainerNetworkPolicyResponse> {
        const options = ParamCreater().updateContainerNetworkPolicy(updateContainerNetworkPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改防护策略：修改防护策略内容，包含策略名称、相关规则开启状态、防护动作以及检测规则配置，同时给使用该策略的服务器下发新的策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改防护策略
     * @param {string} policyId 策略ID
     * @param {string} policyName 策略名称
     * @param {UpdatePolicyRequestBody} updatePolicyRequestBody 修改防护策略Body体
     * @param {string} [enterpriseProjectId] 企业项目ID，查询所有企业项目时填写：all_granted_eps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updatePolicy(updatePolicyRequest?: UpdatePolicyRequest): Promise<UpdatePolicyResponse> {
        const options = ParamCreater().updatePolicy(updatePolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改勒索防护策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改勒索防护策略
     * @param {UpdateProtectionPolicyInfoRequestInfo} updateProtectionPolicyRequestBody 需要修改的防护策略的请求体
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateProtectionPolicy(updateProtectionPolicyRequest?: UpdateProtectionPolicyRequest): Promise<UpdateProtectionPolicyResponse> {
        const options = ParamCreater().updateProtectionPolicy(updateProtectionPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 更新安全组策略(云原生网络模型)
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新安全组策略
     * @param {string} clusterId 集群id
     * @param {string} namespace 命名空间
     * @param {UpdateSecurityGroupPolicyRequestBody} updateSecurityGroupPolicyRequestBody 策略内容
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateSecurityGroupPolicy(updateSecurityGroupPolicyRequest?: UpdateSecurityGroupPolicyRequest): Promise<UpdateSecurityGroupPolicyResponse> {
        const options = ParamCreater().updateSecurityGroupPolicy(updateSecurityGroupPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改系统用户白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改系统用户白名单
     * @param {UpdateSystemUserWhiteListRequestInfo} updateSystemUserWhiteListRequestBody 系统用户白名单
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateSystemUserWhiteList(updateSystemUserWhiteListRequest?: UpdateSystemUserWhiteListRequest): Promise<UpdateSystemUserWhiteListResponse> {
        const options = ParamCreater().updateSystemUserWhiteList(updateSystemUserWhiteListRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改“病毒查杀按次计费”开关状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改“病毒查杀按次计费”开关状态
     * @param {ChangeAntivirusPayPerScanStatusRequestInfo} changeAntivirusPayPerScanStatusRequestBody 修改“病毒查杀按次计费”开关状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAntivirusPayPerScanStatus(changeAntivirusPayPerScanStatusRequest?: ChangeAntivirusPayPerScanStatusRequest): Promise<ChangeAntivirusPayPerScanStatusResponse> {
        const options = ParamCreater().changeAntivirusPayPerScanStatus(changeAntivirusPayPerScanStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 编辑自定义查杀策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 编辑自定义查杀策略
     * @param {ChangeAntivirusPolicyRequestInfo} changeAntivirusPolicyRequestBody 任务详情
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAntivirusPolicy(changeAntivirusPolicyRequest?: ChangeAntivirusPolicyRequest): Promise<ChangeAntivirusPolicyResponse> {
        const options = ParamCreater().changeAntivirusPolicy(changeAntivirusPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建付费病毒扫描任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建付费病毒扫描任务
     * @param {CreateAntiVirusPaidTaskRequestInfo} createAntiVirusPaidTaskRequestBody 任务详情
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAntiVirusPaidTask(createAntiVirusPaidTaskRequest?: CreateAntiVirusPaidTaskRequest): Promise<CreateAntiVirusPaidTaskResponse> {
        const options = ParamCreater().createAntiVirusPaidTask(createAntiVirusPaidTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建自定义查杀策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建自定义查杀策略
     * @param {CreateAntiVirusPolicyRequestBody} createAntiVirusPolicyRequestBody 任务详情
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAntiVirusPolicy(createAntiVirusPolicyRequest?: CreateAntiVirusPolicyRequest): Promise<CreateAntiVirusPolicyResponse> {
        const options = ParamCreater().createAntiVirusPolicy(createAntiVirusPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建病毒扫描任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建病毒扫描任务
     * @param {CreateAntiVirusTaskRequestInfo} createAntiVirusTaskRequestBody 任务详情
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAntiVirusTask(createAntiVirusTaskRequest?: CreateAntiVirusTaskRequest): Promise<CreateAntiVirusTaskResponse> {
        const options = ParamCreater().createAntiVirusTask(createAntiVirusTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除自定义查杀策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除自定义查杀策略
     * @param {DeleteAntivirusPolicyRequestInfo} deleteAntivirusPolicyRequestBody 任务详情
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteAntivirusPolicy(deleteAntivirusPolicyRequest?: DeleteAntivirusPolicyRequest): Promise<DeleteAntivirusPolicyResponse> {
        const options = ParamCreater().deleteAntivirusPolicy(deleteAntivirusPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 导出病毒扫描结果列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 导出病毒扫描结果列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {ExportAntiVirusResultRequestBody} exportAntiVirusResultRequestBody 导出数据的表头字段列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [handleStatus] 处置状态，包含如下:   - unhandled：未处理   - handled：已处理
     * @param {Array<string>} [severityList] 威胁等级，包含如下:   - Low：低危   - Medium：中危   - High：高危   - Critical：致命
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {string} [malwareName] 病毒名称
     * @param {string} [filePath] 文件路径
     * @param {number} [exportSize] 导出条数
     * @param {string} [fileHash] 文件hash，当前为sha256
     * @param {string} [taskName] 任务名称
     * @param {boolean} [manualIsolate] 是否使用手动隔离按钮
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportAntiVirusResult(exportAntiVirusResultRequest?: ExportAntiVirusResultRequest): Promise<ExportAntiVirusResultResponse> {
        const options = ParamCreater().exportAntiVirusResult(exportAntiVirusResultRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 处置病毒扫描结果
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 处置病毒扫描结果
     * @param {OperateAntiVirusResultRequestInfo} handleAntiVirusResultRequestBody 处置详情
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public handleAntiVirusResult(handleAntiVirusResultRequest?: HandleAntiVirusResultRequest): Promise<HandleAntiVirusResultResponse> {
        const options = ParamCreater().handleAntiVirusResult(handleAntiVirusResultRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询病毒查杀可选服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询病毒查杀可选服务器列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} scanType 任务类型，包含如下:   - quick ：快速扫描   - full : 全盘扫描   - custom : 自定义扫描
     * @param {string} startType 启动类型，包含如下:   - now ：立即启动   - period : 周期启动
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [groupId] 服务器组ID
     * @param {string} [policyId] 策略ID
     * @param {number} [nextStartTime] 下次启动时间，毫秒
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntiVirusHost(listAntiVirusHostRequest?: ListAntiVirusHostRequest): Promise<ListAntiVirusHostResponse> {
        const options = ParamCreater().listAntiVirusHost(listAntiVirusHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询付费病毒查杀服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询付费病毒查杀服务器列表
     * @param {string} scanType 任务类型，包含如下:   - quick ：快速扫描   - full：全盘扫描   - custom : 自定义扫描
     * @param {string} startType 启动类型，包含如下:   - now ：立即启动   - period : 周期启动
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [groupId] 服务器组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntiVirusPaidHosts(listAntiVirusPaidHostsRequest?: ListAntiVirusPaidHostsRequest): Promise<ListAntiVirusPaidHostsResponse> {
        const options = ParamCreater().listAntiVirusPaidHosts(listAntiVirusPaidHostsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询自定义查杀策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询自定义查杀策略列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [policyName] 策略名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntiVirusPolicy(listAntiVirusPolicyRequest?: ListAntiVirusPolicyRequest): Promise<ListAntiVirusPolicyResponse> {
        const options = ParamCreater().listAntiVirusPolicy(listAntiVirusPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询病毒扫描结果列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询病毒扫描结果列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [handleStatus] 处置状态，包含如下:   - unhandled：未处理   - handled：已处理
     * @param {Array<string>} [severityList] 威胁等级，包含如下:   - Low：低危   - Medium：中危   - High：高危   - Critical：致命
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {string} [malwareName] 病毒名称
     * @param {string} [filePath] 文件路径
     * @param {string} [fileHash] 文件hash，当前为sha256
     * @param {string} [taskName] 任务名称
     * @param {boolean} [manualIsolate] 是否使用手动隔离按钮
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntiVirusResult(listAntiVirusResultRequest?: ListAntiVirusResultRequest): Promise<ListAntiVirusResultResponse> {
        const options = ParamCreater().listAntiVirusResult(listAntiVirusResultRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看病毒扫描任务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看病毒扫描任务列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {boolean} whetherPaidTask 此次扫描任务是否付费
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [taskName] 任务名称
     * @param {number} [lastDays] 查询时间范围天数，与自定义查询时间begin_time，end_time互斥
     * @param {string} [beginTime] 自定义查询时间，与查询时间范围天数互斥，查询时间段的起始时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {string} [endTime] 自定义时间，查询时间段的终止时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {string} [taskStatus] 任务状态，包含如下4种   - scanning ：扫描中   - cancel ：已取消   - fail ：扫描失败   - finish ：已完成
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {Array<string>} [hostTaskStatus] 服务器扫描状态，包含如下4种   - scanning ：扫描中   - success ：扫描成功   - fail ：扫描失败   - cancel ：取消扫描
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAntiVirusTask(listAntiVirusTaskRequest?: ListAntiVirusTaskRequest): Promise<ListAntiVirusTaskResponse> {
        const options = ParamCreater().listAntiVirusTask(listAntiVirusTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询病毒查杀免费扫描次数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询病毒查杀免费扫描次数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAntivirusFreeQuota(showAntivirusFreeQuotaRequest?: ShowAntivirusFreeQuotaRequest): Promise<ShowAntivirusFreeQuotaResponse> {
        const options = ParamCreater().showAntivirusFreeQuota(showAntivirusFreeQuotaRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询“病毒查杀按次计费”开关状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询“病毒查杀按次计费”开关状态
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAntivirusPayPerScanStatus(showAntivirusPayPerScanStatusRequest?: ShowAntivirusPayPerScanStatusRequest): Promise<ShowAntivirusPayPerScanStatusResponse> {
        const options = ParamCreater().showAntivirusPayPerScanStatus(showAntivirusPayPerScanStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询病毒查杀统计信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询病毒查杀统计信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAntivirusStatistic(showAntivirusStatisticRequest?: ShowAntivirusStatisticRequest): Promise<ShowAntivirusStatisticResponse> {
        const options = ParamCreater().showAntivirusStatistic(showAntivirusStatisticRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 取消扫描任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 取消扫描任务
     * @param {SwitchAntivirusTaskRequestInfo} switchAntivirusTaskRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchAntivirusTask(switchAntivirusTaskRequest?: SwitchAntivirusTaskRequest): Promise<SwitchAntivirusTaskResponse> {
        const options = ParamCreater().switchAntivirusTask(switchAntivirusTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 白名单策略添加主机
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 白名单策略添加主机
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {AddAppWhitelistPolicyHostRequestInfo} addAppWhitelistPolicyHostRequestBody 白名单策略添加主机
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addAppWhitelistPolicyHost(addAppWhitelistPolicyHostRequest?: AddAppWhitelistPolicyHostRequest): Promise<AddAppWhitelistPolicyHostResponse> {
        const options = ParamCreater().addAppWhitelistPolicyHost(addAppWhitelistPolicyHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 新增进程白名单策略进程
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新增进程白名单策略进程
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {AddAppWhitelistPolicyProcessRequestInfo} addAppWhitelistPolicyProcessRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addAppWhitelistPolicyProcess(addAppWhitelistPolicyProcessRequest?: AddAppWhitelistPolicyProcessRequest): Promise<AddAppWhitelistPolicyProcessResponse> {
        const options = ParamCreater().addAppWhitelistPolicyProcess(addAppWhitelistPolicyProcessRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改白名单策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改白名单策略
     * @param {string} enterpriseProjectId **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {ChangeAppWhitelistPolicyRequestInfo} changeAppWhitelistPolicyRequestBody request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAppWhitelistPolicy(changeAppWhitelistPolicyRequest?: ChangeAppWhitelistPolicyRequest): Promise<ChangeAppWhitelistPolicyResponse> {
        const options = ParamCreater().changeAppWhitelistPolicy(changeAppWhitelistPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 标记进程白名单策略识别进程
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 标记进程白名单策略识别进程
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {ChangeAppWhitelistPolicyProcessStatusRequestInfo} changeAppWhitelistPolicyProcessStatusRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeAppWhitelistPolicyProcessStatus(changeAppWhitelistPolicyProcessStatusRequest?: ChangeAppWhitelistPolicyProcessStatusRequest): Promise<ChangeAppWhitelistPolicyProcessStatusResponse> {
        const options = ParamCreater().changeAppWhitelistPolicyProcessStatus(changeAppWhitelistPolicyProcessStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建白名单策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建白名单策略
     * @param {CreateAppWhitelistPolicyRequestInfo} createAppWhitelistPolicyRequestBody 策略详情
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAppWhitelistPolicy(createAppWhitelistPolicyRequest?: CreateAppWhitelistPolicyRequest): Promise<CreateAppWhitelistPolicyResponse> {
        const options = ParamCreater().createAppWhitelistPolicy(createAppWhitelistPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除白名单策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除白名单策略
     * @param {DeleteAppWhitelistPolicyRequestInfo} deleteAppWhitelistPolicyRequestBody 删除的策略信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteAppWhitelistPolicy(deleteAppWhitelistPolicyRequest?: DeleteAppWhitelistPolicyRequest): Promise<DeleteAppWhitelistPolicyResponse> {
        const options = ParamCreater().deleteAppWhitelistPolicy(deleteAppWhitelistPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 白名单策略删除主机
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 白名单策略删除主机
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {DeleteAppWhitelistPolicyHostRequestInfo} deleteAppWhitelistPolicyHostRequestBody 删除的策略信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteAppWhitelistPolicyHost(deleteAppWhitelistPolicyHostRequest?: DeleteAppWhitelistPolicyHostRequest): Promise<DeleteAppWhitelistPolicyHostResponse> {
        const options = ParamCreater().deleteAppWhitelistPolicyHost(deleteAppWhitelistPolicyHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单可疑进程
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单可疑进程
     * @param {number} beginTime 自定义查询时间，与查询时间范围天数互斥，查询时间段的起始时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {number} endTime 自定义查询时间，与查询时间范围天数互斥，查询时间段的起始时间，毫秒级时间戳，end_time减去begin_time小于等于2天，与查询时间范围天数互斥
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [lastDays] **参数解释**: 查询时间范围天数，与自定义查询时间begin_time，end_time互斥 **约束限制**: 不涉及 **取值范围**: 最小值1，最大值30 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**： 是否已处理 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistEvent(listAppWhitelistEventRequest?: ListAppWhitelistEventRequest): Promise<ListAppWhitelistEventResponse> {
        const options = ParamCreater().listAppWhitelistEvent(listAppWhitelistEventRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单可选服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单可选服务器列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [version] 主机防护版本
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [policyId] 策略ID
     * @param {string} [groupId] 服务器组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistHostStatus(listAppWhitelistHostStatusRequest?: ListAppWhitelistHostStatusRequest): Promise<ListAppWhitelistHostStatusResponse> {
        const options = ParamCreater().listAppWhitelistHostStatus(listAppWhitelistHostStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单策略列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单策略列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [policyName] 策略名称
     * @param {string} [policyType] **参数解释**： 进程白名单策略类型 **约束限制**: 不涉及 **取值范围**: - allow：允许指定/授权进程运行 - block：阻止潜在恶意软件运行  **默认取值**: 不涉及 
     * @param {string} [learningStatus] **参数解释**： 策略学习状态 **约束限制**: 不涉及 **取值范围**: - effecting：学习完成，策略生效 - learned：学习完成，待确认 - learning：学习中 - pause：暂停 - abnormal：学习异常  **默认取值**: 不涉及 
     * @param {boolean} [intercept] **参数解释**： 是否开启阻断 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistPolicy(listAppWhitelistPolicyRequest?: ListAppWhitelistPolicyRequest): Promise<ListAppWhitelistPolicyResponse> {
        const options = ParamCreater().listAppWhitelistPolicy(listAppWhitelistPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单策略关联主机列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单策略关联主机列表
     * @param {string} enterpriseProjectId **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [policyName] 策略名称
     * @param {string} [learningStatus] **策略学习状态**： 策略学习状态 **约束限制**: 不涉及 **取值范围**: - effecting：学习完成，策略生效 - learned：学习完成，待确认 - learning：学习中 - pause：暂停 - abnormal：学习异常  **默认取值**: 不涉及 
     * @param {boolean} [applyStatus] **策略学习状态**： 策略应用状态 **约束限制**: 不涉及 **取值范围**: - true：是 - false：否  **默认取值**: 不涉及 
     * @param {string} [assetValue] 资产重要性，包含如下3种   - important ：重要资产   - common ：一般资产   - test ：测试资产
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [osType] 操作系统类型，包含如下2种。   - Linux：Linux。   - Windows：Windows。
     * @param {string} [policyId] 策略ID
     * @param {string} [publicIp] 服务器公网IP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistPolicyHost(listAppWhitelistPolicyHostRequest?: ListAppWhitelistPolicyHostRequest): Promise<ListAppWhitelistPolicyHostResponse> {
        const options = ParamCreater().listAppWhitelistPolicyHost(listAppWhitelistPolicyHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单策略识别进程
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单策略识别进程
     * @param {string} enterpriseProjectId **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [processStatus] **参数解释**： 信任状态 **约束限制**: 不涉及 **取值范围**: - trust：可信 - suspicious：可疑 - malicious：未知 - unknown：未知  **默认取值**: 不涉及 
     * @param {string} [processType] **参数解释**： 进程类型 **约束限制**: 不涉及 **取值范围**: - system：系统程序 - interpretive：解释类程序 - normal：普通可执行程序  **默认取值**: 不涉及 
     * @param {string} [processName] **参数解释**： 进程名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {string} [processHash] **参数解释**： 进程hash **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {string} [processPath] **参数解释**： 进程路径 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [handleStatus] **参数解释**： 确认状态 **约束限制**: 不涉及 **取值范围**: - confirmed：已确认 - unconfirmed：未确认  **默认取值**: 不涉及 
     * @param {string} [osType] 操作系统类型，包含如下2种。   - Linux：Linux。   - Windows：Windows。
     * @param {string} [fileSigner] **参数解释**： 文件签名 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位 **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistPolicyProcess(listAppWhitelistPolicyProcessRequest?: ListAppWhitelistPolicyProcessRequest): Promise<ListAppWhitelistPolicyProcessResponse> {
        const options = ParamCreater().listAppWhitelistPolicyProcess(listAppWhitelistPolicyProcessRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单策略进程扩展列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单策略进程扩展列表
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAppWhitelistPolicyProcessExtend(listAppWhitelistPolicyProcessExtendRequest?: ListAppWhitelistPolicyProcessExtendRequest): Promise<ListAppWhitelistPolicyProcessExtendResponse> {
        const options = ParamCreater().listAppWhitelistPolicyProcessExtend(listAppWhitelistPolicyProcessExtendRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 统计agent版本不匹配主机数量
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 统计agent版本不匹配主机数量
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAppWhitelistAgentStatics(showAppWhitelistAgentStaticsRequest?: ShowAppWhitelistAgentStaticsRequest): Promise<ShowAppWhitelistAgentStaticsResponse> {
        const options = ParamCreater().showAppWhitelistAgentStatics(showAppWhitelistAgentStaticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询进程白名单策略详情
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询进程白名单策略详情
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAppWhitelistPolicy(showAppWhitelistPolicyRequest?: ShowAppWhitelistPolicyRequest): Promise<ShowAppWhitelistPolicyResponse> {
        const options = ParamCreater().showAppWhitelistPolicy(showAppWhitelistPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 应用白名单策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 应用白名单策略
     * @param {SwitchAppWhitelistPolicyHostRequestInfo} switchAppWhitelistPolicyHostRequestBody 应用白名单策略的主机列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchAppWhitelistPolicyHost(switchAppWhitelistPolicyHostRequest?: SwitchAppWhitelistPolicyHostRequest): Promise<SwitchAppWhitelistPolicyHostResponse> {
        const options = ParamCreater().switchAppWhitelistPolicyHost(switchAppWhitelistPolicyHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 操作白名单策略学习状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 操作白名单策略学习状态
     * @param {string} policyId **参数解释**： 策略ID **约束限制**： 必填 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {SwitchAppWhitelistPolicyLearnStatusRequestInfo} switchAppWhitelistPolicyLearnStatusRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public switchAppWhitelistPolicyLearnStatus(switchAppWhitelistPolicyLearnStatusRequest?: SwitchAppWhitelistPolicyLearnStatusRequest): Promise<SwitchAppWhitelistPolicyLearnStatusResponse> {
        const options = ParamCreater().switchAppWhitelistPolicyLearnStatus(switchAppWhitelistPolicyLearnStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询基线检查执行操作时影响的范围
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询基线检查执行操作时影响的范围
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {ListHandleAffectBaselineRequestBody} listHandleAffectBaselineRequestBody **参数解释** 查询基线检查执行操作时影响的范围的请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHandleAffectBaseline(listHandleAffectBaselineRequest?: ListHandleAffectBaselineRequest): Promise<ListHandleAffectBaselineResponse> {
        const options = ParamCreater().listHandleAffectBaseline(listHandleAffectBaselineRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 复制配置检测策略信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 复制配置检测策略信息
     * @param {CopyBaselinePolicyGroupRequestBody} copyBaselinePolicyGroupRequestBody 复制的策略组信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public copyBaselinePolicyGroup(copyBaselinePolicyGroupRequest?: CopyBaselinePolicyGroupRequest): Promise<CopyBaselinePolicyGroupResponse> {
        const options = ParamCreater().copyBaselinePolicyGroup(copyBaselinePolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询基线检测策略的基线目录信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询基线检测策略的基线目录信息
     * @param {string} supportOs **参数解释** 基线检查的操作系统 **约束限制** 不涉及 **取值范围** - Linux - Windows  **默认取值** Linux
     * @param {string} selectType **参数解释** 决定目录结构的顺序 **约束限制** 不涉及 **取值范围** - check_type : 二级目录为基线名称 - tag        : 二级目录为检查项的类型  **默认取值** 不涉及
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [groupId] **参数解释** 展示该策略组选中哪些检查项 **约束限制** 不涉及 **取值范围** 字符长度0-64位 **默认取值** 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showBaselineDirectory(showBaselineDirectoryRequest?: ShowBaselineDirectoryRequest): Promise<ShowBaselineDirectoryResponse> {
        const options = ParamCreater().showBaselineDirectory(showBaselineDirectoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 导出集群环境安全相关信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 导出集群环境安全相关信息
     * @param {string} riskType **参数解释**: 风险类型 **约束限制**: 不涉及 **取值范围**: - iac_risk: IaC风险。  **默认取值**: 不涉及 
     * @param {number} exportSize **参数解释**: 导出数据条数 **约束限制**: 不涉及 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @param {ExportRisksRequestBody} exportRisksRequestBody **参数解释**: 导出数据表头字段列表 **约束限制**: 不涉及 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportRisks(exportRisksRequest?: ExportRisksRequest): Promise<ExportRisksResponse> {
        const options = ParamCreater().exportRisks(exportRisksRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群风险影响的集群资源列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群风险影响的集群资源列表
     * @param {string} riskId 风险id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [clusterId] 集群id
     * @param {string} [resourceName] 资源名称
     * @param {string} [resourceType] 资源类型
     * @param {string} [namespace] 资源所属的命名空间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterRiskAffectResources(listClusterRiskAffectResourcesRequest?: ListClusterRiskAffectResourcesRequest): Promise<ListClusterRiskAffectResourcesResponse> {
        const options = ParamCreater().listClusterRiskAffectResources(listClusterRiskAffectResourcesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群风险列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群风险列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [riskType] 风险类型，包含如下   - risk_assessment : 风险评估   - benchmark ：安全合规
     * @param {string} [riskStatus] 风险状态，包含如下，该字段不传值则查询全部数据：   - risky：有风险
     * @param {string} [clusterId] 集群id
     * @param {string} [clusterName] 集群名称
     * @param {string} [riskName] 风险名称
     * @param {string} [riskLevel] 风险程度，包含如下   - high ：高危   - medium ：中危   - low ：低危   - tips ：提示
     * @param {string} [riskCategory] 风险分类，包含如下：   - control_plane：控制平面   - access_control：访问控制   - network：网络   - workload：工作负载   - secrets：密钥管理   - node_escape：节点逃逸
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listClusterRisks(listClusterRisksRequest?: ListClusterRisksRequest): Promise<ListClusterRisksResponse> {
        const options = ParamCreater().listClusterRisks(listClusterRisksRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群扫描统计数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群扫描统计数据
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showClusterScanStatistics(showClusterScanStatisticsRequest?: ShowClusterScanStatisticsRequest): Promise<ShowClusterScanStatisticsResponse> {
        const options = ParamCreater().showClusterScanStatistics(showClusterScanStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询项目配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询项目配置
     * @param {ListProjectConfigsRequestBody} listProjectConfigsRequestBody 查询配置请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listProjectConfigs(listProjectConfigsRequest?: ListProjectConfigsRequest): Promise<ListProjectConfigsResponse> {
        const options = ParamCreater().listProjectConfigs(listProjectConfigsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改项目配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改项目配置
     * @param {ModifyProjectConfigRequestBody} modifyProjectConfigsRequestBody 修改配置请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public modifyProjectConfigs(modifyProjectConfigsRequest?: ModifyProjectConfigsRequest): Promise<ModifyProjectConfigsResponse> {
        const options = ParamCreater().modifyProjectConfigs(modifyProjectConfigsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 保存用户访问记录
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 保存用户访问记录
     * @param {SaveBrowsingHistoryRequestInfo} saveBrowsingHistoryRequestBody 用户行为记录请求体消息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public saveBrowsingHistory(saveBrowsingHistoryRequest?: SaveBrowsingHistoryRequest): Promise<SaveBrowsingHistoryResponse> {
        const options = ParamCreater().saveBrowsingHistory(saveBrowsingHistoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 新增镜像仓库
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 新增镜像仓库
     * @param {AddRegistryRequestBody} addRegistryRequestBody 接入三方镜像仓请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addRegistry(addRegistryRequest?: AddRegistryRequest): Promise<AddRegistryResponse> {
        const options = ParamCreater().addRegistry(addRegistryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量卸载集群daemonset
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量卸载集群daemonset
     * @param {BatchDeleteDaemonsetRequestBody} batchDeleteAgentDaemonsetRequestBody 服务器列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchDeleteAgentDaemonset(batchDeleteAgentDaemonsetRequest?: BatchDeleteAgentDaemonsetRequest): Promise<BatchDeleteAgentDaemonsetResponse> {
        const options = ParamCreater().batchDeleteAgentDaemonset(batchDeleteAgentDaemonsetRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量删除镜像仓接入信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量删除镜像仓接入信息
     * @param {BatchDeleteRegistryRequestBody} batchDeleteRegistryRequestBody 批量删除三方镜像仓请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchDeleteRegistry(batchDeleteRegistryRequest?: BatchDeleteRegistryRequest): Promise<BatchDeleteRegistryResponse> {
        const options = ParamCreater().batchDeleteRegistry(batchDeleteRegistryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量升级集群daemonset
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量升级集群daemonset
     * @param {BatchUpdateDaemonsetRequestBody} batchUpgradeAgentDaemonsetRequestBody 服务器列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchUpgradeAgentDaemonset(batchUpgradeAgentDaemonsetRequest?: BatchUpgradeAgentDaemonsetRequest): Promise<BatchUpgradeAgentDaemonsetResponse> {
        const options = ParamCreater().batchUpgradeAgentDaemonset(batchUpgradeAgentDaemonsetRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建集群daemonset
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建集群daemonset
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {CreateDaemonsetRequestBody} [createAgentDaemonsetRequestBody] 服务器列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAgentDaemonset(createAgentDaemonsetRequest?: CreateAgentDaemonsetRequest): Promise<CreateAgentDaemonsetResponse> {
        const options = ParamCreater().createAgentDaemonset(createAgentDaemonsetRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建多云集群
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建多云集群
     * @param {MultiCloudClusterCreateRequestBody} createMultiCloudClustersRequestBody 多云集群的创建请求
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createMultiCloudClusters(createMultiCloudClustersRequest?: CreateMultiCloudClustersRequest): Promise<CreateMultiCloudClustersResponse> {
        const options = ParamCreater().createMultiCloudClusters(createMultiCloudClustersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除集群daemonset
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除集群daemonset
     * @param {string} clusterId **参数解释**:  集群id **约束限制**: 不涉及 **取值范围**: 长度范围1-256位 **默认取值**: 不涉及 
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [invokedService] **参数解释**: 调用服务，cce集成防护调用场景使用。 **约束限制**: 不涉及 **取值范围**: 包含以下两种： - hss：hss服务。 - cce：cce服务，cce集成防护调用需要传参cce。  **默认取值**: hss 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteAgentDaemonset(deleteAgentDaemonsetRequest?: DeleteAgentDaemonsetRequest): Promise<DeleteAgentDaemonsetResponse> {
        const options = ParamCreater().deleteAgentDaemonset(deleteAgentDaemonsetRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除CI/CD配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除CI/CD配置
     * @param {DeleteCicdConfigurationsRequestBody} deleteCicdConfigurationsRequestBody 删除cicd配置请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCicdConfigurations(deleteCicdConfigurationsRequest?: DeleteCicdConfigurationsRequest): Promise<DeleteCicdConfigurationsResponse> {
        const options = ParamCreater().deleteCicdConfigurations(deleteCicdConfigurationsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除镜像仓接入信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除镜像仓接入信息
     * @param {string} id **参数解释**： 镜像仓ID **约束限制**： 不涉及 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteRegistry(deleteRegistryRequest?: DeleteRegistryRequest): Promise<DeleteRegistryResponse> {
        const options = ParamCreater().deleteRegistry(deleteRegistryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建镜像安全报告信息导出任务（支持全量/批量导出）,支持导出恶意文件、软件信息、文件信息、敏感信息、软件合规、镜像构建指令风险。
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建镜像安全报告信息导出任务（支持全量/批量导出）
     * @param {ExportImageSecurityReportTaskRequestInfo} exportImageSecurityReportTaskRequestBody 导出镜像安全报告请求信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportImageSecurityReportTask(exportImageSecurityReportTaskRequest?: ExportImageSecurityReportTaskRequest): Promise<ExportImageSecurityReportTaskResponse> {
        const options = ParamCreater().exportImageSecurityReportTask(exportImageSecurityReportTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取镜像同步任务关联的镜像仓的信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取镜像同步任务关联的镜像仓的信息
     * @param {string} taskId **参数解释** 任务ID **约束限制** 不涉及 **取值范围** 字符长度1-64位  **默认取值** 不涉及
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [registryName] **参数解释**: 仓库名称 **取值范围**: 字符长度1-128位 
     * @param {string} [registryType] **参数解释**: 镜像仓类型，不传默认返回所有类型。如果要查询多个类型，可以使用逗号分隔。 **取值范围**: - Harbor harbor - Jfrog jfrog - SwrPrivate swr私有 - SwrShared  swr共享 - SwrEnterprise  swr企业 - Other  其他仓库 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [syncStatus] **参数解释** 同步状态 **约束限制** 不涉及 **取值范围** - finished ：同步完成。 - running ：正在同步。 - failed ：同步失败。  **默认取值** 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAssociateRegistries(listAssociateRegistriesRequest?: ListAssociateRegistriesRequest): Promise<ListAssociateRegistriesResponse> {
        const options = ParamCreater().listAssociateRegistries(listAssociateRegistriesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询cicd配置列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询cicd配置列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [cicdName] **参数解释** CI/CD名称 **约束限制** 不涉及 **取值范围** 字符长度0-128位  **默认取值** 不涉及
     * @param {string} [cicdId] **参数解释** CI/CD标识 **约束限制** 不涉及 **取值范围** 字符长度0-128位  **默认取值** 不涉及
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCicdConfigurations(listCicdConfigurationsRequest?: ListCicdConfigurationsRequest): Promise<ListCicdConfigurationsResponse> {
        const options = ParamCreater().listCicdConfigurations(listCicdConfigurationsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询多云集群
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询多云集群
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [clusterId] 集群id
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listMultiCloudClusters(listMultiCloudClustersRequest?: ListMultiCloudClustersRequest): Promise<ListMultiCloudClustersResponse> {
        const options = ParamCreater().listMultiCloudClusters(listMultiCloudClustersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取镜像仓列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取镜像仓列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [registryName] **参数解释**: 仓库名称 **取值范围**: 字符长度1-128位 
     * @param {string} [registryId] **参数解释**: 仓库ID **取值范围**: 字符长度1-64位 
     * @param {string} [registryType] **参数解释**: 镜像仓类型，不传默认返回所有类型。如果要查询多个类型，可以使用逗号分隔。 **取值范围**: - Harbor harbor - Jfrog jfrog - SwrPrivate swr私有 - SwrShared  swr共享 - SwrEnterprise  swr企业 - Other  其他仓库 
     * @param {string} [registryAddr] **参数解释**: 镜像仓地址 **取值范围**: 字符长度1-256位 
     * @param {string} [status] **参数解释**： 接入状态 **约束限制**： 不涉及 **取值范围**： - success：接入成功 - fail：接入异常 - accessing：接入中  **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRegistry(listRegistryRequest?: ListRegistryRequest): Promise<ListRegistryResponse> {
        const options = ParamCreater().listRegistry(listRegistryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像仓统计数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像仓统计数据
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [registryType] **参数解释**: 镜像仓类型，不传默认返回所有类型。如果要查询多个类型，可以使用逗号分隔。 **取值范围**: - Harbor harbor - Jfrog jfrog - SwrPrivate swr私有 - SwrShared  swr共享 - SwrEnterprise  swr企业 - Other  其他仓库 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listRegistryStatistics(listRegistryStatisticsRequest?: ListRegistryStatisticsRequest): Promise<ListRegistryStatisticsResponse> {
        const options = ParamCreater().listRegistryStatistics(listRegistryStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改CI/CD配置
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改CI/CD配置
     * @param {string} cicdId **参数解释** CI/CD标识 **约束限制** 不涉及 **取值范围** 字符长度0-128位  **默认取值** 不涉及
     * @param {ModifyCicdConfigurationRequestBody} modifyCicdConfigurationRequestBody 修改CI/CD配置请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public modifyCicdConfiguration(modifyCicdConfigurationRequest?: ModifyCicdConfigurationRequest): Promise<ModifyCicdConfigurationResponse> {
        const options = ParamCreater().modifyCicdConfiguration(modifyCicdConfigurationRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 解析多云集群的配置文件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 解析多云集群的配置文件
     * @param {MultiCloudClusterConfigRequestBody} parseMultiCloudClusterConfigRequestBody 多云集群的配置文件
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public parseMultiCloudClusterConfig(parseMultiCloudClusterConfigRequest?: ParseMultiCloudClusterConfigRequest): Promise<ParseMultiCloudClusterConfigResponse> {
        const options = ParamCreater().parseMultiCloudClusterConfig(parseMultiCloudClusterConfigRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除多云集群
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除多云集群
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public removeMultiCloudClusters(removeMultiCloudClustersRequest?: RemoveMultiCloudClustersRequest): Promise<RemoveMultiCloudClustersResponse> {
        const options = ParamCreater().removeMultiCloudClusters(removeMultiCloudClustersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取部署模板，在安装Daemonset的时候提供选择
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取部署模板
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAgentDaemonsetDeployTemplate(showAgentDaemonsetDeployTemplateRequest?: ShowAgentDaemonsetDeployTemplateRequest): Promise<ShowAgentDaemonsetDeployTemplateResponse> {
        const options = ParamCreater().showAgentDaemonsetDeployTemplate(showAgentDaemonsetDeployTemplateRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取集群daemonset信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取集群daemonset信息
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showAgentDaemonsetDetailInfo(showAgentDaemonsetDetailInfoRequest?: ShowAgentDaemonsetDetailInfoRequest): Promise<ShowAgentDaemonsetDetailInfoResponse> {
        const options = ParamCreater().showAgentDaemonsetDetailInfo(showAgentDaemonsetDetailInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询CI/CD配置信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询CI/CD配置信息
     * @param {string} cicdId **参数解释** CI/CD标识 **约束限制** 不涉及 **取值范围** 字符长度0-128位  **默认取值** 不涉及
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showCicdConfiguration(showCicdConfigurationRequest?: ShowCicdConfigurationRequest): Promise<ShowCicdConfigurationResponse> {
        const options = ParamCreater().showCicdConfiguration(showCicdConfigurationRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取镜像上传指令，上传的镜像是“镜像仓接入功能”和“镜像仓扫描功能”需要的组件
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取扫描组件镜像上传指令
     * @param {string} registryAddr **参数解释**： 镜像仓地址 **约束限制**： 网址/IP:端口。如：myharbor.com。 **取值范围**： 字符长度1-256位  **默认取值**： 不涉及 
     * @param {string} namespace **参数解释**： 镜像仓项目,用来指定扫描组件要上传到的镜像仓目录。 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位  **默认取值**： 不涉及 
     * @param {string} username **参数解释**： 用于登录镜像仓的用户名。 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位  **默认取值**： 不涉及 
     * @param {string} password **参数解释**： 用于登录镜像仓的密码。仅用于生成命令，HSS服务不会存储您的镜像仓密码。 **约束限制**： 不涉及 **取值范围**： 字符长度1-128位  **默认取值**： 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showImageUploadCommand(showImageUploadCommandRequest?: ShowImageUploadCommandRequest): Promise<ShowImageUploadCommandResponse> {
        const options = ParamCreater().showImageUploadCommand(showImageUploadCommandRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取多云集群的账号权限
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取多云集群的账号权限
     * @param {string} clusterId **参数解释**： 集群id **约束限制**： 不涉及 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showMultiCloudClusterAuth(showMultiCloudClusterAuthRequest?: ShowMultiCloudClusterAuthRequest): Promise<ShowMultiCloudClusterAuthResponse> {
        const options = ParamCreater().showMultiCloudClusterAuth(showMultiCloudClusterAuthRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取多云集群的上传镜像指令
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取多云集群的上传镜像指令
     * @param {string} imageRepo 镜像仓地址
     * @param {string} organization 组织名称
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {string} [plugType] **参数解释**: 插件类型 **约束限制**: 不涉及 **取值范围**: - docker: docker插件镜像 - agent: hostguard镜像 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showMultiCloudClusterImageCommand(showMultiCloudClusterImageCommandRequest?: ShowMultiCloudClusterImageCommandRequest): Promise<ShowMultiCloudClusterImageCommandResponse> {
        const options = ParamCreater().showMultiCloudClusterImageCommand(showMultiCloudClusterImageCommandRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取多云集群的代理安装脚本
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取多云集群的代理安装脚本
     * @param {string} clusterId 集群id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showMultiCloudClusterProxyScript(showMultiCloudClusterProxyScriptRequest?: ShowMultiCloudClusterProxyScriptRequest): Promise<ShowMultiCloudClusterProxyScriptResponse> {
        const options = ParamCreater().showMultiCloudClusterProxyScript(showMultiCloudClusterProxyScriptRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 同步多云集群的接入状态
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 同步多云集群的接入状态
     * @param {MultiCloudClusterSyncStatusRequestBody} syncMultiCloudClusterStatusRequestBody 多云集群的同步接入状态请求
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncMultiCloudClusterStatus(syncMultiCloudClusterStatusRequest?: SyncMultiCloudClusterStatusRequest): Promise<SyncMultiCloudClusterStatusResponse> {
        const options = ParamCreater().syncMultiCloudClusterStatus(syncMultiCloudClusterStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 更新集群daemonset
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新集群daemonset
     * @param {string} clusterId 集群id
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {UpdateDaemonsetRequestBody} [updateAgentDaemonsetRequestBody] 服务器列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateAgentDaemonset(updateAgentDaemonsetRequest?: UpdateAgentDaemonsetRequest): Promise<UpdateAgentDaemonsetResponse> {
        const options = ParamCreater().updateAgentDaemonset(updateAgentDaemonsetRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 更新多云集群
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新多云集群
     * @param {string} clusterId 集群id
     * @param {UpdateMultiCloudClusterRequestBody} updateMultiCloudClustersRequestBody 更新内容
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateMultiCloudClusters(updateMultiCloudClustersRequest?: UpdateMultiCloudClustersRequest): Promise<UpdateMultiCloudClustersResponse> {
        const options = ParamCreater().updateMultiCloudClusters(updateMultiCloudClustersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 编辑镜像仓接入信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 编辑镜像仓接入信息
     * @param {string} id **参数解释**： 仓库id **约束限制**： 不涉及 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {UpdateRegistryRequestBody} [updateRegistryRequestBody] 编辑镜像仓接入信息仓请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateRegistry(updateRegistryRequest?: UpdateRegistryRequest): Promise<UpdateRegistryResponse> {
        const options = ParamCreater().updateRegistry(updateRegistryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 变更文件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 变更文件列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {number} [beginTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {string} [fileName] 文件名称
     * @param {string} [filePath] 文件路径
     * @param {string} [changeType] 变更类型，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;registry\&quot; : 注册表   - \&quot;file\&quot; : 文件
     * @param {string} [changeCategory] 变更类别，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;modify\&quot; : 修改   - \&quot;add\&quot; : 新增   - \&quot;delete\&quot; : 删除
     * @param {string} [status] 状态，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;trust\&quot; : 可信   - \&quot;untrust\&quot; : 不可信   - \&quot;unknown\&quot; : 未知 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listFileEvents(listFileEventsRequest?: ListFileEventsRequest): Promise<ListFileEventsResponse> {
        const options = ParamCreater().listFileEvents(listFileEventsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 某个服务器变更文件信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 某个服务器变更文件信息
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [beginTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {string} [fileName] 文件名称
     * @param {string} [filePath] 文件路径
     * @param {string} [changeType] 变更类型，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;registry\&quot; : 注册表   - \&quot;file\&quot; : 文件
     * @param {string} [changeCategory] 变更类别，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;modify\&quot; : 修改   - \&quot;add\&quot; : 新增   - \&quot;delete\&quot; : 删除
     * @param {string} [status] 状态，包含如下:   - \&quot;all\&quot; : 全部   - \&quot;trust\&quot; : 可信   - \&quot;untrust\&quot; : 不可信   - \&quot;unknown\&quot; : 未知 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listFileHostEventDetails(listFileHostEventDetailsRequest?: ListFileHostEventDetailsRequest): Promise<ListFileHostEventDetailsResponse> {
        const options = ParamCreater().listFileHostEventDetails(listFileHostEventDetailsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 云服务器变更列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 云服务器变更列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [beginTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listFileHosts(listFileHostsRequest?: ListFileHostsRequest): Promise<ListFileHostsResponse> {
        const options = ParamCreater().listFileHosts(listFileHostsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取服务器文件统计信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取服务器文件统计信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [beginTime] **参数解释**: 开始时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {number} [endTime] **参数解释**: 结束时间，13位时间戳 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值9223372036854775807 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showFileStatistic(showFileStatisticRequest?: ShowFileStatisticRequest): Promise<ShowFileStatisticResponse> {
        const options = ParamCreater().showFileStatistic(showFileStatisticRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取iac文件风险路径列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取iac文件风险路径列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} fileId **参数解释**: 文件ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64  **默认取值**: 不涉及 
     * @param {string} ruleId **参数解释**: 风险检测规则ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [resourceName] 资源名称
     * @param {string} [resourceType] 资源类型
     * @param {string} [namespace] 资源所属的命名空间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listIacFileRiskPaths(listIacFileRiskPathsRequest?: ListIacFileRiskPathsRequest): Promise<ListIacFileRiskPathsResponse> {
        const options = ParamCreater().listIacFileRiskPaths(listIacFileRiskPathsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取iac文件风险列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取iac文件风险列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} fileId **参数解释**: 文件ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [riskName] 风险名称
     * @param {string} [riskLevel] **参数解释**: 风险程度 **约束限制**: 不涉及 **取值范围**: - high ：高危 - medium ：中危 - low ：低危 - tips ：提示  **默认取值**: 不涉及 
     * @param {string} [riskCategory] **参数解释**: 风险分类 **约束限制**: 不涉及 **取值范围**: k8s yaml的风险分类，包含如下：   - control_plane：控制平面   - access_control：访问控制   - network：网络   - workload：工作负载   - secrets：密钥管理   - node_escape：节点逃逸  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listIacFileRisks(listIacFileRisksRequest?: ListIacFileRisksRequest): Promise<ListIacFileRisksResponse> {
        const options = ParamCreater().listIacFileRisks(listIacFileRisksRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取iac文件列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取iac文件列表
     * @param {number} offset **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 不涉及 
     * @param {number} limit **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} scanType **参数解释**: 扫描方式 **约束限制**: 不涉及 **取值范围**: - manual_scan：手动扫描 - cicd_scan：cicd扫描 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [fileId] **参数解释**: 文件ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64  **默认取值**: 不涉及 
     * @param {string} [fileName] **参数解释**: 文件名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-512  **默认取值**: 不涉及 
     * @param {string} [fileType] **参数解释**: 文件类型 **约束限制**: 不涉及 **取值范围**: - dockerfile：Dockerfile文件 - k8s_yaml：k8s yaml文件  **默认取值**: 不涉及 
     * @param {boolean} [risky] **参数解释**: 是否有风险 **约束限制**: 不涉及 **取值范围**: - true：有风险 - false：无风险  **默认取值**: 不涉及 
     * @param {string} [cicdId] **约束限制**: 不涉及 **取值范围**: 字符长度1-128 **默认取值**: 不涉及 
     * @param {string} [cicdName] **参数解释**: CI/CD名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-128 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listIacFiles(listIacFilesRequest?: ListIacFilesRequest): Promise<ListIacFilesResponse> {
        const options = ParamCreater().listIacFiles(listIacFilesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 处置镜像漏洞
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 处置镜像漏洞
     * @param {HandleImageVulnerabilityRequestBody} handleImageVulnerabilityRequestBody 处置镜像漏洞的请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public handleImageVulnerability(handleImageVulnerabilityRequest?: HandleImageVulnerabilityRequest): Promise<HandleImageVulnerabilityResponse> {
        const options = ParamCreater().handleImageVulnerability(handleImageVulnerabilityRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像白名单列表，目前仅支持漏洞白名单
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像白名单列表
     * @param {string} globalImageType **参数解释**： 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像。 - registry：仓库镜像。  **默认取值**: 不涉及 
     * @param {string} type **参数解释**： 白名单类型 **约束限制**: 不涉及 **取值范围**: - vulnerability：漏洞白名单。  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [vulName] **参数解释**： 漏洞名称（只在查询漏洞白名单时使用） **约束限制**： 不涉及 **取值范围**： 字符长度0-256位 **默认取值**： 不涉及 
     * @param {string} [vulType] **参数解释**： 漏洞类型（只在查询漏洞白名单时使用） **约束限制**: 不涉及 **取值范围**: - linux_vul：linux漏洞。 - app_vul：应用漏洞。  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageWhiteLists(listImageWhiteListsRequest?: ListImageWhiteListsRequest): Promise<ListImageWhiteListsResponse> {
        const options = ParamCreater().listImageWhiteLists(listImageWhiteListsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看受漏洞影响的镜像列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看受漏洞影响的镜像列表
     * @param {boolean} isHandled **参数解释**: 查询已处理/未处理的镜像 **约束限制**: 不涉及 **取值范围**: - true：查询已处理的镜像 - false：查询未处理的镜像  **默认取值**: 不涉及 
     * @param {string} vulId **参数解释**: 漏洞id **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} type **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - app_vul：应用漏洞 - linux_vul：系统漏洞  **默认取值**: 不涉及 
     * @param {string} imageType **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：CI/CD镜像 - cluster：集群镜像  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [repairNecessity] **参数解释**: 危险程度 **约束限制**: 不涉及 **取值范围**: - Low：低危 - Medium：中危 - High：高危 - Critical：严重  **默认取值**: 不涉及 
     * @param {string} [imageId] **参数解释**: 镜像id **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [imageName] **参数解释**: 镜像名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [registryName] **参数解释**: 镜像仓名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [registryType] **参数解释**: 镜像仓类型 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 漏洞对应镜像的处理状态 **约束限制**: 不涉及 **取值范围**: - vul_status_unfix：未处理 - vul_status_ignored：已忽略  **默认取值**: 不涉及 
     * @param {string} [clusterId] **参数解释**: 集群id **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulAffectImages(listVulAffectImagesRequest?: ListVulAffectImagesRequest): Promise<ListVulAffectImagesResponse> {
        const options = ParamCreater().listVulAffectImages(listVulAffectImagesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询镜像白名单详情，需要分页查询白名单关联的镜像列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询镜像白名单详情
     * @param {string} id **参数解释**： 白名单ID **约束限制**： 不涉及 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} globalImageType **参数解释**： 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像。 - registry：仓库镜像。  **默认取值**: 不涉及 
     * @param {string} type **参数解释**： 白名单类型 **约束限制**: 不涉及 **取值范围**: - vulnerability：漏洞白名单。  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showImageWhiteListDetail(showImageWhiteListDetailRequest?: ShowImageWhiteListDetailRequest): Promise<ShowImageWhiteListDetailResponse> {
        const options = ParamCreater().showImageWhiteListDetail(showImageWhiteListDetailRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取扫描任务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取扫描任务列表
     * @param {string} type **参数解释**: 任务总类型 **约束限制**: 不涉及 **取值范围**: - image_sync：镜像同步。 - image_scan：镜像扫描。  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [globalImageType] **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像。 - registry：仓库镜像。  **默认取值**: 不涉及 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [taskType] **参数解释**: 任务细分类型 **约束限制**: 不涉及 **取值范围**: - cycle：定时扫描。 - manual：手动扫描。 - autoSync：定时同步。 - manualSync：手动同步。  **默认取值**: 不涉及 
     * @param {string} [taskName] **参数解释**： 模糊匹配任务名称 **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {string} [taskId] **参数解释**： 任务id **约束限制**： 不涉及 **取值范围**： 字符长度1-256位 **默认取值**： 不涉及 
     * @param {number} [createTime] **参数解释**： 任务创建时间，时间单位毫秒（ms） **约束限制**： 不涉及 **取值范围**： 最小值0，最大值4070880000000 **默认取值**： 不涉及 
     * @param {number} [endTime] **参数解释**： 任务结束时间，时间单位毫秒（ms） **约束限制**： 不涉及 **取值范围**： 最小值0，最大值4070880000000 **默认取值**： 不涉及 
     * @param {string} [taskStatus] **参数解释**: 任务情况 **约束限制**: 不涉及 **取值范围**: - scanning：扫描中。 - finished：完成。  **默认取值**: 不涉及 
     * @param {number} [scanScope] **参数解释**: 扫描风险类型 **约束限制**: 不涉及 **取值范围**: - 0：none。 - 0x7fffffff：全部。 - 0x000f0000：漏洞。 - 0x0000f000：基线检查。 - 0x00000f00：恶意文件。 - 0x000000f0：敏感信息。 - 0x0000000f：软件合规。  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listImageScanTask(listImageScanTaskRequest?: ListImageScanTaskRequest): Promise<ListImageScanTaskResponse> {
        const options = ParamCreater().listImageScanTask(listImageScanTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 复制策略组，选择已有的旗舰版或容器版策略组，复制生成新的策略组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 复制策略组
     * @param {AddPolicyGroupRequestInfo} addPolicyGroupRequestBody 复制的策略组信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public addPolicyGroup(addPolicyGroupRequest?: AddPolicyGroupRequest): Promise<AddPolicyGroupResponse> {
        const options = ParamCreater().addPolicyGroup(addPolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 为已经开启旗舰版或容器版防护的服务器部署策略组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 部署策略组
     * @param {AssociatePolicyGroupRequestInfo} associatePolicyGroupRequestBody request
     * @param {string} [region] **参数解释**: 区域ID，用于查询目的区域内的资产。获取方式请参见[获取区域ID](hss_02_0026.xml)。 **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public associatePolicyGroup(associatePolicyGroupRequest?: AssociatePolicyGroupRequest): Promise<AssociatePolicyGroupResponse> {
        const options = ParamCreater().associatePolicyGroup(associatePolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改策略组相关内容，如防护模式
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改策略组相关内容
     * @param {ChangePolicyGroupRequestInfo} changePolicyGroupRequestBody request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changePolicyGroup(changePolicyGroupRequest?: ChangePolicyGroupRequest): Promise<ChangePolicyGroupResponse> {
        const options = ParamCreater().changePolicyGroup(changePolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除策略组，支持删除非默认并且未关联服务器的策略组
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除策略组
     * @param {DeletePolicyGroupRequestInfo} deletePolicyGroupRequestBody 删除的策略组信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deletePolicyGroup(deletePolicyGroupRequest?: DeletePolicyGroupRequest): Promise<DeletePolicyGroupResponse> {
        const options = ParamCreater().deletePolicyGroup(deletePolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询策略组列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询策略组列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [groupName] **参数解释**: 策略组名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {boolean} [containerMode] **参数解释**: 是否只查询容器版策略组 **约束限制**: 不涉及 **取值范围**: - true: 只查询容器版策略组。注：当limit传参为200时，仅返回容器版策略组。 - false: 查询全部策略组。注：当limit传参为200时，仅返回旗舰版策略组。  **默认取值**: false 
     * @param {string} [groupId] **参数解释**: 策略组ID **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPolicyGroup(listPolicyGroupRequest?: ListPolicyGroupRequest): Promise<ListPolicyGroupResponse> {
        const options = ParamCreater().listPolicyGroup(listPolicyGroupRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 按需计费的防护配额转包年/包月过程中，会将防护配额锁定，已锁定的防护配额不支持转包年/包月，通过该接口可查询主机安全防护配额的锁定状态。
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询资源的锁定状态
     * @param {string} resourceId **参数解释**: 主机安全防护配额的资源ID **约束限制**: 仅支持查询项目ID与企业项目ID下防护配额资源的锁定状态 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listLockedStatus(listLockedStatusRequest?: ListLockedStatusRequest): Promise<ListLockedStatusResponse> {
        const options = ParamCreater().listLockedStatus(listLockedStatusRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询集群的安全体检报告信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询集群的安全体检报告信息
     * @param {string} reportId **参数解释**： 集群的安全体检报告ID **约束限制**： 不涉及 **取值范围**： 字符长度1-64位 **默认取值**： 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {'zh-cn' | 'en-us'} [xLanguage] language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showSecurityCheckClusterReport(showSecurityCheckClusterReportRequest?: ShowSecurityCheckClusterReportRequest): Promise<ShowSecurityCheckClusterReportResponse> {
        const options = ParamCreater().showSecurityCheckClusterReport(showSecurityCheckClusterReportRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建任务
     * @param {CreateTaskRequestBody} createTaskRequestBody 创建任务的请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createTask(createTaskRequest?: CreateTaskRequest): Promise<CreateTaskResponse> {
        const options = ParamCreater().createTask(createTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询当前任务关联的资源列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询当前任务关联的资源列表
     * @param {string} taskId 任务id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {ListTaskResourcesRequestBody} [listTaskResourcesRequestBody] 查询当前任务关联的资源列表的请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listTaskResources(listTaskResourcesRequest?: ListTaskResourcesRequest): Promise<ListTaskResourcesResponse> {
        const options = ParamCreater().listTaskResources(listTaskResourcesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询任务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询任务列表
     * @param {ListTasksRequestBody} listTasksRequestBody 查询任务列表的请求体
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listTasks(listTasksRequest?: ListTasksRequest): Promise<ListTasksResponse> {
        const options = ParamCreater().listTasks(listTasksRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询任务统计数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询任务统计数据
     * @param {string} taskType 任务类型，包含如下   - cluster_scan：集群扫描任务   - iac_scan：iac扫描任务
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showTaskStatistics(showTaskStatisticsRequest?: ShowTaskStatisticsRequest): Promise<ShowTaskStatisticsResponse> {
        const options = ParamCreater().showTaskStatistics(showTaskStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改漏洞扫描策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改漏洞扫描策略
     * @param {ChangeVulScanPolicyRequestInfo} changeVulScanPolicyRequestBody 修改漏洞扫描策略的请求体
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public changeVulScanPolicy(changeVulScanPolicyRequest?: ChangeVulScanPolicyRequest): Promise<ChangeVulScanPolicyResponse> {
        const options = ParamCreater().changeVulScanPolicy(changeVulScanPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建漏洞扫描任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建漏洞扫描任务
     * @param {ManualVulScanRequestInfo} createVulnerabilityScanTaskRequestBody 手动检测漏洞请求体
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createVulnerabilityScanTask(createVulnerabilityScanTaskRequest?: CreateVulnerabilityScanTaskRequest): Promise<CreateVulnerabilityScanTaskResponse> {
        const options = ParamCreater().createVulnerabilityScanTask(createVulnerabilityScanTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建历史处理的漏洞导出任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建历史处理的漏洞导出任务
     * @param {ExportHandledVulnerabilitiesRequestBody} exportHandledVulnerabilitiesRequestBody 导出数据的表头字段列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportHandledVulnerabilities(exportHandledVulnerabilitiesRequest?: ExportHandledVulnerabilitiesRequest): Promise<ExportHandledVulnerabilitiesResponse> {
        const options = ParamCreater().exportHandledVulnerabilities(exportHandledVulnerabilitiesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 创建漏洞处置历史记录的导出任务
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建漏洞处置历史记录的导出任务
     * @param {ExportVulHandleHistoryRequestBody} exportVulHandleHistoryRequestBody 创建导出任务的参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportVulHandleHistory(exportVulHandleHistoryRequest?: ExportVulHandleHistoryRequest): Promise<ExportVulHandleHistoryResponse> {
        const options = ParamCreater().exportVulHandleHistory(exportVulHandleHistoryRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 导出漏洞及漏洞影响的主机的相关信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 导出漏洞及漏洞影响的主机的相关信息
     * @param {number} exportSize 导出数据条数
     * @param {string} category 导出漏洞数据类别:   - vul ：漏洞   - host: 主机漏洞
     * @param {ExportVulRequestBody} exportVulsRequestBody 导出数据的表头字段列表
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [type] 漏洞类型，包含如下：   -linux_vul : linux漏洞   -windows_vul : windows漏洞   -web_cms : Web-CMS漏洞   -app_vul : 应用漏洞   -urgent_vul : 应急漏洞
     * @param {string} [vulId] 漏洞ID
     * @param {string} [vulName] 漏洞名称
     * @param {string} [hostId] 主机id，导出单台主机漏洞时会用到
     * @param {number} [limit] limit
     * @param {number} [offset] 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {string} [repairPriority] 修复优先级 Critical：紧急 High：高 Medium：中 Low：低
     * @param {string} [handleStatus] 处置状态，包含如下:   - unhandled ：未处理   - handled : 已处理
     * @param {string} [cveId] 漏洞编号
     * @param {string} [labelList] 漏洞标签
     * @param {string} [status] 漏洞状态
     * @param {string} [assetValue] 资产重要性 important common test
     * @param {string} [groupName] 服务器组名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportVuls(exportVulsRequest?: ExportVulsRequest): Promise<ExportVulsResponse> {
        const options = ParamCreater().exportVuls(exportVulsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单台服务器漏洞信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单台服务器漏洞信息
     * @param {string} hostId **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [type] **参数解释**: 查询的漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul   : linux漏洞 - windows_vul : windows漏洞 - web_cms     : Web-CMS漏洞 - app_vul     : 应用漏洞 - urgent_vul  : 应急漏洞  **默认取值**: linux_vul : linux漏洞 
     * @param {string} [vulName] **参数解释**: 漏洞名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 漏洞当前的处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled ：未处理 - handled : 已处理  **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 漏洞当前的漏洞状态 **约束限制**: 不涉及 **取值范围**: - vul_status_unfix            : 未处理 - vul_status_ignored          : 已忽略 - vul_status_verified         : 验证中 - vul_status_fixing           : 修复中 - vul_status_fixed            : 修复成功 - vul_status_reboot           : 修复成功待重启 - vul_status_failed           : 修复失败 - vul_status_fix_after_reboot : 请重启主机再次修复  **默认取值**: 不涉及 
     * @param {string} [repairPriority] **参数解释**: 漏洞修复优先级 **约束限制**: 不涉及 **取值范围**: - Critical : 紧急  - High     : 高  - Medium   : 中  - Low      : 低  **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHostVuls(listHostVulsRequest?: ListHostVulsRequest): Promise<ListHostVulsResponse> {
        const options = ParamCreater().listHostVuls(listHostVulsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单个漏洞影响的容器app信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单个漏洞影响的容器app信息
     * @param {string} containerId 受影响容器id
     * @param {string} vulId 漏洞ID
     * @param {string} handleStatus 漏洞的处理状态，包含如下：   -unhandled : 未处理   -handled : 已处理
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] 每页条数
     * @param {number} [offset] 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulContainerApps(listVulContainerAppsRequest?: ListVulContainerAppsRequest): Promise<ListVulContainerAppsResponse> {
        const options = ParamCreater().listVulContainerApps(listVulContainerAppsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单个漏洞影响的容器信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单个漏洞影响的容器信息
     * @param {string} vulId 漏洞ID
     * @param {string} type 漏洞类型   - linux_vul : 漏洞类型-linux漏洞   - windows_vul : 漏洞类型-windows漏洞   - web_cms : Web-CMS漏洞   - app_vul : 应用漏洞   - urgent_vul : 应急漏洞
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [containerName] 受影响容器名称
     * @param {string} [clusterId] 集群ID
     * @param {string} [status] 漏洞状态   - vul_status_unfix : 未处理   - vul_status_ignored : 已忽略   - vul_status_verified : 验证中   - vul_status_fixing : 修复中   - vul_status_fixed : 修复成功   - vul_status_reboot : 修复成功待重启   - vul_status_failed : 修复失败   - vul_status_fix_after_reboot : 请重启主机再次修复
     * @param {string} [handleStatus] 处置状态，包含如下:   - unhandled ：未处理   - handled : 已处理
     * @param {string} [severityLevel] 危险程度 ，Critical，High，Medium，Low
     * @param {number} [minScanTime] 首次扫描时间最小值
     * @param {number} [maxScanTime] 首次扫描时间最大值
     * @param {number} [limit] 每页条数
     * @param {number} [offset] 偏移量：指定返回记录的开始位置，必须为数字，取值范围为大于或等于0，默认0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulContainers(listVulContainersRequest?: ListVulContainersRequest): Promise<ListVulContainersResponse> {
        const options = ParamCreater().listVulContainers(listVulContainersRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询单个漏洞影响的云服务器信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单个漏洞影响的云服务器信息
     * @param {string} vulId **参数解释**: 漏洞ID **约束限制**: 不涉及 **取值范围**: 字符范围0-64 **默认取值**: 不涉及 
     * @param {string} type **参数解释**: 查询的漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul   : linux漏洞 - windows_vul : windows漏洞 - web_cms     : Web-CMS漏洞 - app_vul     : 应用漏洞 - urgent_vul  : 应急漏洞  **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [hostIp] **参数解释**: 主机IP **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 漏洞当前的漏洞状态 **约束限制**: 不涉及 **取值范围**: - vul_status_unfix            : 未处理 - vul_status_ignored          : 已忽略 - vul_status_verified         : 验证中 - vul_status_fixing           : 修复中 - vul_status_fixed            : 修复成功 - vul_status_reboot           : 修复成功待重启 - vul_status_failed           : 修复失败 - vul_status_fix_after_reboot : 请重启主机再次修复  **默认取值**: 不涉及 
     * @param {string} [assetValue] **参数解释**: 资产重要性 **约束限制**: 不涉及 **取值范围**: - important : 重要 - common    : 一般 - test      : 测试  **默认取值**: 不涉及 
     * @param {string} [groupName] **参数解释**: 服务器组名称 **约束限制**: 不涉及 **取值范围**: 字符范围0-256位  **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 漏洞当前的处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled : 未处理 - handled   : 已处理  **默认取值**: 不涉及 
     * @param {string} [severityLevel] **参数解释**: 危险程度 **约束限制**: 不涉及 **取值范围**: - Critical : 漏洞cvss评分大于等于9；对应控制台页面的高危 - High     : 漏洞cvss评分大于等于7，小于9；对应控制台页面的中危 - Medium   : 漏洞cvss评分大于等于4，小于7；对应控制台页面的中危 - Low      : 漏洞cvss评分小于4；对应控制台页面的低危  可用逗号连接作为多选 **默认取值**: 不涉及 
     * @param {boolean} [isAffectBusiness] **参数解释**: 是否影响业务 **约束限制**: 不涉及 **取值范围**: - true  : 影响业务 - false : 不影响业务  **默认取值**: 不涉及 
     * @param {string} [repairPriority] **参数解释**: 修复优先级 **约束限制**: 不涉及 **取值范围**: - Critical : 紧急 - High     : 高危 - Medium   : 中危 - Low      : 低危  可用逗号连接作为多选 **默认取值**:   不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulHosts(listVulHostsRequest?: ListVulHostsRequest): Promise<ListVulHostsResponse> {
        const options = ParamCreater().listVulHosts(listVulHostsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞扫描任务列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞扫描任务列表
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [limit] 每页显示个数
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {string} [scanType] 扫描任务的类型，包含如下：   -manual : 手动扫描任务   -schedule : 定时扫描任务
     * @param {string} [taskId] 扫描任务ID
     * @param {number} [minStartTime] 扫描任务开始时间的最小值
     * @param {number} [maxStartTime] 扫描任务开始时间的最大值
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulScanTask(listVulScanTaskRequest?: ListVulScanTaskRequest): Promise<ListVulScanTaskResponse> {
        const options = ParamCreater().listVulScanTask(listVulScanTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞扫描任务对应的主机列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞扫描任务对应的主机列表
     * @param {string} taskId 任务ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {number} [limit] 每页显示个数
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {string} [scanStatus] 主机的扫描状态，包含如下：   -scanning : 扫描中   -success : 扫描成功   -failed : 扫描失败
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulScanTaskHost(listVulScanTaskHostRequest?: ListVulScanTaskHostRequest): Promise<ListVulScanTaskHostResponse> {
        const options = ParamCreater().listVulScanTaskHost(listVulScanTaskHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [type] **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**:   - linux_vul：linux漏洞   - windows_vul：windows漏洞   - web_cms：Web-CMS漏洞   - app_vul：应用漏洞  **默认取值**: linux_vul，默认查询linux漏洞 
     * @param {string} [vulId] **参数解释**: 漏洞ID **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {string} [vulName] **参数解释**: 漏洞名称 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {string} [repairPriority] **参数解释**: 漏洞修复优先级 **约束限制**: 不涉及 **取值范围**: - Critical：紧急 - High：高 - Medium：中 - Low：低  **默认取值**: 不涉及 
     * @param {string} [handleStatus] **参数解释**: 漏洞的处置状态 **约束限制**: 不涉及 **取值范围**: - unhandled：未处理 - handled：已处理  **默认取值**: 不涉及 
     * @param {string} [cveId] **参数解释**: 漏洞cve编号 **约束限制**: 不涉及 **取值范围**: 字符长度0-32位 **默认取值**: 不涉及 
     * @param {string} [labelList] **参数解释**: 漏洞标签 **约束限制**: 不涉及 **取值范围**: 字符长度0-128位 **默认取值**: 不涉及 
     * @param {string} [status] **参数解释**: 漏洞状态 **约束限制**: 不涉及 **取值范围**: - vul_status_unfix：未处理 - vul_status_ignored：已忽略 - vul_status_verified：验证中 - vul_status_fixing：修复中 - vul_status_fixed：修复成功 - vul_status_reboot：修复成功待重启 - vul_status_failed：修复失败 - vul_status_fix_after_reboot：请重启主机再次修复  **默认取值**: 不涉及 
     * @param {string} [assetValue] **参数解释**: 存在漏洞主机的资产重要性 **约束限制**: 不涉及 **取值范围**: - important：重要资产 - common：一般资产 - test：测试资产  **默认取值**: 不涉及 
     * @param {string} [groupName] **参数解释**: 存在漏洞主机的所属服务器组 **约束限制**: 不涉及 **取值范围**: 字符长度0-256位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listVulnerabilities(listVulnerabilitiesRequest?: ListVulnerabilitiesRequest): Promise<ListVulnerabilitiesResponse> {
        const options = ParamCreater().listVulnerabilities(listVulnerabilitiesRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 记录用户查看漏洞任务管理页面的最后时间
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 记录用户查看漏洞任务管理页面的最后时间
     * @param {RecordUserViewVulTaskRequestInfo} recordUserViewVulTaskRequestBody **参数解释**: 查询用户查看漏洞任务管理页面相关信息的请求体 **约束限制**: 不涉及 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public recordUserViewVulTask(recordUserViewVulTaskRequest?: RecordUserViewVulTaskRequest): Promise<RecordUserViewVulTaskResponse> {
        const options = ParamCreater().recordUserViewVulTask(recordUserViewVulTaskRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞扫描策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞扫描策略
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showVulScanPolicy(showVulScanPolicyRequest?: ShowVulScanPolicyRequest): Promise<ShowVulScanPolicyResponse> {
        const options = ParamCreater().showVulScanPolicy(showVulScanPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询漏洞管理统计数据
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询漏洞管理统计数据
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showVulStatics(showVulStaticsRequest?: ShowVulStaticsRequest): Promise<ShowVulStaticsResponse> {
        const options = ParamCreater().showVulStatics(showVulStaticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 获取漏洞任务的未读数量
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取漏洞任务的未读数量
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showVulTaskStatistics(showVulTaskStatisticsRequest?: ShowVulTaskStatisticsRequest): Promise<ShowVulTaskStatisticsResponse> {
        const options = ParamCreater().showVulTaskStatistics(showVulTaskStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 批量开启网页防篡改防护
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量开启网页防篡改防护
     * @param {BatchStartWebTamperProtectionRequestInfo} batchStartWebTamperProtectionRequestBody 请求参数
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public batchStartWebTamperProtection(batchStartWebTamperProtectionRequest?: BatchStartWebTamperProtectionRequest): Promise<BatchStartWebTamperProtectionResponse> {
        const options = ParamCreater().batchStartWebTamperProtection(batchStartWebTamperProtectionRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 删除远端备份服务器
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除远端备份服务器
     * @param {DeleteBackupHostRequestInfo} deleteBackupHostInfoRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteBackupHostInfo(deleteBackupHostInfoRequest?: DeleteBackupHostInfoRequest): Promise<DeleteBackupHostInfoResponse> {
        const options = ParamCreater().deleteBackupHostInfo(deleteBackupHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 导出网页防篡改防护目录列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 导出网页防篡改防护目录列表
     * @param {ExportWebTamperHostRequestInfo} exportWebTamperHostRequestBody 导出数据的表头字段列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public exportWebTamperHost(exportWebTamperHostRequest?: ExportWebTamperHostRequest): Promise<ExportWebTamperHostResponse> {
        const options = ParamCreater().exportWebTamperHost(exportWebTamperHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询远端备份服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询远端备份服务器列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {boolean} [isRun] **参数解释**: 是否仅显示Agent在线的远端备份服务器 **约束限制**: 不涉及 **取值范围**: - true ：仅显示Agent状态为在线的远端备份服务器。 - false：显示全部Agent状态的远端备份服务器。  **默认取值**: false 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listBackupHostsInfo(listBackupHostsInfoRequest?: ListBackupHostsInfoRequest): Promise<ListBackupHostsInfoResponse> {
        const options = ParamCreater().listBackupHostsInfo(listBackupHostsInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询主机静态网页防篡改防护动态：展示服务器名称、服务器ip、防护策略、检测时间、防护文件、事件描述信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询主机静态网页防篡改防护动态
     * @param {number} startTime 起始时间(ms)
     * @param {number} endTime 终止时间(ms)
     * @param {number} limit limit
     * @param {number} offset 偏移量：指定返回记录的开始位置
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostId] Host Id，为空时查所有主机
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostIp] 服务器ip
     * @param {string} [filePath] 防护文件
     * @param {string} [fileOperation] 文件操作类型   - add: 新增   - delete: 删除   - modify: 修改内容   - attribute: 修改属性
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHostProtectHistoryInfo(listHostProtectHistoryInfoRequest?: ListHostProtectHistoryInfoRequest): Promise<ListHostProtectHistoryInfoResponse> {
        const options = ParamCreater().listHostProtectHistoryInfo(listHostProtectHistoryInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询主机动态网页防篡改防护动态：包含告警级别、服务器ip、服务器名称、威胁类型、告警时间、攻击源ip、攻击源url信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询主机动态网页防篡改防护动态
     * @param {number} startTime 起始时间(ms)
     * @param {number} endTime 终止时间(ms)
     * @param {number} limit limit
     * @param {number} offset 偏移量：指定返回记录的开始位置
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostId] Host Id，为空时查所有主机
     * @param {number} [alarmLevel] 告警级别 - 1 : 低危 - 2 : 中危 - 3 : 高危 - 4 : 严重
     * @param {string} [severity] 威胁等级   - Security : 安全   - Low : 低危   - Medium : 中危   - High : 高危   - Critical : 危急
     * @param {string} [protectStatus] 防护状态   - closed : 未开启   - opened : 防护中
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHostRaspProtectHistoryInfo(listHostRaspProtectHistoryInfoRequest?: ListHostRaspProtectHistoryInfoRequest): Promise<ListHostRaspProtectHistoryInfoResponse> {
        const options = ParamCreater().listHostRaspProtectHistoryInfo(listHostRaspProtectHistoryInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询可开启网页防篡改的服务器列表
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询可开启网页防篡改的服务器列表
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {number} [offset] **参数解释**: 偏移量：指定返回记录的开始位置 **约束限制**: 不涉及 **取值范围**: 最小值0，最大值2000000 **默认取值**: 默认为0 
     * @param {number} [limit] **参数解释**: 每页显示个数 **约束限制**: 不涉及 **取值范围**: 取值10-200 **默认取值**: 10 
     * @param {string} [hostId] **参数解释**: 服务器ID **约束限制**: 不涉及 **取值范围**: 字符长度1-64位 **默认取值**: 不涉及 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [privateIp] **参数解释**: 服务器私有IP **约束限制**: 不涉及 **取值范围**: 字符长度1-128位 **默认取值**: 不涉及 
     * @param {string} [publicIp] 服务器公网IP
     * @param {string} [groupId] 服务器组ID
     * @param {string} [osType] 操作系统类型，包含如下2种。   - Linux：Linux。   - Windows：Windows。
     * @param {string} [webAppName] Web应用名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWebTamperHost(listWebTamperHostRequest?: ListWebTamperHostRequest): Promise<ListWebTamperHostResponse> {
        const options = ParamCreater().listWebTamperHost(listWebTamperHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询防护列表：查询网页防篡改主机防护状态列表信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询防护列表
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {string} [hostName] 服务器名称
     * @param {string} [hostId] 主机ID
     * @param {string} [publicIp] 弹性公网IP
     * @param {string} [privateIp] 私有IP
     * @param {string} [groupName] 服务器组名称
     * @param {string} [osType] 操作系统类别（linux，windows）   - linux : linux操作系统   - windows : windows操作系统
     * @param {string} [protectStatus] 配额状态   - opened : 已绑定网页防篡改配额
     * @param {string} [wtpStatus] 网页防篡改防护状态   - opened : 防护汇总   - opening : 正在开启   - open_failed : 防护失败   - partial_protection : 部分防护   - protection_interruption : 防护中断
     * @param {string} [agentStatus] 客户端状态   - not_installed : agent未安装   - online : agent在线   - offline : agent不在线
     * @param {number} [limit] 默认10
     * @param {number} [offset] 偏移量：指定返回记录的开始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listWtpProtectHost(listWtpProtectHostRequest?: ListWtpProtectHostRequest): Promise<ListWtpProtectHostResponse> {
        const options = ParamCreater().listWtpProtectHost(listWtpProtectHostRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 暂停或恢复网页防篡改的防护目录
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 暂停或恢复网页防篡改的防护目录
     * @param {string} hostId 服务器id
     * @param {SetProtectDirSwitchRequestInfo} setProtectDirSwitchInfoRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setProtectDirSwitchInfo(setProtectDirSwitchInfoRequest?: SetProtectDirSwitchInfoRequest): Promise<SetProtectDirSwitchInfoResponse> {
        const options = ParamCreater().setProtectDirSwitchInfo(setProtectDirSwitchInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启/关闭动态网页防篡改防护，下发/清空动态网页防篡改策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启/关闭动态网页防篡改防护
     * @param {SetRaspSwitchRequestInfo} setRaspSwitchRequestBody 请求体request
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setRaspSwitch(setRaspSwitchRequest?: SetRaspSwitchRequest): Promise<SetRaspSwitchResponse> {
        const options = ParamCreater().setRaspSwitch(setRaspSwitchRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 为已开启网页防篡改的服务器，开启或关闭远端备份功能，仅限Linux服务器
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启或关闭远端备份
     * @param {string} hostId 服务器id
     * @param {SetRemoteBackupInfoRequestInfo} setRemoteBackupInfoRequestBody 远端备份服务器的信息
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setRemoteBackupInfo(setRemoteBackupInfoRequest?: SetRemoteBackupInfoRequest): Promise<SetRemoteBackupInfoResponse> {
        const options = ParamCreater().setRemoteBackupInfo(setRemoteBackupInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 开启/关闭网页防篡改功能防护，下发/清空网页防篡改策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 开启关闭网页防篡改防护
     * @param {SetWtpProtectionStatusRequestInfo} setWtpProtectionStatusInfoRequestBody 请求体request
     * @param {string} [contentType] 缺省值:application/json; charset&#x3D;utf-8
     * @param {string} [region] Region ID
     * @param {string} [enterpriseProjectId] 主机所属的企业项目ID。 开通企业项目功能后才需要配置企业项目。 企业项目ID默认取值为“0”，表示默认企业项目。如果需要查询所有企业项目下的主机，请传参“all_granted_eps”。如果您只有某个企业项目的权限，则需要传递该企业项目ID，查询该企业项目下的主机，否则会因权限不足而报错。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setWtpProtectionStatusInfo(setWtpProtectionStatusInfoRequest?: SetWtpProtectionStatusInfoRequest): Promise<SetWtpProtectionStatusInfoResponse> {
        const options = ParamCreater().setWtpProtectionStatusInfo(setWtpProtectionStatusInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询远端备份服务器信息：查询远端备份服务器的相关信息，包含服务器名称、地址、端口号、备份路径、运行状态信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询远端备份服务器信息
     * @param {string} hostId 服务器id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showRemoteBackupHostInfo(showRemoteBackupHostInfoRequest?: ShowRemoteBackupHostInfoRequest): Promise<ShowRemoteBackupHostInfoResponse> {
        const options = ParamCreater().showRemoteBackupHostInfo(showRemoteBackupHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查看网页防篡改策略信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查看网页防篡改策略信息
     * @param {string} hostId **参数解释**: 服务器ID，要求服务器已开启网页防篡改防护，或关闭防护但未删除网页防篡改策略 **约束限制**: 需要使用 ListWtpProtectHost 接口查询网页防篡改主机防护状态列表信息，在 ListWtpProtectHost 接口的响应体中存在的host_id是符合查询条件的服务器ID **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showWebTamperHostPolicy(showWebTamperHostPolicyRequest?: ShowWebTamperHostPolicyRequest): Promise<ShowWebTamperHostPolicyResponse> {
        const options = ParamCreater().showWebTamperHostPolicy(showWebTamperHostPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 查询动态网页防篡改的Tomcat bin目录：查询动态网页防篡改功能配置的Tomcat bin目录
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询动态网页防篡改的Tomcat bin目录
     * @param {string} hostId 服务器id
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showWebTamperRaspPath(showWebTamperRaspPathRequest?: ShowWebTamperRaspPathRequest): Promise<ShowWebTamperRaspPathResponse> {
        const options = ParamCreater().showWebTamperRaspPath(showWebTamperRaspPathRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 防护数据统计：统计防护服务器数、防护目录数、近七天的已防御篡改攻击数
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 防护数据统计
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public showWtpProtectStatistics(showWtpProtectStatisticsRequest?: ShowWtpProtectStatisticsRequest): Promise<ShowWtpProtectStatisticsResponse> {
        const options = ParamCreater().showWtpProtectStatistics(showWtpProtectStatisticsRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 添加或修改远端备份服务器
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加或修改远端备份服务器
     * @param {UpdateBackupHostRequestInfo} updateBackupHostInfoRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateBackupHostInfo(updateBackupHostInfoRequest?: UpdateBackupHostInfoRequest): Promise<UpdateBackupHostInfoResponse> {
        const options = ParamCreater().updateBackupHostInfo(updateBackupHostInfoRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 编辑网页防篡改策略信息
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 编辑网页防篡改策略信息
     * @param {string} hostId 服务器id
     * @param {UpdateWebTamperHostPolicyRequestInfo} updateWebTamperHostPolicyRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateWebTamperHostPolicy(updateWebTamperHostPolicyRequest?: UpdateWebTamperHostPolicyRequest): Promise<UpdateWebTamperHostPolicyResponse> {
        const options = ParamCreater().updateWebTamperHostPolicy(updateWebTamperHostPolicyRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }

    /**
     * 修改动态网页防篡改的Tomcat bin目录：修改动态网页防篡改的Tomcat bin目录，重新下发动态网页防篡改策略
     * 
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改动态网页防篡改的Tomcat bin目录
     * @param {string} hostId 服务器id
     * @param {UpdateWebTamperRaspPathRequestInfo} updateWebTamperRaspPathRequestBody 请求体request
     * @param {string} [enterpriseProjectId] **参数解释**: 企业项目ID，用于过滤不同企业项目下的资产。获取方式请参见[获取企业项目ID](hss_02_0027.xml)。 如需查询所有企业项目下的资产请传参“all_granted_eps”。 **约束限制**: 开通企业项目功能后才需要配置企业项目ID参数。 **取值范围**: 字符长度1-256位 **默认取值**: 0，表示默认企业项目（default）。 
     * @param {string} [hostName] **参数解释**: 服务器名称 **约束限制**: 不涉及 **取值范围**: 字符长度1-256位 **默认取值**: 不涉及 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateWebTamperRaspPath(updateWebTamperRaspPathRequest?: UpdateWebTamperRaspPathRequest): Promise<UpdateWebTamperRaspPathResponse> {
        const options = ParamCreater().updateWebTamperRaspPath(updateWebTamperRaspPathRequest);

         // @ts-ignore
        options['responseHeaders'] = [''];

        return this.hcClient.sendRequest(options);
    }
}

export const ParamCreater = function () {
    return {
    
        /**
         * 新增基线白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addBaselineWhiteList(addBaselineWhiteListRequest?: AddBaselineWhiteListRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/baseline/whitelist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (addBaselineWhiteListRequest !== null && addBaselineWhiteListRequest !== undefined) {
                if (addBaselineWhiteListRequest instanceof AddBaselineWhiteListRequest) {
                    body = addBaselineWhiteListRequest.body
                    enterpriseProjectId = addBaselineWhiteListRequest.enterpriseProjectId;
                } else {
                    body = addBaselineWhiteListRequest['body'];
                    enterpriseProjectId = addBaselineWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 新建cce集成防护配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addCceIntegrationProtection(addCceIntegrationProtectionRequest?: AddCceIntegrationProtectionRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/protection-enable",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (addCceIntegrationProtectionRequest !== null && addCceIntegrationProtectionRequest !== undefined) {
                if (addCceIntegrationProtectionRequest instanceof AddCceIntegrationProtectionRequest) {
                    body = addCceIntegrationProtectionRequest.body
                    region = addCceIntegrationProtectionRequest.region;
                    enterpriseProjectId = addCceIntegrationProtectionRequest.enterpriseProjectId;
                } else {
                    body = addCceIntegrationProtectionRequest['body'];
                    region = addCceIntegrationProtectionRequest['region'];
                    enterpriseProjectId = addCceIntegrationProtectionRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建服务器组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addHostsGroup(addHostsGroupRequest?: AddHostsGroupRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/host-management/groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;
            
            let contentType;

            if (addHostsGroupRequest !== null && addHostsGroupRequest !== undefined) {
                if (addHostsGroupRequest instanceof AddHostsGroupRequest) {
                    body = addHostsGroupRequest.body
                    region = addHostsGroupRequest.region;
                    enterpriseProjectId = addHostsGroupRequest.enterpriseProjectId;
                    contentType = addHostsGroupRequest.contentType;
                } else {
                    body = addHostsGroupRequest['body'];
                    region = addHostsGroupRequest['region'];
                    enterpriseProjectId = addHostsGroupRequest['enterprise_project_id'];
                    contentType = addHostsGroupRequest['Content-Type'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 添加登录白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addLoginWhiteList(addLoginWhiteListRequest?: AddLoginWhiteListRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/event/white-list/login",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (addLoginWhiteListRequest !== null && addLoginWhiteListRequest !== undefined) {
                if (addLoginWhiteListRequest instanceof AddLoginWhiteListRequest) {
                    body = addLoginWhiteListRequest.body
                    enterpriseProjectId = addLoginWhiteListRequest.enterpriseProjectId;
                } else {
                    body = addLoginWhiteListRequest['body'];
                    enterpriseProjectId = addLoginWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 添加防护策略：创建防护策略，包含策略名称、相关规则开启状态、防护动作以及检测规则配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addPolicy(addPolicyRequest?: AddPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/rasp/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyName;
            
            let enterpriseProjectId;
            
            let osType;

            if (addPolicyRequest !== null && addPolicyRequest !== undefined) {
                if (addPolicyRequest instanceof AddPolicyRequest) {
                    policyName = addPolicyRequest.policyName;
                    body = addPolicyRequest.body
                    enterpriseProjectId = addPolicyRequest.enterpriseProjectId;
                    osType = addPolicyRequest.osType;
                } else {
                    policyName = addPolicyRequest['policy_name'];
                    body = addPolicyRequest['body'];
                    enterpriseProjectId = addPolicyRequest['enterprise_project_id'];
                    osType = addPolicyRequest['os_type'];
                }
            }

        
            if (policyName === null || policyName === undefined) {
                throw new RequiredError('policyName','Required parameter policyName was null or undefined when calling addPolicy.');
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 添加防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addProtectionPolicy(addProtectionPolicyRequest?: AddProtectionPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/ransomware/protection/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (addProtectionPolicyRequest !== null && addProtectionPolicyRequest !== undefined) {
                if (addProtectionPolicyRequest instanceof AddProtectionPolicyRequest) {
                    body = addProtectionPolicyRequest.body
                    region = addProtectionPolicyRequest.region;
                    enterpriseProjectId = addProtectionPolicyRequest.enterpriseProjectId;
                } else {
                    body = addProtectionPolicyRequest['body'];
                    region = addProtectionPolicyRequest['region'];
                    enterpriseProjectId = addProtectionPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 添加系统用户白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addSystemUserWhiteList(addSystemUserWhiteListRequest?: AddSystemUserWhiteListRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/event/white-list/userlist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (addSystemUserWhiteListRequest !== null && addSystemUserWhiteListRequest !== undefined) {
                if (addSystemUserWhiteListRequest instanceof AddSystemUserWhiteListRequest) {
                    body = addSystemUserWhiteListRequest.body
                    enterpriseProjectId = addSystemUserWhiteListRequest.enterpriseProjectId;
                } else {
                    body = addSystemUserWhiteListRequest['body'];
                    enterpriseProjectId = addSystemUserWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量添加账号
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchAddAccounts(batchAddAccountsRequest?: BatchAddAccountsRequest) {
            const options = {
                method: "POST",
                url: "/v5/setting/account/accounts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let xSecurityToken;
            
            let region;
            
            let enterpriseProjectId;

            if (batchAddAccountsRequest !== null && batchAddAccountsRequest !== undefined) {
                if (batchAddAccountsRequest instanceof BatchAddAccountsRequest) {
                    body = batchAddAccountsRequest.body
                    xSecurityToken = batchAddAccountsRequest.xSecurityToken;
                    region = batchAddAccountsRequest.region;
                    enterpriseProjectId = batchAddAccountsRequest.enterpriseProjectId;
                } else {
                    body = batchAddAccountsRequest['body'];
                    xSecurityToken = batchAddAccountsRequest['X-Security-Token'];
                    region = batchAddAccountsRequest['region'];
                    enterpriseProjectId = batchAddAccountsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (xSecurityToken !== undefined && xSecurityToken !== null) {
                localVarHeaderParameter['X-Security-Token'] = String(xSecurityToken);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量创建标签
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchCreateTags(batchCreateTagsRequest?: BatchCreateTagsRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/{resource_type}/{resource_id}/tags/create",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;

            let body: any;
            
            let resourceType;
            
            let resourceId;
            
            let contentType;

            if (batchCreateTagsRequest !== null && batchCreateTagsRequest !== undefined) {
                if (batchCreateTagsRequest instanceof BatchCreateTagsRequest) {
                    resourceType = batchCreateTagsRequest.resourceType;
                    resourceId = batchCreateTagsRequest.resourceId;
                    body = batchCreateTagsRequest.body
                    contentType = batchCreateTagsRequest.contentType;
                } else {
                    resourceType = batchCreateTagsRequest['resource_type'];
                    resourceId = batchCreateTagsRequest['resource_id'];
                    body = batchCreateTagsRequest['body'];
                    contentType = batchCreateTagsRequest['Content-Type'];
                }
            }

        
            if (resourceType === null || resourceType === undefined) {
            throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling batchCreateTags.');
            }
            if (resourceId === null || resourceId === undefined) {
            throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling batchCreateTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.pathParams = { 'resource_type': resourceType,'resource_id': resourceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 镜像仓库镜像批量扫描
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchScanSwrImage(batchScanSwrImageRequest?: BatchScanSwrImageRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/batch-scan",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (batchScanSwrImageRequest !== null && batchScanSwrImageRequest !== undefined) {
                if (batchScanSwrImageRequest instanceof BatchScanSwrImageRequest) {
                    body = batchScanSwrImageRequest.body
                    region = batchScanSwrImageRequest.region;
                    enterpriseProjectId = batchScanSwrImageRequest.enterpriseProjectId;
                } else {
                    body = batchScanSwrImageRequest['body'];
                    region = batchScanSwrImageRequest['region'];
                    enterpriseProjectId = batchScanSwrImageRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量开启勒索病毒防护，若开启备份防护，请保证该region有cbr云备份服务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchStartProtection(batchStartProtectionRequest?: BatchStartProtectionRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/ransomware/protection/batch-open",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (batchStartProtectionRequest !== null && batchStartProtectionRequest !== undefined) {
                if (batchStartProtectionRequest instanceof BatchStartProtectionRequest) {
                    body = batchStartProtectionRequest.body
                    enterpriseProjectId = batchStartProtectionRequest.enterpriseProjectId;
                } else {
                    body = batchStartProtectionRequest['body'];
                    enterpriseProjectId = batchStartProtectionRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启或关闭“Agent自动升级”配置开关
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAgentAutoUpgradeStatus(changeAgentAutoUpgradeStatusRequest?: ChangeAgentAutoUpgradeStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/setting/config/agent-auto-upgrade",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeAgentAutoUpgradeStatusRequest !== null && changeAgentAutoUpgradeStatusRequest !== undefined) {
                if (changeAgentAutoUpgradeStatusRequest instanceof ChangeAgentAutoUpgradeStatusRequest) {
                    body = changeAgentAutoUpgradeStatusRequest.body
                    enterpriseProjectId = changeAgentAutoUpgradeStatusRequest.enterpriseProjectId;
                } else {
                    body = changeAgentAutoUpgradeStatusRequest['body'];
                    enterpriseProjectId = changeAgentAutoUpgradeStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启或关闭“自动绑定配额”配置开关
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAutoOpenQuotaStatus(changeAutoOpenQuotaStatusRequest?: ChangeAutoOpenQuotaStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/setting/config/auto-open-quota",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeAutoOpenQuotaStatusRequest !== null && changeAutoOpenQuotaStatusRequest !== undefined) {
                if (changeAutoOpenQuotaStatusRequest instanceof ChangeAutoOpenQuotaStatusRequest) {
                    body = changeAutoOpenQuotaStatusRequest.body
                    enterpriseProjectId = changeAutoOpenQuotaStatusRequest.enterpriseProjectId;
                } else {
                    body = changeAutoOpenQuotaStatusRequest['body'];
                    enterpriseProjectId = changeAutoOpenQuotaStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改基线白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeBaselineWhiteList(changeBaselineWhiteListRequest?: ChangeBaselineWhiteListRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/baseline/whitelist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeBaselineWhiteListRequest !== null && changeBaselineWhiteListRequest !== undefined) {
                if (changeBaselineWhiteListRequest instanceof ChangeBaselineWhiteListRequest) {
                    body = changeBaselineWhiteListRequest.body
                    enterpriseProjectId = changeBaselineWhiteListRequest.enterpriseProjectId;
                } else {
                    body = changeBaselineWhiteListRequest['body'];
                    enterpriseProjectId = changeBaselineWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 解除已拦截IP
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeBlockedIp(changeBlockedIpRequest?: ChangeBlockedIpRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/event/blocked-ip",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (changeBlockedIpRequest !== null && changeBlockedIpRequest !== undefined) {
                if (changeBlockedIpRequest instanceof ChangeBlockedIpRequest) {
                    body = changeBlockedIpRequest.body
                    region = changeBlockedIpRequest.region;
                    enterpriseProjectId = changeBlockedIpRequest.enterpriseProjectId;
                } else {
                    body = changeBlockedIpRequest['body'];
                    region = changeBlockedIpRequest['region'];
                    enterpriseProjectId = changeBlockedIpRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 对未通过的配置检查项进行忽略/取消忽略/修复/验证操作
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeCheckRuleAction(changeCheckRuleActionRequest?: ChangeCheckRuleActionRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/baseline/check-rule/action",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let action;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let checkCce;

            if (changeCheckRuleActionRequest !== null && changeCheckRuleActionRequest !== undefined) {
                if (changeCheckRuleActionRequest instanceof ChangeCheckRuleActionRequest) {
                    action = changeCheckRuleActionRequest.action;
                    body = changeCheckRuleActionRequest.body
                    enterpriseProjectId = changeCheckRuleActionRequest.enterpriseProjectId;
                    hostId = changeCheckRuleActionRequest.hostId;
                    checkCce = changeCheckRuleActionRequest.checkCce;
                } else {
                    action = changeCheckRuleActionRequest['action'];
                    body = changeCheckRuleActionRequest['body'];
                    enterpriseProjectId = changeCheckRuleActionRequest['enterprise_project_id'];
                    hostId = changeCheckRuleActionRequest['host_id'];
                    checkCce = changeCheckRuleActionRequest['check_cce'];
                }
            }

        
            if (action === null || action === undefined) {
                throw new RequiredError('action','Required parameter action was null or undefined when calling changeCheckRuleAction.');
            }
            if (action !== null && action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (checkCce !== null && checkCce !== undefined) {
                localVarQueryParameter['check_cce'] = checkCce;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改告警状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeClusterEvents(changeClusterEventsRequest?: ChangeClusterEventsRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/cluster-protect/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeClusterEventsRequest !== null && changeClusterEventsRequest !== undefined) {
                if (changeClusterEventsRequest instanceof ChangeClusterEventsRequest) {
                    body = changeClusterEventsRequest.body
                    enterpriseProjectId = changeClusterEventsRequest.enterpriseProjectId;
                } else {
                    body = changeClusterEventsRequest['body'];
                    enterpriseProjectId = changeClusterEventsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改集群防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeClusterProtectionPolicy(changeClusterProtectionPolicyRequest?: ChangeClusterProtectionPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/cluster-protect/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeClusterProtectionPolicyRequest !== null && changeClusterProtectionPolicyRequest !== undefined) {
                if (changeClusterProtectionPolicyRequest instanceof ChangeClusterProtectionPolicyRequest) {
                    body = changeClusterProtectionPolicyRequest.body
                    enterpriseProjectId = changeClusterProtectionPolicyRequest.enterpriseProjectId;
                } else {
                    body = changeClusterProtectionPolicyRequest['body'];
                    enterpriseProjectId = changeClusterProtectionPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 处理告警事件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeEvent(changeEventRequest?: ChangeEventRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/event/operate",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;
            
            let containerName;
            
            let containerId;

            if (changeEventRequest !== null && changeEventRequest !== undefined) {
                if (changeEventRequest instanceof ChangeEventRequest) {
                    body = changeEventRequest.body
                    region = changeEventRequest.region;
                    enterpriseProjectId = changeEventRequest.enterpriseProjectId;
                    containerName = changeEventRequest.containerName;
                    containerId = changeEventRequest.containerId;
                } else {
                    body = changeEventRequest['body'];
                    region = changeEventRequest['region'];
                    enterpriseProjectId = changeEventRequest['enterprise_project_id'];
                    containerName = changeEventRequest['container_name'];
                    containerId = changeEventRequest['container_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 编辑服务器组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeHostsGroup(changeHostsGroupRequest?: ChangeHostsGroupRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/host-management/groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;
            
            let contentType;

            if (changeHostsGroupRequest !== null && changeHostsGroupRequest !== undefined) {
                if (changeHostsGroupRequest instanceof ChangeHostsGroupRequest) {
                    body = changeHostsGroupRequest.body
                    region = changeHostsGroupRequest.region;
                    enterpriseProjectId = changeHostsGroupRequest.enterpriseProjectId;
                    contentType = changeHostsGroupRequest.contentType;
                } else {
                    body = changeHostsGroupRequest['body'];
                    region = changeHostsGroupRequest['region'];
                    enterpriseProjectId = changeHostsGroupRequest['enterprise_project_id'];
                    contentType = changeHostsGroupRequest['Content-Type'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 恢复已隔离文件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeIsolatedFile(changeIsolatedFileRequest?: ChangeIsolatedFileRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/event/isolated-file",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (changeIsolatedFileRequest !== null && changeIsolatedFileRequest !== undefined) {
                if (changeIsolatedFileRequest instanceof ChangeIsolatedFileRequest) {
                    body = changeIsolatedFileRequest.body
                    region = changeIsolatedFileRequest.region;
                    enterpriseProjectId = changeIsolatedFileRequest.enterpriseProjectId;
                } else {
                    body = changeIsolatedFileRequest['body'];
                    region = changeIsolatedFileRequest['region'];
                    enterpriseProjectId = changeIsolatedFileRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启或关闭恶意软件云查样本收集配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeMalwareCollectStatus(changeMalwareCollectStatusRequest?: ChangeMalwareCollectStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/setting/malware/collect",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeMalwareCollectStatusRequest !== null && changeMalwareCollectStatusRequest !== undefined) {
                if (changeMalwareCollectStatusRequest instanceof ChangeMalwareCollectStatusRequest) {
                    body = changeMalwareCollectStatusRequest.body
                    enterpriseProjectId = changeMalwareCollectStatusRequest.enterpriseProjectId;
                } else {
                    body = changeMalwareCollectStatusRequest['body'];
                    enterpriseProjectId = changeMalwareCollectStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 对口令复杂度检测未通过的主机进行忽略/取消忽略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changePasswordComplexityStatus(changePasswordComplexityStatusRequest?: ChangePasswordComplexityStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/baseline/password-complexity/action",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let action;
            
            let enterpriseProjectId;

            if (changePasswordComplexityStatusRequest !== null && changePasswordComplexityStatusRequest !== undefined) {
                if (changePasswordComplexityStatusRequest instanceof ChangePasswordComplexityStatusRequest) {
                    action = changePasswordComplexityStatusRequest.action;
                    body = changePasswordComplexityStatusRequest.body
                    enterpriseProjectId = changePasswordComplexityStatusRequest.enterpriseProjectId;
                } else {
                    action = changePasswordComplexityStatusRequest['action'];
                    body = changePasswordComplexityStatusRequest['body'];
                    enterpriseProjectId = changePasswordComplexityStatusRequest['enterprise_project_id'];
                }
            }

        
            if (action === null || action === undefined) {
                throw new RequiredError('action','Required parameter action was null or undefined when calling changePasswordComplexityStatus.');
            }
            if (action !== null && action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改指定策略的总开关，将该策略的所有主机都打开或者关闭此策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changePolicySwitchStatus(changePolicySwitchStatusRequest?: ChangePolicySwitchStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/policy/switch",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changePolicySwitchStatusRequest !== null && changePolicySwitchStatusRequest !== undefined) {
                if (changePolicySwitchStatusRequest instanceof ChangePolicySwitchStatusRequest) {
                    enterpriseProjectId = changePolicySwitchStatusRequest.enterpriseProjectId;
                    body = changePolicySwitchStatusRequest.body
                } else {
                    enterpriseProjectId = changePolicySwitchStatusRequest['enterprise_project_id'];
                    body = changePolicySwitchStatusRequest['body'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling changePolicySwitchStatus.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改漏洞的状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeVulStatus(changeVulStatusRequest?: ChangeVulStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/vulnerability/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let contentType;
            
            let enterpriseProjectId;

            if (changeVulStatusRequest !== null && changeVulStatusRequest !== undefined) {
                if (changeVulStatusRequest instanceof ChangeVulStatusRequest) {
                    body = changeVulStatusRequest.body
                    contentType = changeVulStatusRequest.contentType;
                    enterpriseProjectId = changeVulStatusRequest.enterpriseProjectId;
                } else {
                    body = changeVulStatusRequest['body'];
                    contentType = changeVulStatusRequest['Content-Type'];
                    enterpriseProjectId = changeVulStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 新建集群防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createClusterProtectionPolicy(createClusterProtectionPolicyRequest?: CreateClusterProtectionPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/cluster-protect/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createClusterProtectionPolicyRequest !== null && createClusterProtectionPolicyRequest !== undefined) {
                if (createClusterProtectionPolicyRequest instanceof CreateClusterProtectionPolicyRequest) {
                    body = createClusterProtectionPolicyRequest.body
                    enterpriseProjectId = createClusterProtectionPolicyRequest.enterpriseProjectId;
                } else {
                    body = createClusterProtectionPolicyRequest['body'];
                    enterpriseProjectId = createClusterProtectionPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步集群信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createClustersInfo(createClustersInfoRequest?: CreateClustersInfoRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/kubernetes/save-clusters",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (createClustersInfoRequest !== null && createClustersInfoRequest !== undefined) {
                if (createClustersInfoRequest instanceof CreateClustersInfoRequest) {
                    enterpriseProjectId = createClustersInfoRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = createClustersInfoRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 容器集群网络添加配置策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createContainerNetworkPolicy(createContainerNetworkPolicyRequest?: CreateContainerNetworkPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container-network/{cluster_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (createContainerNetworkPolicyRequest !== null && createContainerNetworkPolicyRequest !== undefined) {
                if (createContainerNetworkPolicyRequest instanceof CreateContainerNetworkPolicyRequest) {
                    clusterId = createContainerNetworkPolicyRequest.clusterId;
                    body = createContainerNetworkPolicyRequest.body
                    enterpriseProjectId = createContainerNetworkPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = createContainerNetworkPolicyRequest['cluster_id'];
                    body = createContainerNetworkPolicyRequest['body'];
                    enterpriseProjectId = createContainerNetworkPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling createContainerNetworkPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 新增动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createDecoyPortPolicy(createDecoyPortPolicyRequest?: CreateDecoyPortPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/honeypot-port/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createDecoyPortPolicyRequest !== null && createDecoyPortPolicyRequest !== undefined) {
                if (createDecoyPortPolicyRequest instanceof CreateDecoyPortPolicyRequest) {
                    body = createDecoyPortPolicyRequest.body
                    enterpriseProjectId = createDecoyPortPolicyRequest.enterpriseProjectId;
                } else {
                    body = createDecoyPortPolicyRequest['body'];
                    enterpriseProjectId = createDecoyPortPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建全局资产扫描任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createGlobalAssetScanTask(createGlobalAssetScanTaskRequest?: CreateGlobalAssetScanTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/asset/assign-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let category;
            
            let enterpriseProjectId;

            if (createGlobalAssetScanTaskRequest !== null && createGlobalAssetScanTaskRequest !== undefined) {
                if (createGlobalAssetScanTaskRequest instanceof CreateGlobalAssetScanTaskRequest) {
                    category = createGlobalAssetScanTaskRequest.category;
                    body = createGlobalAssetScanTaskRequest.body
                    enterpriseProjectId = createGlobalAssetScanTaskRequest.enterpriseProjectId;
                } else {
                    category = createGlobalAssetScanTaskRequest['category'];
                    body = createGlobalAssetScanTaskRequest['body'];
                    enterpriseProjectId = createGlobalAssetScanTaskRequest['enterprise_project_id'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling createGlobalAssetScanTask.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * HSS服务创建订单订购配额，只支持包周期计费模式
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createQuotasOrder(createQuotasOrderRequest?: CreateQuotasOrderRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/quotas/orders",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let contentType;
            
            let region;
            
            let enterpriseProjectId;

            if (createQuotasOrderRequest !== null && createQuotasOrderRequest !== undefined) {
                if (createQuotasOrderRequest instanceof CreateQuotasOrderRequest) {
                    body = createQuotasOrderRequest.body
                    contentType = createQuotasOrderRequest.contentType;
                    region = createQuotasOrderRequest.region;
                    enterpriseProjectId = createQuotasOrderRequest.enterpriseProjectId;
                } else {
                    body = createQuotasOrderRequest['body'];
                    contentType = createQuotasOrderRequest['Content-Type'];
                    region = createQuotasOrderRequest['region'];
                    enterpriseProjectId = createQuotasOrderRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建安全组策略(云原生网络模型)
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createSecurityGroupPolicy(createSecurityGroupPolicyRequest?: CreateSecurityGroupPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container-network/{cluster_id}/{namespace}/security-group-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let namespace;
            
            let enterpriseProjectId;

            if (createSecurityGroupPolicyRequest !== null && createSecurityGroupPolicyRequest !== undefined) {
                if (createSecurityGroupPolicyRequest instanceof CreateSecurityGroupPolicyRequest) {
                    clusterId = createSecurityGroupPolicyRequest.clusterId;
                    namespace = createSecurityGroupPolicyRequest.namespace;
                    body = createSecurityGroupPolicyRequest.body
                    enterpriseProjectId = createSecurityGroupPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = createSecurityGroupPolicyRequest['cluster_id'];
                    namespace = createSecurityGroupPolicyRequest['namespace'];
                    body = createSecurityGroupPolicyRequest['body'];
                    enterpriseProjectId = createSecurityGroupPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling createSecurityGroupPolicy.');
            }
            if (namespace === null || namespace === undefined) {
            throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling createSecurityGroupPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId,'namespace': namespace, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除账号
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteAccount(deleteAccountRequest?: DeleteAccountRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/setting/account/accounts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let xSecurityToken;
            
            let region;
            
            let enterpriseProjectId;

            if (deleteAccountRequest !== null && deleteAccountRequest !== undefined) {
                if (deleteAccountRequest instanceof DeleteAccountRequest) {
                    body = deleteAccountRequest.body
                    xSecurityToken = deleteAccountRequest.xSecurityToken;
                    region = deleteAccountRequest.region;
                    enterpriseProjectId = deleteAccountRequest.enterpriseProjectId;
                } else {
                    body = deleteAccountRequest['body'];
                    xSecurityToken = deleteAccountRequest['X-Security-Token'];
                    region = deleteAccountRequest['region'];
                    enterpriseProjectId = deleteAccountRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (xSecurityToken !== undefined && xSecurityToken !== null) {
                localVarHeaderParameter['X-Security-Token'] = String(xSecurityToken);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除基线白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteBaselineWhiteList(deleteBaselineWhiteListRequest?: DeleteBaselineWhiteListRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/baseline/whitelist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteBaselineWhiteListRequest !== null && deleteBaselineWhiteListRequest !== undefined) {
                if (deleteBaselineWhiteListRequest instanceof DeleteBaselineWhiteListRequest) {
                    body = deleteBaselineWhiteListRequest.body
                    enterpriseProjectId = deleteBaselineWhiteListRequest.enterpriseProjectId;
                } else {
                    body = deleteBaselineWhiteListRequest['body'];
                    enterpriseProjectId = deleteBaselineWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除集群防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteClusterProtectionPolicy(deleteClusterProtectionPolicyRequest?: DeleteClusterProtectionPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/cluster-protect/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteClusterProtectionPolicyRequest !== null && deleteClusterProtectionPolicyRequest !== undefined) {
                if (deleteClusterProtectionPolicyRequest instanceof DeleteClusterProtectionPolicyRequest) {
                    body = deleteClusterProtectionPolicyRequest.body
                    enterpriseProjectId = deleteClusterProtectionPolicyRequest.enterpriseProjectId;
                } else {
                    body = deleteClusterProtectionPolicyRequest['body'];
                    enterpriseProjectId = deleteClusterProtectionPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 容器集群网络删除配置策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteContainerNetworkPolicy(deleteContainerNetworkPolicyRequest?: DeleteContainerNetworkPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/container-network/{cluster_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (deleteContainerNetworkPolicyRequest !== null && deleteContainerNetworkPolicyRequest !== undefined) {
                if (deleteContainerNetworkPolicyRequest instanceof DeleteContainerNetworkPolicyRequest) {
                    clusterId = deleteContainerNetworkPolicyRequest.clusterId;
                    body = deleteContainerNetworkPolicyRequest.body
                    enterpriseProjectId = deleteContainerNetworkPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = deleteContainerNetworkPolicyRequest['cluster_id'];
                    body = deleteContainerNetworkPolicyRequest['body'];
                    enterpriseProjectId = deleteContainerNetworkPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling deleteContainerNetworkPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 关闭主机动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteDecoyPortHostPolicy(deleteDecoyPortHostPolicyRequest?: DeleteDecoyPortHostPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/honeypot-port/host-policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let hostId;
            
            let enterpriseProjectId;

            if (deleteDecoyPortHostPolicyRequest !== null && deleteDecoyPortHostPolicyRequest !== undefined) {
                if (deleteDecoyPortHostPolicyRequest instanceof DeleteDecoyPortHostPolicyRequest) {
                    policyId = deleteDecoyPortHostPolicyRequest.policyId;
                    hostId = deleteDecoyPortHostPolicyRequest.hostId;
                    enterpriseProjectId = deleteDecoyPortHostPolicyRequest.enterpriseProjectId;
                } else {
                    policyId = deleteDecoyPortHostPolicyRequest['policy_id'];
                    hostId = deleteDecoyPortHostPolicyRequest['host_id'];
                    enterpriseProjectId = deleteDecoyPortHostPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling deleteDecoyPortHostPolicy.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling deleteDecoyPortHostPolicy.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteDecoyPortPolicy(deleteDecoyPortPolicyRequest?: DeleteDecoyPortPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/honeypot-port/policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (deleteDecoyPortPolicyRequest !== null && deleteDecoyPortPolicyRequest !== undefined) {
                if (deleteDecoyPortPolicyRequest instanceof DeleteDecoyPortPolicyRequest) {
                    policyId = deleteDecoyPortPolicyRequest.policyId;
                    enterpriseProjectId = deleteDecoyPortPolicyRequest.enterpriseProjectId;
                } else {
                    policyId = deleteDecoyPortPolicyRequest['policy_id'];
                    enterpriseProjectId = deleteDecoyPortPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling deleteDecoyPortPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除服务器组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteHostsGroup(deleteHostsGroupRequest?: DeleteHostsGroupRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/host-management/groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let groupId;
            
            let region;
            
            let enterpriseProjectId;

            if (deleteHostsGroupRequest !== null && deleteHostsGroupRequest !== undefined) {
                if (deleteHostsGroupRequest instanceof DeleteHostsGroupRequest) {
                    groupId = deleteHostsGroupRequest.groupId;
                    region = deleteHostsGroupRequest.region;
                    enterpriseProjectId = deleteHostsGroupRequest.enterpriseProjectId;
                } else {
                    groupId = deleteHostsGroupRequest['group_id'];
                    region = deleteHostsGroupRequest['region'];
                    enterpriseProjectId = deleteHostsGroupRequest['enterprise_project_id'];
                }
            }

        
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling deleteHostsGroup.');
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除已隔离文件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteIsolatedFile(deleteIsolatedFileRequest?: DeleteIsolatedFileRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/event/isolated-file",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteIsolatedFileRequest !== null && deleteIsolatedFileRequest !== undefined) {
                if (deleteIsolatedFileRequest instanceof DeleteIsolatedFileRequest) {
                    body = deleteIsolatedFileRequest.body
                    enterpriseProjectId = deleteIsolatedFileRequest.enterpriseProjectId;
                } else {
                    body = deleteIsolatedFileRequest['body'];
                    enterpriseProjectId = deleteIsolatedFileRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除防护策略：删除策略，已经在使用的防护策略不能删除
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deletePolicy(deletePolicyRequest?: DeletePolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/rasp/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (deletePolicyRequest !== null && deletePolicyRequest !== undefined) {
                if (deletePolicyRequest instanceof DeletePolicyRequest) {
                    policyId = deletePolicyRequest.policyId;
                    enterpriseProjectId = deletePolicyRequest.enterpriseProjectId;
                } else {
                    policyId = deletePolicyRequest['policy_id'];
                    enterpriseProjectId = deletePolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling deletePolicy.');
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteProtectionPolicy(deleteProtectionPolicyRequest?: DeleteProtectionPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/ransomware/protection/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let policyId;

            if (deleteProtectionPolicyRequest !== null && deleteProtectionPolicyRequest !== undefined) {
                if (deleteProtectionPolicyRequest instanceof DeleteProtectionPolicyRequest) {
                    enterpriseProjectId = deleteProtectionPolicyRequest.enterpriseProjectId;
                    policyId = deleteProtectionPolicyRequest.policyId;
                } else {
                    enterpriseProjectId = deleteProtectionPolicyRequest['enterprise_project_id'];
                    policyId = deleteProtectionPolicyRequest['policy_id'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling deleteProtectionPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling deleteProtectionPolicy.');
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除单个资源下的标签
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteResourceInstanceTag(deleteResourceInstanceTagRequest?: DeleteResourceInstanceTagRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/{resource_type}/{resource_id}/tags/{key}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;

            
            let resourceType;
            
            let resourceId;
            
            let key;

            if (deleteResourceInstanceTagRequest !== null && deleteResourceInstanceTagRequest !== undefined) {
                if (deleteResourceInstanceTagRequest instanceof DeleteResourceInstanceTagRequest) {
                    resourceType = deleteResourceInstanceTagRequest.resourceType;
                    resourceId = deleteResourceInstanceTagRequest.resourceId;
                    key = deleteResourceInstanceTagRequest.key;
                } else {
                    resourceType = deleteResourceInstanceTagRequest['resource_type'];
                    resourceId = deleteResourceInstanceTagRequest['resource_id'];
                    key = deleteResourceInstanceTagRequest['key'];
                }
            }

        
            if (resourceType === null || resourceType === undefined) {
            throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling deleteResourceInstanceTag.');
            }
            if (resourceId === null || resourceId === undefined) {
            throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling deleteResourceInstanceTag.');
            }
            if (key === null || key === undefined) {
            throw new RequiredError('key','Required parameter key was null or undefined when calling deleteResourceInstanceTag.');
            }

            options.pathParams = { 'resource_type': resourceType,'resource_id': resourceId,'key': key, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除安全组策略(云原生网络模型)
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteSecurityGroupPolicy(deleteSecurityGroupPolicyRequest?: DeleteSecurityGroupPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/container-network/{cluster_id}/security-group-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (deleteSecurityGroupPolicyRequest !== null && deleteSecurityGroupPolicyRequest !== undefined) {
                if (deleteSecurityGroupPolicyRequest instanceof DeleteSecurityGroupPolicyRequest) {
                    clusterId = deleteSecurityGroupPolicyRequest.clusterId;
                    body = deleteSecurityGroupPolicyRequest.body
                    enterpriseProjectId = deleteSecurityGroupPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = deleteSecurityGroupPolicyRequest['cluster_id'];
                    body = deleteSecurityGroupPolicyRequest['body'];
                    enterpriseProjectId = deleteSecurityGroupPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling deleteSecurityGroupPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 导出资产指纹请求
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        downloadAssetFile(downloadAssetFileRequest?: DownloadAssetFileRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/asset/export",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let assetType;
            
            let category;
            
            let enterpriseProjectId;

            if (downloadAssetFileRequest !== null && downloadAssetFileRequest !== undefined) {
                if (downloadAssetFileRequest instanceof DownloadAssetFileRequest) {
                    assetType = downloadAssetFileRequest.assetType;
                    category = downloadAssetFileRequest.category;
                    body = downloadAssetFileRequest.body
                    enterpriseProjectId = downloadAssetFileRequest.enterpriseProjectId;
                } else {
                    assetType = downloadAssetFileRequest['asset_type'];
                    category = downloadAssetFileRequest['category'];
                    body = downloadAssetFileRequest['body'];
                    enterpriseProjectId = downloadAssetFileRequest['enterprise_project_id'];
                }
            }

        
            if (assetType === null || assetType === undefined) {
                throw new RequiredError('assetType','Required parameter assetType was null or undefined when calling downloadAssetFile.');
            }
            if (assetType !== null && assetType !== undefined) {
                localVarQueryParameter['asset_type'] = assetType;
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling downloadAssetFile.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建容器导出任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportContainerList(exportContainerListRequest?: ExportContainerListRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/export-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;
            
            let exportSize;

            if (exportContainerListRequest !== null && exportContainerListRequest !== undefined) {
                if (exportContainerListRequest instanceof ExportContainerListRequest) {
                    body = exportContainerListRequest.body
                    enterpriseProjectId = exportContainerListRequest.enterpriseProjectId;
                    exportSize = exportContainerListRequest.exportSize;
                } else {
                    body = exportContainerListRequest['body'];
                    enterpriseProjectId = exportContainerListRequest['enterprise_project_id'];
                    exportSize = exportContainerListRequest['export_size'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (exportSize !== null && exportSize !== undefined) {
                localVarQueryParameter['export_size'] = exportSize;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询多账号列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAccounts(listAccountsRequest?: ListAccountsRequest) {
            const options = {
                method: "GET",
                url: "/v5/setting/account/accounts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let xSecurityToken;
            
            let region;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;

            if (listAccountsRequest !== null && listAccountsRequest !== undefined) {
                if (listAccountsRequest instanceof ListAccountsRequest) {
                    xSecurityToken = listAccountsRequest.xSecurityToken;
                    region = listAccountsRequest.region;
                    limit = listAccountsRequest.limit;
                    offset = listAccountsRequest.offset;
                    enterpriseProjectId = listAccountsRequest.enterpriseProjectId;
                } else {
                    xSecurityToken = listAccountsRequest['X-Security-Token'];
                    region = listAccountsRequest['region'];
                    limit = listAccountsRequest['limit'];
                    offset = listAccountsRequest['offset'];
                    enterpriseProjectId = listAccountsRequest['enterprise_project_id'];
                }
            }

        
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (xSecurityToken !== undefined && xSecurityToken !== null) {
                localVarHeaderParameter['X-Security-Token'] = String(xSecurityToken);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询“Agent自动升级”配置开关状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAgentAutoUpgradeStatus(listAgentAutoUpgradeStatusRequest?: ListAgentAutoUpgradeStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/config/agent-auto-upgrade",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listAgentAutoUpgradeStatusRequest !== null && listAgentAutoUpgradeStatusRequest !== undefined) {
                if (listAgentAutoUpgradeStatusRequest instanceof ListAgentAutoUpgradeStatusRequest) {
                    enterpriseProjectId = listAgentAutoUpgradeStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listAgentAutoUpgradeStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询agent安装脚本
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAgentInstallScript(listAgentInstallScriptRequest?: ListAgentInstallScriptRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/agent-install-script",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let osArch;
            
            let region;
            
            let enterpriseProjectId;
            
            let osType;
            
            let outsideHost;
            
            let outsideGroupId;
            
            let batchInstall;
            
            let type;

            if (listAgentInstallScriptRequest !== null && listAgentInstallScriptRequest !== undefined) {
                if (listAgentInstallScriptRequest instanceof ListAgentInstallScriptRequest) {
                    osArch = listAgentInstallScriptRequest.osArch;
                    region = listAgentInstallScriptRequest.region;
                    enterpriseProjectId = listAgentInstallScriptRequest.enterpriseProjectId;
                    osType = listAgentInstallScriptRequest.osType;
                    outsideHost = listAgentInstallScriptRequest.outsideHost;
                    outsideGroupId = listAgentInstallScriptRequest.outsideGroupId;
                    batchInstall = listAgentInstallScriptRequest.batchInstall;
                    type = listAgentInstallScriptRequest.type;
                } else {
                    osArch = listAgentInstallScriptRequest['os_arch'];
                    region = listAgentInstallScriptRequest['region'];
                    enterpriseProjectId = listAgentInstallScriptRequest['enterprise_project_id'];
                    osType = listAgentInstallScriptRequest['os_type'];
                    outsideHost = listAgentInstallScriptRequest['outside_host'];
                    outsideGroupId = listAgentInstallScriptRequest['outside_group_id'];
                    batchInstall = listAgentInstallScriptRequest['batch_install'];
                    type = listAgentInstallScriptRequest['type'];
                }
            }

        
            if (osArch === null || osArch === undefined) {
                throw new RequiredError('osArch','Required parameter osArch was null or undefined when calling listAgentInstallScript.');
            }
            if (osArch !== null && osArch !== undefined) {
                localVarQueryParameter['os_arch'] = osArch;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (outsideHost !== null && outsideHost !== undefined) {
                localVarQueryParameter['outside_host'] = outsideHost;
            }
            if (outsideGroupId !== null && outsideGroupId !== undefined) {
                localVarQueryParameter['outside_group_id'] = outsideGroupId;
            }
            if (batchInstall !== null && batchInstall !== undefined) {
                localVarQueryParameter['batch_install'] = batchInstall;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询告警白名单列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAlarmWhiteList(listAlarmWhiteListRequest?: ListAlarmWhiteListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/white-list/alarm",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let hash;
            
            let eventType;
            
            let offset;
            
            let limit;

            if (listAlarmWhiteListRequest !== null && listAlarmWhiteListRequest !== undefined) {
                if (listAlarmWhiteListRequest instanceof ListAlarmWhiteListRequest) {
                    region = listAlarmWhiteListRequest.region;
                    enterpriseProjectId = listAlarmWhiteListRequest.enterpriseProjectId;
                    hash = listAlarmWhiteListRequest.hash;
                    eventType = listAlarmWhiteListRequest.eventType;
                    offset = listAlarmWhiteListRequest.offset;
                    limit = listAlarmWhiteListRequest.limit;
                } else {
                    region = listAlarmWhiteListRequest['region'];
                    enterpriseProjectId = listAlarmWhiteListRequest['enterprise_project_id'];
                    hash = listAlarmWhiteListRequest['hash'];
                    eventType = listAlarmWhiteListRequest['event_type'];
                    offset = listAlarmWhiteListRequest['offset'];
                    limit = listAlarmWhiteListRequest['limit'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hash !== null && hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询病毒扫描历史处置记录列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntivirusHandleHistory(listAntivirusHandleHistoryRequest?: ListAntivirusHandleHistoryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/handle-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let region;
            
            let enterpriseProjectId;
            
            let malwareName;
            
            let filePath;
            
            let severityList;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let assetValue;
            
            let handleMethod;
            
            let userName;
            
            let eventType;
            
            let sortDir;
            
            let sortKey;

            if (listAntivirusHandleHistoryRequest !== null && listAntivirusHandleHistoryRequest !== undefined) {
                if (listAntivirusHandleHistoryRequest instanceof ListAntivirusHandleHistoryRequest) {
                    offset = listAntivirusHandleHistoryRequest.offset;
                    limit = listAntivirusHandleHistoryRequest.limit;
                    region = listAntivirusHandleHistoryRequest.region;
                    enterpriseProjectId = listAntivirusHandleHistoryRequest.enterpriseProjectId;
                    malwareName = listAntivirusHandleHistoryRequest.malwareName;
                    filePath = listAntivirusHandleHistoryRequest.filePath;
                    severityList = listAntivirusHandleHistoryRequest.severityList;
                    hostName = listAntivirusHandleHistoryRequest.hostName;
                    privateIp = listAntivirusHandleHistoryRequest.privateIp;
                    publicIp = listAntivirusHandleHistoryRequest.publicIp;
                    assetValue = listAntivirusHandleHistoryRequest.assetValue;
                    handleMethod = listAntivirusHandleHistoryRequest.handleMethod;
                    userName = listAntivirusHandleHistoryRequest.userName;
                    eventType = listAntivirusHandleHistoryRequest.eventType;
                    sortDir = listAntivirusHandleHistoryRequest.sortDir;
                    sortKey = listAntivirusHandleHistoryRequest.sortKey;
                } else {
                    offset = listAntivirusHandleHistoryRequest['offset'];
                    limit = listAntivirusHandleHistoryRequest['limit'];
                    region = listAntivirusHandleHistoryRequest['region'];
                    enterpriseProjectId = listAntivirusHandleHistoryRequest['enterprise_project_id'];
                    malwareName = listAntivirusHandleHistoryRequest['malware_name'];
                    filePath = listAntivirusHandleHistoryRequest['file_path'];
                    severityList = listAntivirusHandleHistoryRequest['severity_list'];
                    hostName = listAntivirusHandleHistoryRequest['host_name'];
                    privateIp = listAntivirusHandleHistoryRequest['private_ip'];
                    publicIp = listAntivirusHandleHistoryRequest['public_ip'];
                    assetValue = listAntivirusHandleHistoryRequest['asset_value'];
                    handleMethod = listAntivirusHandleHistoryRequest['handle_method'];
                    userName = listAntivirusHandleHistoryRequest['user_name'];
                    eventType = listAntivirusHandleHistoryRequest['event_type'];
                    sortDir = listAntivirusHandleHistoryRequest['sort_dir'];
                    sortKey = listAntivirusHandleHistoryRequest['sort_key'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAntivirusHandleHistory.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAntivirusHandleHistory.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (malwareName !== null && malwareName !== undefined) {
                localVarQueryParameter['malware_name'] = malwareName;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (handleMethod !== null && handleMethod !== undefined) {
                localVarQueryParameter['handle_method'] = handleMethod;
            }
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取软件信息的历史变动记录
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppChangeHistories(listAppChangeHistoriesRequest?: ListAppChangeHistoriesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/app/change-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostIp;
            
            let hostName;
            
            let appName;
            
            let variationType;
            
            let sortKey;
            
            let sortDir;
            
            let limit;
            
            let offset;
            
            let startTime;
            
            let endTime;

            if (listAppChangeHistoriesRequest !== null && listAppChangeHistoriesRequest !== undefined) {
                if (listAppChangeHistoriesRequest instanceof ListAppChangeHistoriesRequest) {
                    enterpriseProjectId = listAppChangeHistoriesRequest.enterpriseProjectId;
                    hostId = listAppChangeHistoriesRequest.hostId;
                    hostIp = listAppChangeHistoriesRequest.hostIp;
                    hostName = listAppChangeHistoriesRequest.hostName;
                    appName = listAppChangeHistoriesRequest.appName;
                    variationType = listAppChangeHistoriesRequest.variationType;
                    sortKey = listAppChangeHistoriesRequest.sortKey;
                    sortDir = listAppChangeHistoriesRequest.sortDir;
                    limit = listAppChangeHistoriesRequest.limit;
                    offset = listAppChangeHistoriesRequest.offset;
                    startTime = listAppChangeHistoriesRequest.startTime;
                    endTime = listAppChangeHistoriesRequest.endTime;
                } else {
                    enterpriseProjectId = listAppChangeHistoriesRequest['enterprise_project_id'];
                    hostId = listAppChangeHistoriesRequest['host_id'];
                    hostIp = listAppChangeHistoriesRequest['host_ip'];
                    hostName = listAppChangeHistoriesRequest['host_name'];
                    appName = listAppChangeHistoriesRequest['app_name'];
                    variationType = listAppChangeHistoriesRequest['variation_type'];
                    sortKey = listAppChangeHistoriesRequest['sort_key'];
                    sortDir = listAppChangeHistoriesRequest['sort_dir'];
                    limit = listAppChangeHistoriesRequest['limit'];
                    offset = listAppChangeHistoriesRequest['offset'];
                    startTime = listAppChangeHistoriesRequest['start_time'];
                    endTime = listAppChangeHistoriesRequest['end_time'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }
            if (variationType !== null && variationType !== undefined) {
                localVarQueryParameter['variation_type'] = variationType;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询软件列表，支持通过软件名称查询对应的服务器数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppStatistics(listAppStatisticsRequest?: ListAppStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/app/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let appName;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;

            if (listAppStatisticsRequest !== null && listAppStatisticsRequest !== undefined) {
                if (listAppStatisticsRequest instanceof ListAppStatisticsRequest) {
                    appName = listAppStatisticsRequest.appName;
                    enterpriseProjectId = listAppStatisticsRequest.enterpriseProjectId;
                    limit = listAppStatisticsRequest.limit;
                    offset = listAppStatisticsRequest.offset;
                    category = listAppStatisticsRequest.category;
                } else {
                    appName = listAppStatisticsRequest['app_name'];
                    enterpriseProjectId = listAppStatisticsRequest['enterprise_project_id'];
                    limit = listAppStatisticsRequest['limit'];
                    offset = listAppStatisticsRequest['offset'];
                    category = listAppStatisticsRequest['category'];
                }
            }

        
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询软件的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listApps(listAppsRequest?: ListAppsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/apps",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let hostName;
            
            let appName;
            
            let hostIp;
            
            let version;
            
            let installDir;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;
            
            let partMatch;

            if (listAppsRequest !== null && listAppsRequest !== undefined) {
                if (listAppsRequest instanceof ListAppsRequest) {
                    hostId = listAppsRequest.hostId;
                    hostName = listAppsRequest.hostName;
                    appName = listAppsRequest.appName;
                    hostIp = listAppsRequest.hostIp;
                    version = listAppsRequest.version;
                    installDir = listAppsRequest.installDir;
                    enterpriseProjectId = listAppsRequest.enterpriseProjectId;
                    limit = listAppsRequest.limit;
                    offset = listAppsRequest.offset;
                    category = listAppsRequest.category;
                    partMatch = listAppsRequest.partMatch;
                } else {
                    hostId = listAppsRequest['host_id'];
                    hostName = listAppsRequest['host_name'];
                    appName = listAppsRequest['app_name'];
                    hostIp = listAppsRequest['host_ip'];
                    version = listAppsRequest['version'];
                    installDir = listAppsRequest['install_dir'];
                    enterpriseProjectId = listAppsRequest['enterprise_project_id'];
                    limit = listAppsRequest['limit'];
                    offset = listAppsRequest['offset'];
                    category = listAppsRequest['category'];
                    partMatch = listAppsRequest['part_match'];
                }
            }

        
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (installDir !== null && installDir !== undefined) {
                localVarQueryParameter['install_dir'] = installDir;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询程序自动隔离查杀状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAutoKillVirusStatus(listAutoKillVirusStatusRequest?: ListAutoKillVirusStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/virus-kill",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listAutoKillVirusStatusRequest !== null && listAutoKillVirusStatusRequest !== undefined) {
                if (listAutoKillVirusStatusRequest instanceof ListAutoKillVirusStatusRequest) {
                    enterpriseProjectId = listAutoKillVirusStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listAutoKillVirusStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取自启动项的历史变动记录
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAutoLaunchChangeHistories(listAutoLaunchChangeHistoriesRequest?: ListAutoLaunchChangeHistoriesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/auto-launch/change-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostIp;
            
            let hostName;
            
            let autoLaunchName;
            
            let type;
            
            let variationType;
            
            let sortKey;
            
            let sortDir;
            
            let limit;
            
            let offset;
            
            let startTime;
            
            let endTime;

            if (listAutoLaunchChangeHistoriesRequest !== null && listAutoLaunchChangeHistoriesRequest !== undefined) {
                if (listAutoLaunchChangeHistoriesRequest instanceof ListAutoLaunchChangeHistoriesRequest) {
                    enterpriseProjectId = listAutoLaunchChangeHistoriesRequest.enterpriseProjectId;
                    hostId = listAutoLaunchChangeHistoriesRequest.hostId;
                    hostIp = listAutoLaunchChangeHistoriesRequest.hostIp;
                    hostName = listAutoLaunchChangeHistoriesRequest.hostName;
                    autoLaunchName = listAutoLaunchChangeHistoriesRequest.autoLaunchName;
                    type = listAutoLaunchChangeHistoriesRequest.type;
                    variationType = listAutoLaunchChangeHistoriesRequest.variationType;
                    sortKey = listAutoLaunchChangeHistoriesRequest.sortKey;
                    sortDir = listAutoLaunchChangeHistoriesRequest.sortDir;
                    limit = listAutoLaunchChangeHistoriesRequest.limit;
                    offset = listAutoLaunchChangeHistoriesRequest.offset;
                    startTime = listAutoLaunchChangeHistoriesRequest.startTime;
                    endTime = listAutoLaunchChangeHistoriesRequest.endTime;
                } else {
                    enterpriseProjectId = listAutoLaunchChangeHistoriesRequest['enterprise_project_id'];
                    hostId = listAutoLaunchChangeHistoriesRequest['host_id'];
                    hostIp = listAutoLaunchChangeHistoriesRequest['host_ip'];
                    hostName = listAutoLaunchChangeHistoriesRequest['host_name'];
                    autoLaunchName = listAutoLaunchChangeHistoriesRequest['auto_launch_name'];
                    type = listAutoLaunchChangeHistoriesRequest['type'];
                    variationType = listAutoLaunchChangeHistoriesRequest['variation_type'];
                    sortKey = listAutoLaunchChangeHistoriesRequest['sort_key'];
                    sortDir = listAutoLaunchChangeHistoriesRequest['sort_dir'];
                    limit = listAutoLaunchChangeHistoriesRequest['limit'];
                    offset = listAutoLaunchChangeHistoriesRequest['offset'];
                    startTime = listAutoLaunchChangeHistoriesRequest['start_time'];
                    endTime = listAutoLaunchChangeHistoriesRequest['end_time'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (autoLaunchName !== null && autoLaunchName !== undefined) {
                localVarQueryParameter['auto_launch_name'] = autoLaunchName;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (variationType !== null && variationType !== undefined) {
                localVarQueryParameter['variation_type'] = variationType;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询自启动信息，支持通过传入自启动名称查询启动类型和服务器数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAutoLaunchStatistics(listAutoLaunchStatisticsRequest?: ListAutoLaunchStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/auto-launch/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let name;
            
            let type;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;

            if (listAutoLaunchStatisticsRequest !== null && listAutoLaunchStatisticsRequest !== undefined) {
                if (listAutoLaunchStatisticsRequest instanceof ListAutoLaunchStatisticsRequest) {
                    name = listAutoLaunchStatisticsRequest.name;
                    type = listAutoLaunchStatisticsRequest.type;
                    enterpriseProjectId = listAutoLaunchStatisticsRequest.enterpriseProjectId;
                    limit = listAutoLaunchStatisticsRequest.limit;
                    offset = listAutoLaunchStatisticsRequest.offset;
                } else {
                    name = listAutoLaunchStatisticsRequest['name'];
                    type = listAutoLaunchStatisticsRequest['type'];
                    enterpriseProjectId = listAutoLaunchStatisticsRequest['enterprise_project_id'];
                    limit = listAutoLaunchStatisticsRequest['limit'];
                    offset = listAutoLaunchStatisticsRequest['offset'];
                }
            }

        
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询自启动项的服务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAutoLaunchs(listAutoLaunchsRequest?: ListAutoLaunchsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/auto-launchs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let hostName;
            
            let name;
            
            let hostIp;
            
            let type;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let partMatch;

            if (listAutoLaunchsRequest !== null && listAutoLaunchsRequest !== undefined) {
                if (listAutoLaunchsRequest instanceof ListAutoLaunchsRequest) {
                    hostId = listAutoLaunchsRequest.hostId;
                    hostName = listAutoLaunchsRequest.hostName;
                    name = listAutoLaunchsRequest.name;
                    hostIp = listAutoLaunchsRequest.hostIp;
                    type = listAutoLaunchsRequest.type;
                    enterpriseProjectId = listAutoLaunchsRequest.enterpriseProjectId;
                    limit = listAutoLaunchsRequest.limit;
                    offset = listAutoLaunchsRequest.offset;
                    partMatch = listAutoLaunchsRequest.partMatch;
                } else {
                    hostId = listAutoLaunchsRequest['host_id'];
                    hostName = listAutoLaunchsRequest['host_name'];
                    name = listAutoLaunchsRequest['name'];
                    hostIp = listAutoLaunchsRequest['host_ip'];
                    type = listAutoLaunchsRequest['type'];
                    enterpriseProjectId = listAutoLaunchsRequest['enterprise_project_id'];
                    limit = listAutoLaunchsRequest['limit'];
                    offset = listAutoLaunchsRequest['offset'];
                    partMatch = listAutoLaunchsRequest['part_match'];
                }
            }

        
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询“自动绑定配额”配置开关状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAutoOpenQuotaStatus(listAutoOpenQuotaStatusRequest?: ListAutoOpenQuotaStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/config/auto-open-quota",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listAutoOpenQuotaStatusRequest !== null && listAutoOpenQuotaStatusRequest !== undefined) {
                if (listAutoOpenQuotaStatusRequest instanceof ListAutoOpenQuotaStatusRequest) {
                    enterpriseProjectId = listAutoOpenQuotaStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listAutoOpenQuotaStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询备份存储库列表，若进行绑定主机，则需要额外判断，同时满足以下条件：1、存储库状态为“可用”状态；2、备份策略状态为“已启用”；3、存储库有剩余可用备份容量；4、存储库绑定的服务器数量少于256。
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBackupVaults(listBackupVaultsRequest?: ListBackupVaultsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/ransomware/optional/vaults",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let vaultName;
            
            let vaultId;

            if (listBackupVaultsRequest !== null && listBackupVaultsRequest !== undefined) {
                if (listBackupVaultsRequest instanceof ListBackupVaultsRequest) {
                    offset = listBackupVaultsRequest.offset;
                    limit = listBackupVaultsRequest.limit;
                    vaultName = listBackupVaultsRequest.vaultName;
                    vaultId = listBackupVaultsRequest.vaultId;
                } else {
                    offset = listBackupVaultsRequest['offset'];
                    limit = listBackupVaultsRequest['limit'];
                    vaultName = listBackupVaultsRequest['vault_name'];
                    vaultId = listBackupVaultsRequest['vault_id'];
                }
            }

        
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (vaultName !== null && vaultName !== undefined) {
                localVarQueryParameter['vault_name'] = vaultName;
            }
            if (vaultId !== null && vaultId !== undefined) {
                localVarQueryParameter['vault_id'] = vaultId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询基线白名单列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBaselineWhiteLists(listBaselineWhiteListsRequest?: ListBaselineWhiteListsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/whitelists",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let checkRuleName;
            
            let osType;
            
            let ruleType;
            
            let tag;
            
            let description;

            if (listBaselineWhiteListsRequest !== null && listBaselineWhiteListsRequest !== undefined) {
                if (listBaselineWhiteListsRequest instanceof ListBaselineWhiteListsRequest) {
                    offset = listBaselineWhiteListsRequest.offset;
                    limit = listBaselineWhiteListsRequest.limit;
                    enterpriseProjectId = listBaselineWhiteListsRequest.enterpriseProjectId;
                    checkRuleName = listBaselineWhiteListsRequest.checkRuleName;
                    osType = listBaselineWhiteListsRequest.osType;
                    ruleType = listBaselineWhiteListsRequest.ruleType;
                    tag = listBaselineWhiteListsRequest.tag;
                    description = listBaselineWhiteListsRequest.description;
                } else {
                    offset = listBaselineWhiteListsRequest['offset'];
                    limit = listBaselineWhiteListsRequest['limit'];
                    enterpriseProjectId = listBaselineWhiteListsRequest['enterprise_project_id'];
                    checkRuleName = listBaselineWhiteListsRequest['check_rule_name'];
                    osType = listBaselineWhiteListsRequest['os_type'];
                    ruleType = listBaselineWhiteListsRequest['rule_type'];
                    tag = listBaselineWhiteListsRequest['tag'];
                    description = listBaselineWhiteListsRequest['description'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listBaselineWhiteLists.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listBaselineWhiteLists.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (checkRuleName !== null && checkRuleName !== undefined) {
                localVarQueryParameter['check_rule_name'] = checkRuleName;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (ruleType !== null && ruleType !== undefined) {
                localVarQueryParameter['rule_type'] = ruleType;
            }
            if (tag !== null && tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询已拦截IP列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBlockedIp(listBlockedIpRequest?: ListBlockedIpRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/blocked-ip",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let lastDays;
            
            let hostName;
            
            let srcIp;
            
            let interceptStatus;
            
            let offset;
            
            let limit;

            if (listBlockedIpRequest !== null && listBlockedIpRequest !== undefined) {
                if (listBlockedIpRequest instanceof ListBlockedIpRequest) {
                    region = listBlockedIpRequest.region;
                    enterpriseProjectId = listBlockedIpRequest.enterpriseProjectId;
                    lastDays = listBlockedIpRequest.lastDays;
                    hostName = listBlockedIpRequest.hostName;
                    srcIp = listBlockedIpRequest.srcIp;
                    interceptStatus = listBlockedIpRequest.interceptStatus;
                    offset = listBlockedIpRequest.offset;
                    limit = listBlockedIpRequest.limit;
                } else {
                    region = listBlockedIpRequest['region'];
                    enterpriseProjectId = listBlockedIpRequest['enterprise_project_id'];
                    lastDays = listBlockedIpRequest['last_days'];
                    hostName = listBlockedIpRequest['host_name'];
                    srcIp = listBlockedIpRequest['src_ip'];
                    interceptStatus = listBlockedIpRequest['intercept_status'];
                    offset = listBlockedIpRequest['offset'];
                    limit = listBlockedIpRequest['limit'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (srcIp !== null && srcIp !== undefined) {
                localVarQueryParameter['src_ip'] = srcIp;
            }
            if (interceptStatus !== null && interceptStatus !== undefined) {
                localVarQueryParameter['intercept_status'] = interceptStatus;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCceClusterConfig(listCceClusterConfigRequest?: ListCceClusterConfigRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/configs/batch-query",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (listCceClusterConfigRequest !== null && listCceClusterConfigRequest !== undefined) {
                if (listCceClusterConfigRequest instanceof ListCceClusterConfigRequest) {
                    region = listCceClusterConfigRequest.region;
                    enterpriseProjectId = listCceClusterConfigRequest.enterpriseProjectId;
                    body = listCceClusterConfigRequest.body
                } else {
                    region = listCceClusterConfigRequest['region'];
                    enterpriseProjectId = listCceClusterConfigRequest['enterprise_project_id'];
                    body = listCceClusterConfigRequest['body'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量获取容器集群风险信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCceClusterDetectRisk(listCceClusterDetectRiskRequest?: ListCceClusterDetectRiskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/risks/query",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (listCceClusterDetectRiskRequest !== null && listCceClusterDetectRiskRequest !== undefined) {
                if (listCceClusterDetectRiskRequest instanceof ListCceClusterDetectRiskRequest) {
                    enterpriseProjectId = listCceClusterDetectRiskRequest.enterpriseProjectId;
                    body = listCceClusterDetectRiskRequest.body
                } else {
                    enterpriseProjectId = listCceClusterDetectRiskRequest['enterprise_project_id'];
                    body = listCceClusterDetectRiskRequest['body'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询检测规则列表：查询默认检测规则信息，包含14种检测规则，默认都不开启
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCheckFeatureRule(listCheckFeatureRuleRequest?: ListCheckFeatureRuleRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/rule",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let osType;

            if (listCheckFeatureRuleRequest !== null && listCheckFeatureRuleRequest !== undefined) {
                if (listCheckFeatureRuleRequest instanceof ListCheckFeatureRuleRequest) {
                    enterpriseProjectId = listCheckFeatureRuleRequest.enterpriseProjectId;
                    osType = listCheckFeatureRuleRequest.osType;
                } else {
                    enterpriseProjectId = listCheckFeatureRuleRequest['enterprise_project_id'];
                    osType = listCheckFeatureRuleRequest['os_type'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling listCheckFeatureRule.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询k8s集群审计日志列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterAuditLogs(listClusterAuditLogsRequest?: ListClusterAuditLogsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/cluster/audit-logs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let clusterName;
            
            let hostName;
            
            let hostId;
            
            let hostIp;
            
            let verb;
            
            let lineNum;

            if (listClusterAuditLogsRequest !== null && listClusterAuditLogsRequest !== undefined) {
                if (listClusterAuditLogsRequest instanceof ListClusterAuditLogsRequest) {
                    clusterId = listClusterAuditLogsRequest.clusterId;
                    startTime = listClusterAuditLogsRequest.startTime;
                    endTime = listClusterAuditLogsRequest.endTime;
                    limit = listClusterAuditLogsRequest.limit;
                    offset = listClusterAuditLogsRequest.offset;
                    enterpriseProjectId = listClusterAuditLogsRequest.enterpriseProjectId;
                    clusterName = listClusterAuditLogsRequest.clusterName;
                    hostName = listClusterAuditLogsRequest.hostName;
                    hostId = listClusterAuditLogsRequest.hostId;
                    hostIp = listClusterAuditLogsRequest.hostIp;
                    verb = listClusterAuditLogsRequest.verb;
                    lineNum = listClusterAuditLogsRequest.lineNum;
                } else {
                    clusterId = listClusterAuditLogsRequest['cluster_id'];
                    startTime = listClusterAuditLogsRequest['start_time'];
                    endTime = listClusterAuditLogsRequest['end_time'];
                    limit = listClusterAuditLogsRequest['limit'];
                    offset = listClusterAuditLogsRequest['offset'];
                    enterpriseProjectId = listClusterAuditLogsRequest['enterprise_project_id'];
                    clusterName = listClusterAuditLogsRequest['cluster_name'];
                    hostName = listClusterAuditLogsRequest['host_name'];
                    hostId = listClusterAuditLogsRequest['host_id'];
                    hostIp = listClusterAuditLogsRequest['host_ip'];
                    verb = listClusterAuditLogsRequest['verb'];
                    lineNum = listClusterAuditLogsRequest['line_num'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
                throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listClusterAuditLogs.');
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling listClusterAuditLogs.');
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listClusterAuditLogs.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterAuditLogs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterAuditLogs.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (verb !== null && verb !== undefined) {
                localVarQueryParameter['verb'] = verb;
            }
            if (lineNum !== null && lineNum !== undefined) {
                localVarQueryParameter['line_num'] = lineNum;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询k8s集群事件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterEventLogs(listClusterEventLogsRequest?: ListClusterEventLogsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/cluster/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let clusterName;
            
            let namespace;
            
            let eventName;
            
            let eventType;
            
            let resourceType;
            
            let resourceName;
            
            let reason;
            
            let lineNum;

            if (listClusterEventLogsRequest !== null && listClusterEventLogsRequest !== undefined) {
                if (listClusterEventLogsRequest instanceof ListClusterEventLogsRequest) {
                    clusterId = listClusterEventLogsRequest.clusterId;
                    startTime = listClusterEventLogsRequest.startTime;
                    endTime = listClusterEventLogsRequest.endTime;
                    limit = listClusterEventLogsRequest.limit;
                    offset = listClusterEventLogsRequest.offset;
                    enterpriseProjectId = listClusterEventLogsRequest.enterpriseProjectId;
                    clusterName = listClusterEventLogsRequest.clusterName;
                    namespace = listClusterEventLogsRequest.namespace;
                    eventName = listClusterEventLogsRequest.eventName;
                    eventType = listClusterEventLogsRequest.eventType;
                    resourceType = listClusterEventLogsRequest.resourceType;
                    resourceName = listClusterEventLogsRequest.resourceName;
                    reason = listClusterEventLogsRequest.reason;
                    lineNum = listClusterEventLogsRequest.lineNum;
                } else {
                    clusterId = listClusterEventLogsRequest['cluster_id'];
                    startTime = listClusterEventLogsRequest['start_time'];
                    endTime = listClusterEventLogsRequest['end_time'];
                    limit = listClusterEventLogsRequest['limit'];
                    offset = listClusterEventLogsRequest['offset'];
                    enterpriseProjectId = listClusterEventLogsRequest['enterprise_project_id'];
                    clusterName = listClusterEventLogsRequest['cluster_name'];
                    namespace = listClusterEventLogsRequest['namespace'];
                    eventName = listClusterEventLogsRequest['event_name'];
                    eventType = listClusterEventLogsRequest['event_type'];
                    resourceType = listClusterEventLogsRequest['resource_type'];
                    resourceName = listClusterEventLogsRequest['resource_name'];
                    reason = listClusterEventLogsRequest['reason'];
                    lineNum = listClusterEventLogsRequest['line_num'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
                throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listClusterEventLogs.');
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling listClusterEventLogs.');
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listClusterEventLogs.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterEventLogs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterEventLogs.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (resourceType !== null && resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }
            if (resourceName !== null && resourceName !== undefined) {
                localVarQueryParameter['resource_name'] = resourceName;
            }
            if (reason !== null && reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }
            if (lineNum !== null && lineNum !== undefined) {
                localVarQueryParameter['line_num'] = lineNum;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取所有集群中告警事件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterEvents(listClusterEventsRequest?: ListClusterEventsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let clusterId;

            if (listClusterEventsRequest !== null && listClusterEventsRequest !== undefined) {
                if (listClusterEventsRequest instanceof ListClusterEventsRequest) {
                    offset = listClusterEventsRequest.offset;
                    limit = listClusterEventsRequest.limit;
                    enterpriseProjectId = listClusterEventsRequest.enterpriseProjectId;
                    clusterId = listClusterEventsRequest.clusterId;
                } else {
                    offset = listClusterEventsRequest['offset'];
                    limit = listClusterEventsRequest['limit'];
                    enterpriseProjectId = listClusterEventsRequest['enterprise_project_id'];
                    clusterId = listClusterEventsRequest['cluster_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterEvents.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterEvents.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 集群防护概览
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectOverview(listClusterProtectOverviewRequest?: ListClusterProtectOverviewRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/overview",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listClusterProtectOverviewRequest !== null && listClusterProtectOverviewRequest !== undefined) {
                if (listClusterProtectOverviewRequest instanceof ListClusterProtectOverviewRequest) {
                    enterpriseProjectId = listClusterProtectOverviewRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listClusterProtectOverviewRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群防护策略模板列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectPolicyTemplates(listClusterProtectPolicyTemplatesRequest?: ListClusterProtectPolicyTemplatesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/clusters/protection-policy-templates",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let templateName;
            
            let templateType;
            
            let targetKind;
            
            let tag;
            
            let level;

            if (listClusterProtectPolicyTemplatesRequest !== null && listClusterProtectPolicyTemplatesRequest !== undefined) {
                if (listClusterProtectPolicyTemplatesRequest instanceof ListClusterProtectPolicyTemplatesRequest) {
                    limit = listClusterProtectPolicyTemplatesRequest.limit;
                    offset = listClusterProtectPolicyTemplatesRequest.offset;
                    enterpriseProjectId = listClusterProtectPolicyTemplatesRequest.enterpriseProjectId;
                    templateName = listClusterProtectPolicyTemplatesRequest.templateName;
                    templateType = listClusterProtectPolicyTemplatesRequest.templateType;
                    targetKind = listClusterProtectPolicyTemplatesRequest.targetKind;
                    tag = listClusterProtectPolicyTemplatesRequest.tag;
                    level = listClusterProtectPolicyTemplatesRequest.level;
                } else {
                    limit = listClusterProtectPolicyTemplatesRequest['limit'];
                    offset = listClusterProtectPolicyTemplatesRequest['offset'];
                    enterpriseProjectId = listClusterProtectPolicyTemplatesRequest['enterprise_project_id'];
                    templateName = listClusterProtectPolicyTemplatesRequest['template_name'];
                    templateType = listClusterProtectPolicyTemplatesRequest['template_type'];
                    targetKind = listClusterProtectPolicyTemplatesRequest['target_kind'];
                    tag = listClusterProtectPolicyTemplatesRequest['tag'];
                    level = listClusterProtectPolicyTemplatesRequest['level'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterProtectPolicyTemplates.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterProtectPolicyTemplates.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (templateName !== null && templateName !== undefined) {
                localVarQueryParameter['template_name'] = templateName;
            }
            if (templateType !== null && templateType !== undefined) {
                localVarQueryParameter['template_type'] = templateType;
            }
            if (targetKind !== null && targetKind !== undefined) {
                localVarQueryParameter['target_kind'] = targetKind;
            }
            if (tag !== null && tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }
            if (level !== null && level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群防护默认策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectionDefaultPolicy(listClusterProtectionDefaultPolicyRequest?: ListClusterProtectionDefaultPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/default-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;

            if (listClusterProtectionDefaultPolicyRequest !== null && listClusterProtectionDefaultPolicyRequest !== undefined) {
                if (listClusterProtectionDefaultPolicyRequest instanceof ListClusterProtectionDefaultPolicyRequest) {
                    offset = listClusterProtectionDefaultPolicyRequest.offset;
                    limit = listClusterProtectionDefaultPolicyRequest.limit;
                    enterpriseProjectId = listClusterProtectionDefaultPolicyRequest.enterpriseProjectId;
                } else {
                    offset = listClusterProtectionDefaultPolicyRequest['offset'];
                    limit = listClusterProtectionDefaultPolicyRequest['limit'];
                    enterpriseProjectId = listClusterProtectionDefaultPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterProtectionDefaultPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterProtectionDefaultPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群防护信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectionInfo(listClusterProtectionInfoRequest?: ListClusterProtectionInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/clusters",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;

            if (listClusterProtectionInfoRequest !== null && listClusterProtectionInfoRequest !== undefined) {
                if (listClusterProtectionInfoRequest instanceof ListClusterProtectionInfoRequest) {
                    offset = listClusterProtectionInfoRequest.offset;
                    limit = listClusterProtectionInfoRequest.limit;
                    enterpriseProjectId = listClusterProtectionInfoRequest.enterpriseProjectId;
                } else {
                    offset = listClusterProtectionInfoRequest['offset'];
                    limit = listClusterProtectionInfoRequest['limit'];
                    enterpriseProjectId = listClusterProtectionInfoRequest['enterprise_project_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterProtectionInfo.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterProtectionInfo.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群所有防护项
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectionItem(listClusterProtectionItemRequest?: ListClusterProtectionItemRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/protection-item",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listClusterProtectionItemRequest !== null && listClusterProtectionItemRequest !== undefined) {
                if (listClusterProtectionItemRequest instanceof ListClusterProtectionItemRequest) {
                    enterpriseProjectId = listClusterProtectionItemRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listClusterProtectionItemRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群防护策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectionPolicy(listClusterProtectionPolicyRequest?: ListClusterProtectionPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let clusterId;

            if (listClusterProtectionPolicyRequest !== null && listClusterProtectionPolicyRequest !== undefined) {
                if (listClusterProtectionPolicyRequest instanceof ListClusterProtectionPolicyRequest) {
                    offset = listClusterProtectionPolicyRequest.offset;
                    limit = listClusterProtectionPolicyRequest.limit;
                    enterpriseProjectId = listClusterProtectionPolicyRequest.enterpriseProjectId;
                    clusterId = listClusterProtectionPolicyRequest.clusterId;
                } else {
                    offset = listClusterProtectionPolicyRequest['offset'];
                    limit = listClusterProtectionPolicyRequest['limit'];
                    enterpriseProjectId = listClusterProtectionPolicyRequest['enterprise_project_id'];
                    clusterId = listClusterProtectionPolicyRequest['cluster_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listClusterProtectionPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listClusterProtectionPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看指定策略的详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterProtectionPolicyDetail(listClusterProtectionPolicyDetailRequest?: ListClusterProtectionPolicyDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster-protect/policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (listClusterProtectionPolicyDetailRequest !== null && listClusterProtectionPolicyDetailRequest !== undefined) {
                if (listClusterProtectionPolicyDetailRequest instanceof ListClusterProtectionPolicyDetailRequest) {
                    policyId = listClusterProtectionPolicyDetailRequest.policyId;
                    enterpriseProjectId = listClusterProtectionPolicyDetailRequest.enterpriseProjectId;
                } else {
                    policyId = listClusterProtectionPolicyDetailRequest['policy_id'];
                    enterpriseProjectId = listClusterProtectionPolicyDetailRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling listClusterProtectionPolicyDetail.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取部分提示信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCommonTips(listCommonTipsRequest?: ListCommonTipsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/common/tips",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let type;

            if (listCommonTipsRequest !== null && listCommonTipsRequest !== undefined) {
                if (listCommonTipsRequest instanceof ListCommonTipsRequest) {
                    limit = listCommonTipsRequest.limit;
                    enterpriseProjectId = listCommonTipsRequest.enterpriseProjectId;
                    type = listCommonTipsRequest.type;
                } else {
                    limit = listCommonTipsRequest['limit'];
                    enterpriseProjectId = listCommonTipsRequest['enterprise_project_id'];
                    type = listCommonTipsRequest['type'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listCommonTips.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器内运行的命令列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerCmdLogs(listContainerCmdLogsRequest?: ListContainerCmdLogsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/cmd-histories",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let clusterId;
            
            let clusterName;
            
            let hostName;
            
            let hostId;
            
            let hostIp;
            
            let containerId;
            
            let containerName;
            
            let cmd;
            
            let path;
            
            let startTime;
            
            let endTime;

            if (listContainerCmdLogsRequest !== null && listContainerCmdLogsRequest !== undefined) {
                if (listContainerCmdLogsRequest instanceof ListContainerCmdLogsRequest) {
                    limit = listContainerCmdLogsRequest.limit;
                    offset = listContainerCmdLogsRequest.offset;
                    enterpriseProjectId = listContainerCmdLogsRequest.enterpriseProjectId;
                    clusterId = listContainerCmdLogsRequest.clusterId;
                    clusterName = listContainerCmdLogsRequest.clusterName;
                    hostName = listContainerCmdLogsRequest.hostName;
                    hostId = listContainerCmdLogsRequest.hostId;
                    hostIp = listContainerCmdLogsRequest.hostIp;
                    containerId = listContainerCmdLogsRequest.containerId;
                    containerName = listContainerCmdLogsRequest.containerName;
                    cmd = listContainerCmdLogsRequest.cmd;
                    path = listContainerCmdLogsRequest.path;
                    startTime = listContainerCmdLogsRequest.startTime;
                    endTime = listContainerCmdLogsRequest.endTime;
                } else {
                    limit = listContainerCmdLogsRequest['limit'];
                    offset = listContainerCmdLogsRequest['offset'];
                    enterpriseProjectId = listContainerCmdLogsRequest['enterprise_project_id'];
                    clusterId = listContainerCmdLogsRequest['cluster_id'];
                    clusterName = listContainerCmdLogsRequest['cluster_name'];
                    hostName = listContainerCmdLogsRequest['host_name'];
                    hostId = listContainerCmdLogsRequest['host_id'];
                    hostIp = listContainerCmdLogsRequest['host_ip'];
                    containerId = listContainerCmdLogsRequest['container_id'];
                    containerName = listContainerCmdLogsRequest['container_name'];
                    cmd = listContainerCmdLogsRequest['cmd'];
                    path = listContainerCmdLogsRequest['path'];
                    startTime = listContainerCmdLogsRequest['start_time'];
                    endTime = listContainerCmdLogsRequest['end_time'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listContainerCmdLogs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listContainerCmdLogs.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (cmd !== null && cmd !== undefined) {
                localVarQueryParameter['cmd'] = cmd;
            }
            if (path !== null && path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器镜像操作日志
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerImageLogs(listContainerImageLogsRequest?: ListContainerImageLogsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/image/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let resourceName;
            
            let resourceType;
            
            let eventType;
            
            let eventName;
            
            let sourceIp;
            
            let userName;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;

            if (listContainerImageLogsRequest !== null && listContainerImageLogsRequest !== undefined) {
                if (listContainerImageLogsRequest instanceof ListContainerImageLogsRequest) {
                    resourceName = listContainerImageLogsRequest.resourceName;
                    resourceType = listContainerImageLogsRequest.resourceType;
                    eventType = listContainerImageLogsRequest.eventType;
                    eventName = listContainerImageLogsRequest.eventName;
                    sourceIp = listContainerImageLogsRequest.sourceIp;
                    userName = listContainerImageLogsRequest.userName;
                    startTime = listContainerImageLogsRequest.startTime;
                    endTime = listContainerImageLogsRequest.endTime;
                    limit = listContainerImageLogsRequest.limit;
                    offset = listContainerImageLogsRequest.offset;
                } else {
                    resourceName = listContainerImageLogsRequest['resource_name'];
                    resourceType = listContainerImageLogsRequest['resource_type'];
                    eventType = listContainerImageLogsRequest['event_type'];
                    eventName = listContainerImageLogsRequest['event_name'];
                    sourceIp = listContainerImageLogsRequest['source_ip'];
                    userName = listContainerImageLogsRequest['user_name'];
                    startTime = listContainerImageLogsRequest['start_time'];
                    endTime = listContainerImageLogsRequest['end_time'];
                    limit = listContainerImageLogsRequest['limit'];
                    offset = listContainerImageLogsRequest['offset'];
                }
            }

        
            if (resourceName !== null && resourceName !== undefined) {
                localVarQueryParameter['resource_name'] = resourceName;
            }
            if (resourceType !== null && resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (sourceIp !== null && sourceIp !== undefined) {
                localVarQueryParameter['source_ip'] = sourceIp;
            }
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器镜像列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerImages(listContainerImagesRequest?: ListContainerImagesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/images",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let keyword;

            if (listContainerImagesRequest !== null && listContainerImagesRequest !== undefined) {
                if (listContainerImagesRequest instanceof ListContainerImagesRequest) {
                    enterpriseProjectId = listContainerImagesRequest.enterpriseProjectId;
                    limit = listContainerImagesRequest.limit;
                    offset = listContainerImagesRequest.offset;
                    keyword = listContainerImagesRequest.keyword;
                } else {
                    enterpriseProjectId = listContainerImagesRequest['enterprise_project_id'];
                    limit = listContainerImagesRequest['limit'];
                    offset = listContainerImagesRequest['offset'];
                    keyword = listContainerImagesRequest['keyword'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (keyword !== null && keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器日志列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerLogs(listContainerLogsRequest?: ListContainerLogsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/logs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let clusterId;
            
            let clusterName;
            
            let namespace;
            
            let podName;
            
            let podId;
            
            let podIp;
            
            let hostIp;
            
            let containerId;
            
            let containerName;
            
            let content;
            
            let startTime;
            
            let endTime;
            
            let lineNum;

            if (listContainerLogsRequest !== null && listContainerLogsRequest !== undefined) {
                if (listContainerLogsRequest instanceof ListContainerLogsRequest) {
                    limit = listContainerLogsRequest.limit;
                    offset = listContainerLogsRequest.offset;
                    enterpriseProjectId = listContainerLogsRequest.enterpriseProjectId;
                    clusterId = listContainerLogsRequest.clusterId;
                    clusterName = listContainerLogsRequest.clusterName;
                    namespace = listContainerLogsRequest.namespace;
                    podName = listContainerLogsRequest.podName;
                    podId = listContainerLogsRequest.podId;
                    podIp = listContainerLogsRequest.podIp;
                    hostIp = listContainerLogsRequest.hostIp;
                    containerId = listContainerLogsRequest.containerId;
                    containerName = listContainerLogsRequest.containerName;
                    content = listContainerLogsRequest.content;
                    startTime = listContainerLogsRequest.startTime;
                    endTime = listContainerLogsRequest.endTime;
                    lineNum = listContainerLogsRequest.lineNum;
                } else {
                    limit = listContainerLogsRequest['limit'];
                    offset = listContainerLogsRequest['offset'];
                    enterpriseProjectId = listContainerLogsRequest['enterprise_project_id'];
                    clusterId = listContainerLogsRequest['cluster_id'];
                    clusterName = listContainerLogsRequest['cluster_name'];
                    namespace = listContainerLogsRequest['namespace'];
                    podName = listContainerLogsRequest['pod_name'];
                    podId = listContainerLogsRequest['pod_id'];
                    podIp = listContainerLogsRequest['pod_ip'];
                    hostIp = listContainerLogsRequest['host_ip'];
                    containerId = listContainerLogsRequest['container_id'];
                    containerName = listContainerLogsRequest['container_name'];
                    content = listContainerLogsRequest['content'];
                    startTime = listContainerLogsRequest['start_time'];
                    endTime = listContainerLogsRequest['end_time'];
                    lineNum = listContainerLogsRequest['line_num'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listContainerLogs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listContainerLogs.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (podName !== null && podName !== undefined) {
                localVarQueryParameter['pod_name'] = podName;
            }
            if (podId !== null && podId !== undefined) {
                localVarQueryParameter['pod_id'] = podId;
            }
            if (podIp !== null && podIp !== undefined) {
                localVarQueryParameter['pod_ip'] = podIp;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (content !== null && content !== undefined) {
                localVarQueryParameter['content'] = content;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (lineNum !== null && lineNum !== undefined) {
                localVarQueryParameter['line_num'] = lineNum;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器防护的集群信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerNetworkClusters(listContainerNetworkClustersRequest?: ListContainerNetworkClustersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/cluster",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;

            if (listContainerNetworkClustersRequest !== null && listContainerNetworkClustersRequest !== undefined) {
                if (listContainerNetworkClustersRequest instanceof ListContainerNetworkClustersRequest) {
                    limit = listContainerNetworkClustersRequest.limit;
                    offset = listContainerNetworkClustersRequest.offset;
                    enterpriseProjectId = listContainerNetworkClustersRequest.enterpriseProjectId;
                } else {
                    limit = listContainerNetworkClustersRequest['limit'];
                    offset = listContainerNetworkClustersRequest['offset'];
                    enterpriseProjectId = listContainerNetworkClustersRequest['enterprise_project_id'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listContainerNetworkClusters.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listContainerNetworkClusters.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器集群网络的策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerNetworkNodeList(listContainerNetworkNodeListRequest?: ListContainerNetworkNodeListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/node",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let queryField;
            
            let queryValue;

            if (listContainerNetworkNodeListRequest !== null && listContainerNetworkNodeListRequest !== undefined) {
                if (listContainerNetworkNodeListRequest instanceof ListContainerNetworkNodeListRequest) {
                    clusterId = listContainerNetworkNodeListRequest.clusterId;
                    limit = listContainerNetworkNodeListRequest.limit;
                    offset = listContainerNetworkNodeListRequest.offset;
                    enterpriseProjectId = listContainerNetworkNodeListRequest.enterpriseProjectId;
                    queryField = listContainerNetworkNodeListRequest.queryField;
                    queryValue = listContainerNetworkNodeListRequest.queryValue;
                } else {
                    clusterId = listContainerNetworkNodeListRequest['cluster_id'];
                    limit = listContainerNetworkNodeListRequest['limit'];
                    offset = listContainerNetworkNodeListRequest['offset'];
                    enterpriseProjectId = listContainerNetworkNodeListRequest['enterprise_project_id'];
                    queryField = listContainerNetworkNodeListRequest['query_field'];
                    queryValue = listContainerNetworkNodeListRequest['query_value'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listContainerNetworkNodeList.');
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listContainerNetworkNodeList.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listContainerNetworkNodeList.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (queryField !== null && queryField !== undefined) {
                localVarQueryParameter['query_field'] = queryField;
            }
            if (queryValue !== null && queryValue !== undefined) {
                localVarQueryParameter['query_value'] = queryValue;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器集群网络的策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerNetworkPolicy(listContainerNetworkPolicyRequest?: ListContainerNetworkPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let clusterId;
            
            let enterpriseProjectId;
            
            let namespace;
            
            let keyword;

            if (listContainerNetworkPolicyRequest !== null && listContainerNetworkPolicyRequest !== undefined) {
                if (listContainerNetworkPolicyRequest instanceof ListContainerNetworkPolicyRequest) {
                    limit = listContainerNetworkPolicyRequest.limit;
                    offset = listContainerNetworkPolicyRequest.offset;
                    clusterId = listContainerNetworkPolicyRequest.clusterId;
                    enterpriseProjectId = listContainerNetworkPolicyRequest.enterpriseProjectId;
                    namespace = listContainerNetworkPolicyRequest.namespace;
                    keyword = listContainerNetworkPolicyRequest.keyword;
                } else {
                    limit = listContainerNetworkPolicyRequest['limit'];
                    offset = listContainerNetworkPolicyRequest['offset'];
                    clusterId = listContainerNetworkPolicyRequest['cluster_id'];
                    enterpriseProjectId = listContainerNetworkPolicyRequest['enterprise_project_id'];
                    namespace = listContainerNetworkPolicyRequest['namespace'];
                    keyword = listContainerNetworkPolicyRequest['keyword'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listContainerNetworkPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listContainerNetworkPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listContainerNetworkPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (keyword !== null && keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器节点列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainerNodes(listContainerNodesRequest?: ListContainerNodesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/nodes",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostName;
            
            let agentStatus;
            
            let protectStatus;
            
            let containerTags;

            if (listContainerNodesRequest !== null && listContainerNodesRequest !== undefined) {
                if (listContainerNodesRequest instanceof ListContainerNodesRequest) {
                    region = listContainerNodesRequest.region;
                    enterpriseProjectId = listContainerNodesRequest.enterpriseProjectId;
                    offset = listContainerNodesRequest.offset;
                    limit = listContainerNodesRequest.limit;
                    hostName = listContainerNodesRequest.hostName;
                    agentStatus = listContainerNodesRequest.agentStatus;
                    protectStatus = listContainerNodesRequest.protectStatus;
                    containerTags = listContainerNodesRequest.containerTags;
                } else {
                    region = listContainerNodesRequest['region'];
                    enterpriseProjectId = listContainerNodesRequest['enterprise_project_id'];
                    offset = listContainerNodesRequest['offset'];
                    limit = listContainerNodesRequest['limit'];
                    hostName = listContainerNodesRequest['host_name'];
                    agentStatus = listContainerNodesRequest['agent_status'];
                    protectStatus = listContainerNodesRequest['protect_status'];
                    containerTags = listContainerNodesRequest['container_tags'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (agentStatus !== null && agentStatus !== undefined) {
                localVarQueryParameter['agent_status'] = agentStatus;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }
            if (containerTags !== null && containerTags !== undefined) {
                localVarQueryParameter['container_tags'] = containerTags;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listContainers(listContainersRequest?: ListContainersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let containerName;
            
            let podName;
            
            let imageName;
            
            let clusterContainer;
            
            let limit;
            
            let offset;

            if (listContainersRequest !== null && listContainersRequest !== undefined) {
                if (listContainersRequest instanceof ListContainersRequest) {
                    enterpriseProjectId = listContainersRequest.enterpriseProjectId;
                    containerName = listContainersRequest.containerName;
                    podName = listContainersRequest.podName;
                    imageName = listContainersRequest.imageName;
                    clusterContainer = listContainersRequest.clusterContainer;
                    limit = listContainersRequest.limit;
                    offset = listContainersRequest.offset;
                } else {
                    enterpriseProjectId = listContainersRequest['enterprise_project_id'];
                    containerName = listContainersRequest['container_name'];
                    podName = listContainersRequest['pod_name'];
                    imageName = listContainersRequest['image_name'];
                    clusterContainer = listContainersRequest['cluster_container'];
                    limit = listContainersRequest['limit'];
                    offset = listContainersRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (podName !== null && podName !== undefined) {
                localVarQueryParameter['pod_name'] = podName;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (clusterContainer !== null && clusterContainer !== undefined) {
                localVarQueryParameter['cluster_container'] = clusterContainer;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listDecoyPortPolicy(listDecoyPortPolicyRequest?: ListDecoyPortPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/honeypot-port/policy-list",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;

            if (listDecoyPortPolicyRequest !== null && listDecoyPortPolicyRequest !== undefined) {
                if (listDecoyPortPolicyRequest instanceof ListDecoyPortPolicyRequest) {
                    offset = listDecoyPortPolicyRequest.offset;
                    limit = listDecoyPortPolicyRequest.limit;
                    enterpriseProjectId = listDecoyPortPolicyRequest.enterpriseProjectId;
                } else {
                    offset = listDecoyPortPolicyRequest['offset'];
                    limit = listDecoyPortPolicyRequest['limit'];
                    enterpriseProjectId = listDecoyPortPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listDecoyPortPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listDecoyPortPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 下载导出文件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listDownloadExportedFile(listDownloadExportedFileRequest?: ListDownloadExportedFileRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/download/{file_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let fileId;
            
            let region;
            
            let enterpriseProjectId;

            if (listDownloadExportedFileRequest !== null && listDownloadExportedFileRequest !== undefined) {
                if (listDownloadExportedFileRequest instanceof ListDownloadExportedFileRequest) {
                    fileId = listDownloadExportedFileRequest.fileId;
                    region = listDownloadExportedFileRequest.region;
                    enterpriseProjectId = listDownloadExportedFileRequest.enterpriseProjectId;
                } else {
                    fileId = listDownloadExportedFileRequest['file_id'];
                    region = listDownloadExportedFileRequest['region'];
                    enterpriseProjectId = listDownloadExportedFileRequest['enterprise_project_id'];
                }
            }

        
            if (fileId === null || fileId === undefined) {
            throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling listDownloadExportedFile.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'file_id': fileId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询ATT&amp;CK攻击阶段统计列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listEventAttCk(listEventAttCkRequest?: ListEventAttCkRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/att-ck",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let category;
            
            let enterpriseProjectId;
            
            let lastDays;
            
            let hostName;
            
            let hostId;
            
            let privateIp;
            
            let publicIp;
            
            let containerName;
            
            let eventType;
            
            let handleStatus;
            
            let severity;
            
            let severityList;
            
            let attackTag;
            
            let assetValue;
            
            let tagList;
            
            let eventName;

            if (listEventAttCkRequest !== null && listEventAttCkRequest !== undefined) {
                if (listEventAttCkRequest instanceof ListEventAttCkRequest) {
                    region = listEventAttCkRequest.region;
                    category = listEventAttCkRequest.category;
                    enterpriseProjectId = listEventAttCkRequest.enterpriseProjectId;
                    lastDays = listEventAttCkRequest.lastDays;
                    hostName = listEventAttCkRequest.hostName;
                    hostId = listEventAttCkRequest.hostId;
                    privateIp = listEventAttCkRequest.privateIp;
                    publicIp = listEventAttCkRequest.publicIp;
                    containerName = listEventAttCkRequest.containerName;
                    eventType = listEventAttCkRequest.eventType;
                    handleStatus = listEventAttCkRequest.handleStatus;
                    severity = listEventAttCkRequest.severity;
                    severityList = listEventAttCkRequest.severityList;
                    attackTag = listEventAttCkRequest.attackTag;
                    assetValue = listEventAttCkRequest.assetValue;
                    tagList = listEventAttCkRequest.tagList;
                    eventName = listEventAttCkRequest.eventName;
                } else {
                    region = listEventAttCkRequest['region'];
                    category = listEventAttCkRequest['category'];
                    enterpriseProjectId = listEventAttCkRequest['enterprise_project_id'];
                    lastDays = listEventAttCkRequest['last_days'];
                    hostName = listEventAttCkRequest['host_name'];
                    hostId = listEventAttCkRequest['host_id'];
                    privateIp = listEventAttCkRequest['private_ip'];
                    publicIp = listEventAttCkRequest['public_ip'];
                    containerName = listEventAttCkRequest['container_name'];
                    eventType = listEventAttCkRequest['event_type'];
                    handleStatus = listEventAttCkRequest['handle_status'];
                    severity = listEventAttCkRequest['severity'];
                    severityList = listEventAttCkRequest['severity_list'];
                    attackTag = listEventAttCkRequest['attack_tag'];
                    assetValue = listEventAttCkRequest['asset_value'];
                    tagList = listEventAttCkRequest['tag_list'];
                    eventName = listEventAttCkRequest['event_name'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listEventAttCk.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (attackTag !== null && attackTag !== undefined) {
                localVarQueryParameter['attack_tag'] = attackTag;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (tagList !== null && tagList !== undefined) {
                localVarQueryParameter['tag_list'] = tagList;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询告警事件历史处置记录列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listEventHandleHistory(listEventHandleHistoryRequest?: ListEventHandleHistoryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/handle-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let severity;
            
            let attackTag;
            
            let assetValue;
            
            let eventClassIds;
            
            let eventName;
            
            let eventType;
            
            let hostName;
            
            let handleStatus;
            
            let hostIp;
            
            let publicIp;
            
            let privateIp;
            
            let sortDir;
            
            let sortKey;

            if (listEventHandleHistoryRequest !== null && listEventHandleHistoryRequest !== undefined) {
                if (listEventHandleHistoryRequest instanceof ListEventHandleHistoryRequest) {
                    limit = listEventHandleHistoryRequest.limit;
                    offset = listEventHandleHistoryRequest.offset;
                    enterpriseProjectId = listEventHandleHistoryRequest.enterpriseProjectId;
                    severity = listEventHandleHistoryRequest.severity;
                    attackTag = listEventHandleHistoryRequest.attackTag;
                    assetValue = listEventHandleHistoryRequest.assetValue;
                    eventClassIds = listEventHandleHistoryRequest.eventClassIds;
                    eventName = listEventHandleHistoryRequest.eventName;
                    eventType = listEventHandleHistoryRequest.eventType;
                    hostName = listEventHandleHistoryRequest.hostName;
                    handleStatus = listEventHandleHistoryRequest.handleStatus;
                    hostIp = listEventHandleHistoryRequest.hostIp;
                    publicIp = listEventHandleHistoryRequest.publicIp;
                    privateIp = listEventHandleHistoryRequest.privateIp;
                    sortDir = listEventHandleHistoryRequest.sortDir;
                    sortKey = listEventHandleHistoryRequest.sortKey;
                } else {
                    limit = listEventHandleHistoryRequest['limit'];
                    offset = listEventHandleHistoryRequest['offset'];
                    enterpriseProjectId = listEventHandleHistoryRequest['enterprise_project_id'];
                    severity = listEventHandleHistoryRequest['severity'];
                    attackTag = listEventHandleHistoryRequest['attack_tag'];
                    assetValue = listEventHandleHistoryRequest['asset_value'];
                    eventClassIds = listEventHandleHistoryRequest['event_class_ids'];
                    eventName = listEventHandleHistoryRequest['event_name'];
                    eventType = listEventHandleHistoryRequest['event_type'];
                    hostName = listEventHandleHistoryRequest['host_name'];
                    handleStatus = listEventHandleHistoryRequest['handle_status'];
                    hostIp = listEventHandleHistoryRequest['host_ip'];
                    publicIp = listEventHandleHistoryRequest['public_ip'];
                    privateIp = listEventHandleHistoryRequest['private_ip'];
                    sortDir = listEventHandleHistoryRequest['sort_dir'];
                    sortKey = listEventHandleHistoryRequest['sort_key'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listEventHandleHistory.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listEventHandleHistory.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (attackTag !== null && attackTag !== undefined) {
                localVarQueryParameter['attack_tag'] = attackTag;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (eventClassIds !== null && eventClassIds !== undefined) {
                localVarQueryParameter['event_class_ids'] = eventClassIds;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询资产全局扫描任务状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listGlobalAssetScanTask(listGlobalAssetScanTaskRequest?: ListGlobalAssetScanTaskRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/assign-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let category;
            
            let enterpriseProjectId;

            if (listGlobalAssetScanTaskRequest !== null && listGlobalAssetScanTaskRequest !== undefined) {
                if (listGlobalAssetScanTaskRequest instanceof ListGlobalAssetScanTaskRequest) {
                    category = listGlobalAssetScanTaskRequest.category;
                    enterpriseProjectId = listGlobalAssetScanTaskRequest.enterpriseProjectId;
                } else {
                    category = listGlobalAssetScanTaskRequest['category'];
                    enterpriseProjectId = listGlobalAssetScanTaskRequest['enterprise_project_id'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listGlobalAssetScanTask.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询今日处理漏洞/累计处理漏洞
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHandleVuls(listHandleVulsRequest?: ListHandleVulsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/handle/vulnerabilities",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let vulName;
            
            let cveId;
            
            let labelList;
            
            let status;
            
            let assetValue;
            
            let groupName;
            
            let hostName;
            
            let hostIp;
            
            let type;
            
            let handleCircle;
            
            let repairPriority;

            if (listHandleVulsRequest !== null && listHandleVulsRequest !== undefined) {
                if (listHandleVulsRequest instanceof ListHandleVulsRequest) {
                    limit = listHandleVulsRequest.limit;
                    offset = listHandleVulsRequest.offset;
                    vulName = listHandleVulsRequest.vulName;
                    cveId = listHandleVulsRequest.cveId;
                    labelList = listHandleVulsRequest.labelList;
                    status = listHandleVulsRequest.status;
                    assetValue = listHandleVulsRequest.assetValue;
                    groupName = listHandleVulsRequest.groupName;
                    hostName = listHandleVulsRequest.hostName;
                    hostIp = listHandleVulsRequest.hostIp;
                    type = listHandleVulsRequest.type;
                    handleCircle = listHandleVulsRequest.handleCircle;
                    repairPriority = listHandleVulsRequest.repairPriority;
                } else {
                    limit = listHandleVulsRequest['limit'];
                    offset = listHandleVulsRequest['offset'];
                    vulName = listHandleVulsRequest['vul_name'];
                    cveId = listHandleVulsRequest['cve_id'];
                    labelList = listHandleVulsRequest['label_list'];
                    status = listHandleVulsRequest['status'];
                    assetValue = listHandleVulsRequest['asset_value'];
                    groupName = listHandleVulsRequest['group_name'];
                    hostName = listHandleVulsRequest['host_name'];
                    hostIp = listHandleVulsRequest['host_ip'];
                    type = listHandleVulsRequest['type'];
                    handleCircle = listHandleVulsRequest['handle_circle'];
                    repairPriority = listHandleVulsRequest['repair_priority'];
                }
            }

        
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            if (cveId !== null && cveId !== undefined) {
                localVarQueryParameter['cve_id'] = cveId;
            }
            if (labelList !== null && labelList !== undefined) {
                localVarQueryParameter['label_list'] = labelList;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (handleCircle !== null && handleCircle !== undefined) {
                localVarQueryParameter['handle_circle'] = handleCircle;
            }
            if (repairPriority !== null && repairPriority !== undefined) {
                localVarQueryParameter['repair_priority'] = repairPriority;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询服务器组列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHostGroups(listHostGroupsRequest?: ListHostGroupsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/host-management/groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let groupName;

            if (listHostGroupsRequest !== null && listHostGroupsRequest !== undefined) {
                if (listHostGroupsRequest instanceof ListHostGroupsRequest) {
                    region = listHostGroupsRequest.region;
                    enterpriseProjectId = listHostGroupsRequest.enterpriseProjectId;
                    offset = listHostGroupsRequest.offset;
                    limit = listHostGroupsRequest.limit;
                    groupName = listHostGroupsRequest.groupName;
                } else {
                    region = listHostGroupsRequest['region'];
                    enterpriseProjectId = listHostGroupsRequest['enterprise_project_id'];
                    offset = listHostGroupsRequest['offset'];
                    limit = listHostGroupsRequest['limit'];
                    groupName = listHostGroupsRequest['group_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询云服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHostStatus(listHostStatusRequest?: ListHostStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/host-management/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let version;
            
            let agentStatus;
            
            let detectResult;
            
            let hostName;
            
            let hostId;
            
            let hostStatus;
            
            let osType;
            
            let privateIp;
            
            let publicIp;
            
            let ipAddr;
            
            let protectStatus;
            
            let groupId;
            
            let groupName;
            
            let vpcId;
            
            let hasIntrusion;
            
            let hasVul;
            
            let hasBaseline;
            
            let sortKey;
            
            let sortDir;
            
            let policyGroupId;
            
            let policyGroupName;
            
            let chargingMode;
            
            let refresh;
            
            let getCommonLoginLocations;
            
            let aboveVersion;
            
            let outsideHost;
            
            let assetValue;
            
            let label;
            
            let serverGroup;
            
            let agentUpgradable;
            
            let installMode;
            
            let bindingKey;
            
            let protectInterrupt;
            
            let incluster;
            
            let protectDegradation;
            
            let clusterId;
            
            let offset;
            
            let limit;

            if (listHostStatusRequest !== null && listHostStatusRequest !== undefined) {
                if (listHostStatusRequest instanceof ListHostStatusRequest) {
                    region = listHostStatusRequest.region;
                    enterpriseProjectId = listHostStatusRequest.enterpriseProjectId;
                    version = listHostStatusRequest.version;
                    agentStatus = listHostStatusRequest.agentStatus;
                    detectResult = listHostStatusRequest.detectResult;
                    hostName = listHostStatusRequest.hostName;
                    hostId = listHostStatusRequest.hostId;
                    hostStatus = listHostStatusRequest.hostStatus;
                    osType = listHostStatusRequest.osType;
                    privateIp = listHostStatusRequest.privateIp;
                    publicIp = listHostStatusRequest.publicIp;
                    ipAddr = listHostStatusRequest.ipAddr;
                    protectStatus = listHostStatusRequest.protectStatus;
                    groupId = listHostStatusRequest.groupId;
                    groupName = listHostStatusRequest.groupName;
                    vpcId = listHostStatusRequest.vpcId;
                    hasIntrusion = listHostStatusRequest.hasIntrusion;
                    hasVul = listHostStatusRequest.hasVul;
                    hasBaseline = listHostStatusRequest.hasBaseline;
                    sortKey = listHostStatusRequest.sortKey;
                    sortDir = listHostStatusRequest.sortDir;
                    policyGroupId = listHostStatusRequest.policyGroupId;
                    policyGroupName = listHostStatusRequest.policyGroupName;
                    chargingMode = listHostStatusRequest.chargingMode;
                    refresh = listHostStatusRequest.refresh;
                    getCommonLoginLocations = listHostStatusRequest.getCommonLoginLocations;
                    aboveVersion = listHostStatusRequest.aboveVersion;
                    outsideHost = listHostStatusRequest.outsideHost;
                    assetValue = listHostStatusRequest.assetValue;
                    label = listHostStatusRequest.label;
                    serverGroup = listHostStatusRequest.serverGroup;
                    agentUpgradable = listHostStatusRequest.agentUpgradable;
                    installMode = listHostStatusRequest.installMode;
                    bindingKey = listHostStatusRequest.bindingKey;
                    protectInterrupt = listHostStatusRequest.protectInterrupt;
                    incluster = listHostStatusRequest.incluster;
                    protectDegradation = listHostStatusRequest.protectDegradation;
                    clusterId = listHostStatusRequest.clusterId;
                    offset = listHostStatusRequest.offset;
                    limit = listHostStatusRequest.limit;
                } else {
                    region = listHostStatusRequest['region'];
                    enterpriseProjectId = listHostStatusRequest['enterprise_project_id'];
                    version = listHostStatusRequest['version'];
                    agentStatus = listHostStatusRequest['agent_status'];
                    detectResult = listHostStatusRequest['detect_result'];
                    hostName = listHostStatusRequest['host_name'];
                    hostId = listHostStatusRequest['host_id'];
                    hostStatus = listHostStatusRequest['host_status'];
                    osType = listHostStatusRequest['os_type'];
                    privateIp = listHostStatusRequest['private_ip'];
                    publicIp = listHostStatusRequest['public_ip'];
                    ipAddr = listHostStatusRequest['ip_addr'];
                    protectStatus = listHostStatusRequest['protect_status'];
                    groupId = listHostStatusRequest['group_id'];
                    groupName = listHostStatusRequest['group_name'];
                    vpcId = listHostStatusRequest['vpc_id'];
                    hasIntrusion = listHostStatusRequest['has_intrusion'];
                    hasVul = listHostStatusRequest['has_vul'];
                    hasBaseline = listHostStatusRequest['has_baseline'];
                    sortKey = listHostStatusRequest['sort_key'];
                    sortDir = listHostStatusRequest['sort_dir'];
                    policyGroupId = listHostStatusRequest['policy_group_id'];
                    policyGroupName = listHostStatusRequest['policy_group_name'];
                    chargingMode = listHostStatusRequest['charging_mode'];
                    refresh = listHostStatusRequest['refresh'];
                    getCommonLoginLocations = listHostStatusRequest['get_common_login_locations'];
                    aboveVersion = listHostStatusRequest['above_version'];
                    outsideHost = listHostStatusRequest['outside_host'];
                    assetValue = listHostStatusRequest['asset_value'];
                    label = listHostStatusRequest['label'];
                    serverGroup = listHostStatusRequest['server_group'];
                    agentUpgradable = listHostStatusRequest['agent_upgradable'];
                    installMode = listHostStatusRequest['install_mode'];
                    bindingKey = listHostStatusRequest['binding_key'];
                    protectInterrupt = listHostStatusRequest['protect_interrupt'];
                    incluster = listHostStatusRequest['incluster'];
                    protectDegradation = listHostStatusRequest['protect_degradation'];
                    clusterId = listHostStatusRequest['cluster_id'];
                    offset = listHostStatusRequest['offset'];
                    limit = listHostStatusRequest['limit'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (agentStatus !== null && agentStatus !== undefined) {
                localVarQueryParameter['agent_status'] = agentStatus;
            }
            if (detectResult !== null && detectResult !== undefined) {
                localVarQueryParameter['detect_result'] = detectResult;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostStatus !== null && hostStatus !== undefined) {
                localVarQueryParameter['host_status'] = hostStatus;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (ipAddr !== null && ipAddr !== undefined) {
                localVarQueryParameter['ip_addr'] = ipAddr;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            if (hasIntrusion !== null && hasIntrusion !== undefined) {
                localVarQueryParameter['has_intrusion'] = hasIntrusion;
            }
            if (hasVul !== null && hasVul !== undefined) {
                localVarQueryParameter['has_vul'] = hasVul;
            }
            if (hasBaseline !== null && hasBaseline !== undefined) {
                localVarQueryParameter['has_baseline'] = hasBaseline;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (policyGroupId !== null && policyGroupId !== undefined) {
                localVarQueryParameter['policy_group_id'] = policyGroupId;
            }
            if (policyGroupName !== null && policyGroupName !== undefined) {
                localVarQueryParameter['policy_group_name'] = policyGroupName;
            }
            if (chargingMode !== null && chargingMode !== undefined) {
                localVarQueryParameter['charging_mode'] = chargingMode;
            }
            if (refresh !== null && refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }
            if (getCommonLoginLocations !== null && getCommonLoginLocations !== undefined) {
                localVarQueryParameter['get_common_login_locations'] = getCommonLoginLocations;
            }
            if (aboveVersion !== null && aboveVersion !== undefined) {
                localVarQueryParameter['above_version'] = aboveVersion;
            }
            if (outsideHost !== null && outsideHost !== undefined) {
                localVarQueryParameter['outside_host'] = outsideHost;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (label !== null && label !== undefined) {
                localVarQueryParameter['label'] = label;
            }
            if (serverGroup !== null && serverGroup !== undefined) {
                localVarQueryParameter['server_group'] = serverGroup;
            }
            if (agentUpgradable !== null && agentUpgradable !== undefined) {
                localVarQueryParameter['agent_upgradable'] = agentUpgradable;
            }
            if (installMode !== null && installMode !== undefined) {
                localVarQueryParameter['install_mode'] = installMode;
            }
            if (bindingKey !== null && bindingKey !== undefined) {
                localVarQueryParameter['binding_key'] = bindingKey;
            }
            if (protectInterrupt !== null && protectInterrupt !== undefined) {
                localVarQueryParameter['protect_interrupt'] = protectInterrupt;
            }
            if (incluster !== null && incluster !== undefined) {
                localVarQueryParameter['incluster'] = incluster;
            }
            if (protectDegradation !== null && protectDegradation !== undefined) {
                localVarQueryParameter['protect_degradation'] = protectDegradation;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像漏洞处置操作影响的漏洞列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageHandleAffectVulnerabilities(listImageHandleAffectVulnerabilitiesRequest?: ListImageHandleAffectVulnerabilitiesRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/vulnerability/handle-affect-vulnerabilities",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let imageName;
            
            let vulName;

            if (listImageHandleAffectVulnerabilitiesRequest !== null && listImageHandleAffectVulnerabilitiesRequest !== undefined) {
                if (listImageHandleAffectVulnerabilitiesRequest instanceof ListImageHandleAffectVulnerabilitiesRequest) {
                    offset = listImageHandleAffectVulnerabilitiesRequest.offset;
                    limit = listImageHandleAffectVulnerabilitiesRequest.limit;
                    body = listImageHandleAffectVulnerabilitiesRequest.body
                    enterpriseProjectId = listImageHandleAffectVulnerabilitiesRequest.enterpriseProjectId;
                    imageName = listImageHandleAffectVulnerabilitiesRequest.imageName;
                    vulName = listImageHandleAffectVulnerabilitiesRequest.vulName;
                } else {
                    offset = listImageHandleAffectVulnerabilitiesRequest['offset'];
                    limit = listImageHandleAffectVulnerabilitiesRequest['limit'];
                    body = listImageHandleAffectVulnerabilitiesRequest['body'];
                    enterpriseProjectId = listImageHandleAffectVulnerabilitiesRequest['enterprise_project_id'];
                    imageName = listImageHandleAffectVulnerabilitiesRequest['image_name'];
                    vulName = listImageHandleAffectVulnerabilitiesRequest['vul_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listImageHandleAffectVulnerabilities.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listImageHandleAffectVulnerabilities.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 本地镜像列表查询
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageLocal(listImageLocalRequest?: ListImageLocalRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/local-repositories",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let imageName;
            
            let imageVersion;
            
            let offset;
            
            let limit;
            
            let scanStatus;
            
            let localImageType;
            
            let imageSize;
            
            let startLatestUpdateTime;
            
            let endLatestUpdateTime;
            
            let startLatestScanTime;
            
            let endLatestScanTime;
            
            let hasVul;
            
            let hostName;
            
            let hostId;
            
            let hostIp;
            
            let containerId;
            
            let containerName;
            
            let podId;
            
            let podName;
            
            let appName;

            if (listImageLocalRequest !== null && listImageLocalRequest !== undefined) {
                if (listImageLocalRequest instanceof ListImageLocalRequest) {
                    enterpriseProjectId = listImageLocalRequest.enterpriseProjectId;
                    imageName = listImageLocalRequest.imageName;
                    imageVersion = listImageLocalRequest.imageVersion;
                    offset = listImageLocalRequest.offset;
                    limit = listImageLocalRequest.limit;
                    scanStatus = listImageLocalRequest.scanStatus;
                    localImageType = listImageLocalRequest.localImageType;
                    imageSize = listImageLocalRequest.imageSize;
                    startLatestUpdateTime = listImageLocalRequest.startLatestUpdateTime;
                    endLatestUpdateTime = listImageLocalRequest.endLatestUpdateTime;
                    startLatestScanTime = listImageLocalRequest.startLatestScanTime;
                    endLatestScanTime = listImageLocalRequest.endLatestScanTime;
                    hasVul = listImageLocalRequest.hasVul;
                    hostName = listImageLocalRequest.hostName;
                    hostId = listImageLocalRequest.hostId;
                    hostIp = listImageLocalRequest.hostIp;
                    containerId = listImageLocalRequest.containerId;
                    containerName = listImageLocalRequest.containerName;
                    podId = listImageLocalRequest.podId;
                    podName = listImageLocalRequest.podName;
                    appName = listImageLocalRequest.appName;
                } else {
                    enterpriseProjectId = listImageLocalRequest['enterprise_project_id'];
                    imageName = listImageLocalRequest['image_name'];
                    imageVersion = listImageLocalRequest['image_version'];
                    offset = listImageLocalRequest['offset'];
                    limit = listImageLocalRequest['limit'];
                    scanStatus = listImageLocalRequest['scan_status'];
                    localImageType = listImageLocalRequest['local_image_type'];
                    imageSize = listImageLocalRequest['image_size'];
                    startLatestUpdateTime = listImageLocalRequest['start_latest_update_time'];
                    endLatestUpdateTime = listImageLocalRequest['end_latest_update_time'];
                    startLatestScanTime = listImageLocalRequest['start_latest_scan_time'];
                    endLatestScanTime = listImageLocalRequest['end_latest_scan_time'];
                    hasVul = listImageLocalRequest['has_vul'];
                    hostName = listImageLocalRequest['host_name'];
                    hostId = listImageLocalRequest['host_id'];
                    hostIp = listImageLocalRequest['host_ip'];
                    containerId = listImageLocalRequest['container_id'];
                    containerName = listImageLocalRequest['container_name'];
                    podId = listImageLocalRequest['pod_id'];
                    podName = listImageLocalRequest['pod_name'];
                    appName = listImageLocalRequest['app_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (imageVersion !== null && imageVersion !== undefined) {
                localVarQueryParameter['image_version'] = imageVersion;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (scanStatus !== null && scanStatus !== undefined) {
                localVarQueryParameter['scan_status'] = scanStatus;
            }
            if (localImageType !== null && localImageType !== undefined) {
                localVarQueryParameter['local_image_type'] = localImageType;
            }
            if (imageSize !== null && imageSize !== undefined) {
                localVarQueryParameter['image_size'] = imageSize;
            }
            if (startLatestUpdateTime !== null && startLatestUpdateTime !== undefined) {
                localVarQueryParameter['start_latest_update_time'] = startLatestUpdateTime;
            }
            if (endLatestUpdateTime !== null && endLatestUpdateTime !== undefined) {
                localVarQueryParameter['end_latest_update_time'] = endLatestUpdateTime;
            }
            if (startLatestScanTime !== null && startLatestScanTime !== undefined) {
                localVarQueryParameter['start_latest_scan_time'] = startLatestScanTime;
            }
            if (endLatestScanTime !== null && endLatestScanTime !== undefined) {
                localVarQueryParameter['end_latest_scan_time'] = endLatestScanTime;
            }
            if (hasVul !== null && hasVul !== undefined) {
                localVarQueryParameter['has_vul'] = hasVul;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (podId !== null && podId !== undefined) {
                localVarQueryParameter['pod_id'] = podId;
            }
            if (podName !== null && podName !== undefined) {
                localVarQueryParameter['pod_name'] = podName;
            }
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像指定安全配置项的检查项列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageRiskConfigRules(listImageRiskConfigRulesRequest?: ListImageRiskConfigRulesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/baseline/risk-configs/{check_name}/rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageType;
            
            let checkName;
            
            let standard;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let namespace;
            
            let imageName;
            
            let imageVersion;
            
            let imageId;
            
            let resultType;
            
            let checkRuleName;
            
            let severity;
            
            let instanceId;

            if (listImageRiskConfigRulesRequest !== null && listImageRiskConfigRulesRequest !== undefined) {
                if (listImageRiskConfigRulesRequest instanceof ListImageRiskConfigRulesRequest) {
                    imageType = listImageRiskConfigRulesRequest.imageType;
                    checkName = listImageRiskConfigRulesRequest.checkName;
                    standard = listImageRiskConfigRulesRequest.standard;
                    region = listImageRiskConfigRulesRequest.region;
                    enterpriseProjectId = listImageRiskConfigRulesRequest.enterpriseProjectId;
                    offset = listImageRiskConfigRulesRequest.offset;
                    limit = listImageRiskConfigRulesRequest.limit;
                    namespace = listImageRiskConfigRulesRequest.namespace;
                    imageName = listImageRiskConfigRulesRequest.imageName;
                    imageVersion = listImageRiskConfigRulesRequest.imageVersion;
                    imageId = listImageRiskConfigRulesRequest.imageId;
                    resultType = listImageRiskConfigRulesRequest.resultType;
                    checkRuleName = listImageRiskConfigRulesRequest.checkRuleName;
                    severity = listImageRiskConfigRulesRequest.severity;
                    instanceId = listImageRiskConfigRulesRequest.instanceId;
                } else {
                    imageType = listImageRiskConfigRulesRequest['image_type'];
                    checkName = listImageRiskConfigRulesRequest['check_name'];
                    standard = listImageRiskConfigRulesRequest['standard'];
                    region = listImageRiskConfigRulesRequest['region'];
                    enterpriseProjectId = listImageRiskConfigRulesRequest['enterprise_project_id'];
                    offset = listImageRiskConfigRulesRequest['offset'];
                    limit = listImageRiskConfigRulesRequest['limit'];
                    namespace = listImageRiskConfigRulesRequest['namespace'];
                    imageName = listImageRiskConfigRulesRequest['image_name'];
                    imageVersion = listImageRiskConfigRulesRequest['image_version'];
                    imageId = listImageRiskConfigRulesRequest['image_id'];
                    resultType = listImageRiskConfigRulesRequest['result_type'];
                    checkRuleName = listImageRiskConfigRulesRequest['check_rule_name'];
                    severity = listImageRiskConfigRulesRequest['severity'];
                    instanceId = listImageRiskConfigRulesRequest['instance_id'];
                }
            }

        
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling listImageRiskConfigRules.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (checkName === null || checkName === undefined) {
            throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling listImageRiskConfigRules.');
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling listImageRiskConfigRules.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (imageVersion !== null && imageVersion !== undefined) {
                localVarQueryParameter['image_version'] = imageVersion;
            }
            if (imageId !== null && imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }
            if (resultType !== null && resultType !== undefined) {
                localVarQueryParameter['result_type'] = resultType;
            }
            if (checkRuleName !== null && checkRuleName !== undefined) {
                localVarQueryParameter['check_rule_name'] = checkRuleName;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (instanceId !== null && instanceId !== undefined) {
                localVarQueryParameter['instance_id'] = instanceId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'check_name': checkName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像安全配置检测结果列表，当前支持检测CentOS 7、Debian 10、EulerOS和Ubuntu16镜像的系统配置项、SSH应用配置项。
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageRiskConfigs(listImageRiskConfigsRequest?: ListImageRiskConfigsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/baseline/risk-configs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageType;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let namespace;
            
            let imageName;
            
            let imageVersion;
            
            let imageId;
            
            let checkName;
            
            let severity;
            
            let standard;
            
            let instanceId;

            if (listImageRiskConfigsRequest !== null && listImageRiskConfigsRequest !== undefined) {
                if (listImageRiskConfigsRequest instanceof ListImageRiskConfigsRequest) {
                    imageType = listImageRiskConfigsRequest.imageType;
                    region = listImageRiskConfigsRequest.region;
                    enterpriseProjectId = listImageRiskConfigsRequest.enterpriseProjectId;
                    offset = listImageRiskConfigsRequest.offset;
                    limit = listImageRiskConfigsRequest.limit;
                    namespace = listImageRiskConfigsRequest.namespace;
                    imageName = listImageRiskConfigsRequest.imageName;
                    imageVersion = listImageRiskConfigsRequest.imageVersion;
                    imageId = listImageRiskConfigsRequest.imageId;
                    checkName = listImageRiskConfigsRequest.checkName;
                    severity = listImageRiskConfigsRequest.severity;
                    standard = listImageRiskConfigsRequest.standard;
                    instanceId = listImageRiskConfigsRequest.instanceId;
                } else {
                    imageType = listImageRiskConfigsRequest['image_type'];
                    region = listImageRiskConfigsRequest['region'];
                    enterpriseProjectId = listImageRiskConfigsRequest['enterprise_project_id'];
                    offset = listImageRiskConfigsRequest['offset'];
                    limit = listImageRiskConfigsRequest['limit'];
                    namespace = listImageRiskConfigsRequest['namespace'];
                    imageName = listImageRiskConfigsRequest['image_name'];
                    imageVersion = listImageRiskConfigsRequest['image_version'];
                    imageId = listImageRiskConfigsRequest['image_id'];
                    checkName = listImageRiskConfigsRequest['check_name'];
                    severity = listImageRiskConfigsRequest['severity'];
                    standard = listImageRiskConfigsRequest['standard'];
                    instanceId = listImageRiskConfigsRequest['instance_id'];
                }
            }

        
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling listImageRiskConfigs.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (imageVersion !== null && imageVersion !== undefined) {
                localVarQueryParameter['image_version'] = imageVersion;
            }
            if (imageId !== null && imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }
            if (checkName !== null && checkName !== undefined) {
                localVarQueryParameter['check_name'] = checkName;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (instanceId !== null && instanceId !== undefined) {
                localVarQueryParameter['instance_id'] = instanceId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像的漏洞信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageVulnerabilities(listImageVulnerabilitiesRequest?: ListImageVulnerabilitiesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/{image_id}/vulnerabilities",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageType;
            
            let imageId;
            
            let namespace;
            
            let imageName;
            
            let tagName;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let instanceId;
            
            let repairNecessity;
            
            let vulId;
            
            let appName;
            
            let type;

            if (listImageVulnerabilitiesRequest !== null && listImageVulnerabilitiesRequest !== undefined) {
                if (listImageVulnerabilitiesRequest instanceof ListImageVulnerabilitiesRequest) {
                    imageType = listImageVulnerabilitiesRequest.imageType;
                    imageId = listImageVulnerabilitiesRequest.imageId;
                    namespace = listImageVulnerabilitiesRequest.namespace;
                    imageName = listImageVulnerabilitiesRequest.imageName;
                    tagName = listImageVulnerabilitiesRequest.tagName;
                    region = listImageVulnerabilitiesRequest.region;
                    enterpriseProjectId = listImageVulnerabilitiesRequest.enterpriseProjectId;
                    offset = listImageVulnerabilitiesRequest.offset;
                    limit = listImageVulnerabilitiesRequest.limit;
                    instanceId = listImageVulnerabilitiesRequest.instanceId;
                    repairNecessity = listImageVulnerabilitiesRequest.repairNecessity;
                    vulId = listImageVulnerabilitiesRequest.vulId;
                    appName = listImageVulnerabilitiesRequest.appName;
                    type = listImageVulnerabilitiesRequest.type;
                } else {
                    imageType = listImageVulnerabilitiesRequest['image_type'];
                    imageId = listImageVulnerabilitiesRequest['image_id'];
                    namespace = listImageVulnerabilitiesRequest['namespace'];
                    imageName = listImageVulnerabilitiesRequest['image_name'];
                    tagName = listImageVulnerabilitiesRequest['tag_name'];
                    region = listImageVulnerabilitiesRequest['region'];
                    enterpriseProjectId = listImageVulnerabilitiesRequest['enterprise_project_id'];
                    offset = listImageVulnerabilitiesRequest['offset'];
                    limit = listImageVulnerabilitiesRequest['limit'];
                    instanceId = listImageVulnerabilitiesRequest['instance_id'];
                    repairNecessity = listImageVulnerabilitiesRequest['repair_necessity'];
                    vulId = listImageVulnerabilitiesRequest['vul_id'];
                    appName = listImageVulnerabilitiesRequest['app_name'];
                    type = listImageVulnerabilitiesRequest['type'];
                }
            }

        
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling listImageVulnerabilities.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (imageId === null || imageId === undefined) {
            throw new RequiredError('imageId','Required parameter imageId was null or undefined when calling listImageVulnerabilities.');
            }
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling listImageVulnerabilities.');
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (imageName === null || imageName === undefined) {
                throw new RequiredError('imageName','Required parameter imageName was null or undefined when calling listImageVulnerabilities.');
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (tagName === null || tagName === undefined) {
                throw new RequiredError('tagName','Required parameter tagName was null or undefined when calling listImageVulnerabilities.');
            }
            if (tagName !== null && tagName !== undefined) {
                localVarQueryParameter['tag_name'] = tagName;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (instanceId !== null && instanceId !== undefined) {
                localVarQueryParameter['instance_id'] = instanceId;
            }
            if (repairNecessity !== null && repairNecessity !== undefined) {
                localVarQueryParameter['repair_necessity'] = repairNecessity;
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'image_id': imageId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询已隔离文件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listIsolatedFile(listIsolatedFileRequest?: ListIsolatedFileRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/isolated-file",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let filePath;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let fileHash;
            
            let assetValue;
            
            let offset;
            
            let limit;
            
            let isolationStatus;
            
            let lastDays;
            
            let beginTime;
            
            let endTime;

            if (listIsolatedFileRequest !== null && listIsolatedFileRequest !== undefined) {
                if (listIsolatedFileRequest instanceof ListIsolatedFileRequest) {
                    region = listIsolatedFileRequest.region;
                    enterpriseProjectId = listIsolatedFileRequest.enterpriseProjectId;
                    filePath = listIsolatedFileRequest.filePath;
                    hostName = listIsolatedFileRequest.hostName;
                    privateIp = listIsolatedFileRequest.privateIp;
                    publicIp = listIsolatedFileRequest.publicIp;
                    fileHash = listIsolatedFileRequest.fileHash;
                    assetValue = listIsolatedFileRequest.assetValue;
                    offset = listIsolatedFileRequest.offset;
                    limit = listIsolatedFileRequest.limit;
                    isolationStatus = listIsolatedFileRequest.isolationStatus;
                    lastDays = listIsolatedFileRequest.lastDays;
                    beginTime = listIsolatedFileRequest.beginTime;
                    endTime = listIsolatedFileRequest.endTime;
                } else {
                    region = listIsolatedFileRequest['region'];
                    enterpriseProjectId = listIsolatedFileRequest['enterprise_project_id'];
                    filePath = listIsolatedFileRequest['file_path'];
                    hostName = listIsolatedFileRequest['host_name'];
                    privateIp = listIsolatedFileRequest['private_ip'];
                    publicIp = listIsolatedFileRequest['public_ip'];
                    fileHash = listIsolatedFileRequest['file_hash'];
                    assetValue = listIsolatedFileRequest['asset_value'];
                    offset = listIsolatedFileRequest['offset'];
                    limit = listIsolatedFileRequest['limit'];
                    isolationStatus = listIsolatedFileRequest['isolation_status'];
                    lastDays = listIsolatedFileRequest['last_days'];
                    beginTime = listIsolatedFileRequest['begin_time'];
                    endTime = listIsolatedFileRequest['end_time'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (fileHash !== null && fileHash !== undefined) {
                localVarQueryParameter['file_hash'] = fileHash;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (isolationStatus !== null && isolationStatus !== undefined) {
                localVarQueryParameter['isolation_status'] = isolationStatus;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询指定中间件的服务器列表，通过传入中间件名称参数，返回对应的中间件服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listJarPackageHostInfo(listJarPackageHostInfoRequest?: ListJarPackageHostInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/midwares/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let fileName;
            
            let enterpriseProjectId;
            
            let category;
            
            let hostName;
            
            let hostIp;
            
            let limit;
            
            let offset;
            
            let partMatch;

            if (listJarPackageHostInfoRequest !== null && listJarPackageHostInfoRequest !== undefined) {
                if (listJarPackageHostInfoRequest instanceof ListJarPackageHostInfoRequest) {
                    fileName = listJarPackageHostInfoRequest.fileName;
                    enterpriseProjectId = listJarPackageHostInfoRequest.enterpriseProjectId;
                    category = listJarPackageHostInfoRequest.category;
                    hostName = listJarPackageHostInfoRequest.hostName;
                    hostIp = listJarPackageHostInfoRequest.hostIp;
                    limit = listJarPackageHostInfoRequest.limit;
                    offset = listJarPackageHostInfoRequest.offset;
                    partMatch = listJarPackageHostInfoRequest.partMatch;
                } else {
                    fileName = listJarPackageHostInfoRequest['file_name'];
                    enterpriseProjectId = listJarPackageHostInfoRequest['enterprise_project_id'];
                    category = listJarPackageHostInfoRequest['category'];
                    hostName = listJarPackageHostInfoRequest['host_name'];
                    hostIp = listJarPackageHostInfoRequest['host_ip'];
                    limit = listJarPackageHostInfoRequest['limit'];
                    offset = listJarPackageHostInfoRequest['offset'];
                    partMatch = listJarPackageHostInfoRequest['part_match'];
                }
            }

        
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling listJarPackageHostInfo.');
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-主机管理-指纹类型-中间件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listJarPackageInfo(listJarPackageInfoRequest?: ListJarPackageInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/{host_id}/jar-package",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let category;
            
            let enterpriseProjectId;
            
            let fileName;

            if (listJarPackageInfoRequest !== null && listJarPackageInfoRequest !== undefined) {
                if (listJarPackageInfoRequest instanceof ListJarPackageInfoRequest) {
                    hostId = listJarPackageInfoRequest.hostId;
                    category = listJarPackageInfoRequest.category;
                    enterpriseProjectId = listJarPackageInfoRequest.enterpriseProjectId;
                    fileName = listJarPackageInfoRequest.fileName;
                } else {
                    hostId = listJarPackageInfoRequest['host_id'];
                    category = listJarPackageInfoRequest['category'];
                    enterpriseProjectId = listJarPackageInfoRequest['enterprise_project_id'];
                    fileName = listJarPackageInfoRequest['file_name'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listJarPackageInfo.');
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listJarPackageInfo.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询中间件列表，支持通过中间件名称查询对应的服务器树
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listJarPackageStatistics(listJarPackageStatisticsRequest?: ListJarPackageStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/midwares",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let fileName;
            
            let category;
            
            let limit;
            
            let offset;

            if (listJarPackageStatisticsRequest !== null && listJarPackageStatisticsRequest !== undefined) {
                if (listJarPackageStatisticsRequest instanceof ListJarPackageStatisticsRequest) {
                    enterpriseProjectId = listJarPackageStatisticsRequest.enterpriseProjectId;
                    fileName = listJarPackageStatisticsRequest.fileName;
                    category = listJarPackageStatisticsRequest.category;
                    limit = listJarPackageStatisticsRequest.limit;
                    offset = listJarPackageStatisticsRequest.offset;
                } else {
                    enterpriseProjectId = listJarPackageStatisticsRequest['enterprise_project_id'];
                    fileName = listJarPackageStatisticsRequest['file_name'];
                    category = listJarPackageStatisticsRequest['category'];
                    limit = listJarPackageStatisticsRequest['limit'];
                    offset = listJarPackageStatisticsRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询cronjobs基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sCronJobs(listK8sCronJobsRequest?: ListK8sCronJobsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/cronjobs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let offset;
            
            let cronjobName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sCronJobsRequest !== null && listK8sCronJobsRequest !== undefined) {
                if (listK8sCronJobsRequest instanceof ListK8sCronJobsRequest) {
                    limit = listK8sCronJobsRequest.limit;
                    enterpriseProjectId = listK8sCronJobsRequest.enterpriseProjectId;
                    offset = listK8sCronJobsRequest.offset;
                    cronjobName = listK8sCronJobsRequest.cronjobName;
                    namespaceName = listK8sCronJobsRequest.namespaceName;
                    clusterName = listK8sCronJobsRequest.clusterName;
                } else {
                    limit = listK8sCronJobsRequest['limit'];
                    enterpriseProjectId = listK8sCronJobsRequest['enterprise_project_id'];
                    offset = listK8sCronJobsRequest['offset'];
                    cronjobName = listK8sCronJobsRequest['cronjob_name'];
                    namespaceName = listK8sCronJobsRequest['namespace_name'];
                    clusterName = listK8sCronJobsRequest['cluster_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listK8sCronJobs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (cronjobName !== null && cronjobName !== undefined) {
                localVarQueryParameter['cronjob_name'] = cronjobName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询daemonsets基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sDaemonSets(listK8sDaemonSetsRequest?: ListK8sDaemonSetsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/daemonsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let offset;
            
            let daemonsetName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sDaemonSetsRequest !== null && listK8sDaemonSetsRequest !== undefined) {
                if (listK8sDaemonSetsRequest instanceof ListK8sDaemonSetsRequest) {
                    limit = listK8sDaemonSetsRequest.limit;
                    enterpriseProjectId = listK8sDaemonSetsRequest.enterpriseProjectId;
                    offset = listK8sDaemonSetsRequest.offset;
                    daemonsetName = listK8sDaemonSetsRequest.daemonsetName;
                    namespaceName = listK8sDaemonSetsRequest.namespaceName;
                    clusterName = listK8sDaemonSetsRequest.clusterName;
                } else {
                    limit = listK8sDaemonSetsRequest['limit'];
                    enterpriseProjectId = listK8sDaemonSetsRequest['enterprise_project_id'];
                    offset = listK8sDaemonSetsRequest['offset'];
                    daemonsetName = listK8sDaemonSetsRequest['daemonset_name'];
                    namespaceName = listK8sDaemonSetsRequest['namespace_name'];
                    clusterName = listK8sDaemonSetsRequest['cluster_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listK8sDaemonSets.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (daemonsetName !== null && daemonsetName !== undefined) {
                localVarQueryParameter['daemonset_name'] = daemonsetName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询deployment基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sDeployments(listK8sDeploymentsRequest?: ListK8sDeploymentsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/deployments",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let offset;
            
            let deploymentName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sDeploymentsRequest !== null && listK8sDeploymentsRequest !== undefined) {
                if (listK8sDeploymentsRequest instanceof ListK8sDeploymentsRequest) {
                    limit = listK8sDeploymentsRequest.limit;
                    enterpriseProjectId = listK8sDeploymentsRequest.enterpriseProjectId;
                    offset = listK8sDeploymentsRequest.offset;
                    deploymentName = listK8sDeploymentsRequest.deploymentName;
                    namespaceName = listK8sDeploymentsRequest.namespaceName;
                    clusterName = listK8sDeploymentsRequest.clusterName;
                } else {
                    limit = listK8sDeploymentsRequest['limit'];
                    enterpriseProjectId = listK8sDeploymentsRequest['enterprise_project_id'];
                    offset = listK8sDeploymentsRequest['offset'];
                    deploymentName = listK8sDeploymentsRequest['deployment_name'];
                    namespaceName = listK8sDeploymentsRequest['namespace_name'];
                    clusterName = listK8sDeploymentsRequest['cluster_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listK8sDeployments.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (deploymentName !== null && deploymentName !== undefined) {
                localVarQueryParameter['deployment_name'] = deploymentName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询jobs基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sJobs(listK8sJobsRequest?: ListK8sJobsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/jobs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let offset;
            
            let jobName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sJobsRequest !== null && listK8sJobsRequest !== undefined) {
                if (listK8sJobsRequest instanceof ListK8sJobsRequest) {
                    limit = listK8sJobsRequest.limit;
                    enterpriseProjectId = listK8sJobsRequest.enterpriseProjectId;
                    offset = listK8sJobsRequest.offset;
                    jobName = listK8sJobsRequest.jobName;
                    namespaceName = listK8sJobsRequest.namespaceName;
                    clusterName = listK8sJobsRequest.clusterName;
                } else {
                    limit = listK8sJobsRequest['limit'];
                    enterpriseProjectId = listK8sJobsRequest['enterprise_project_id'];
                    offset = listK8sJobsRequest['offset'];
                    jobName = listK8sJobsRequest['job_name'];
                    namespaceName = listK8sJobsRequest['namespace_name'];
                    clusterName = listK8sJobsRequest['cluster_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listK8sJobs.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (jobName !== null && jobName !== undefined) {
                localVarQueryParameter['job_name'] = jobName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询pod基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sPods(listK8sPodsRequest?: ListK8sPodsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/pods",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let podName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sPodsRequest !== null && listK8sPodsRequest !== undefined) {
                if (listK8sPodsRequest instanceof ListK8sPodsRequest) {
                    enterpriseProjectId = listK8sPodsRequest.enterpriseProjectId;
                    offset = listK8sPodsRequest.offset;
                    limit = listK8sPodsRequest.limit;
                    podName = listK8sPodsRequest.podName;
                    namespaceName = listK8sPodsRequest.namespaceName;
                    clusterName = listK8sPodsRequest.clusterName;
                } else {
                    enterpriseProjectId = listK8sPodsRequest['enterprise_project_id'];
                    offset = listK8sPodsRequest['offset'];
                    limit = listK8sPodsRequest['limit'];
                    podName = listK8sPodsRequest['pod_name'];
                    namespaceName = listK8sPodsRequest['namespace_name'];
                    clusterName = listK8sPodsRequest['cluster_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (podName !== null && podName !== undefined) {
                localVarQueryParameter['pod_name'] = podName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询statefulset基本信息列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listK8sStatefulSets(listK8sStatefulSetsRequest?: ListK8sStatefulSetsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/statefulsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let enterpriseProjectId;
            
            let offset;
            
            let statefulsetName;
            
            let namespaceName;
            
            let clusterName;

            if (listK8sStatefulSetsRequest !== null && listK8sStatefulSetsRequest !== undefined) {
                if (listK8sStatefulSetsRequest instanceof ListK8sStatefulSetsRequest) {
                    limit = listK8sStatefulSetsRequest.limit;
                    enterpriseProjectId = listK8sStatefulSetsRequest.enterpriseProjectId;
                    offset = listK8sStatefulSetsRequest.offset;
                    statefulsetName = listK8sStatefulSetsRequest.statefulsetName;
                    namespaceName = listK8sStatefulSetsRequest.namespaceName;
                    clusterName = listK8sStatefulSetsRequest.clusterName;
                } else {
                    limit = listK8sStatefulSetsRequest['limit'];
                    enterpriseProjectId = listK8sStatefulSetsRequest['enterprise_project_id'];
                    offset = listK8sStatefulSetsRequest['offset'];
                    statefulsetName = listK8sStatefulSetsRequest['statefulset_name'];
                    namespaceName = listK8sStatefulSetsRequest['namespace_name'];
                    clusterName = listK8sStatefulSetsRequest['cluster_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listK8sStatefulSets.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (statefulsetName !== null && statefulsetName !== undefined) {
                localVarQueryParameter['statefulset_name'] = statefulsetName;
            }
            if (namespaceName !== null && namespaceName !== undefined) {
                localVarQueryParameter['namespace_name'] = namespaceName;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-内核模块的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKernelModuleHostInfo(listKernelModuleHostInfoRequest?: ListKernelModuleHostInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/host/kernel-module",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let name;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostName;
            
            let hostIp;
            
            let partMatch;

            if (listKernelModuleHostInfoRequest !== null && listKernelModuleHostInfoRequest !== undefined) {
                if (listKernelModuleHostInfoRequest instanceof ListKernelModuleHostInfoRequest) {
                    name = listKernelModuleHostInfoRequest.name;
                    enterpriseProjectId = listKernelModuleHostInfoRequest.enterpriseProjectId;
                    offset = listKernelModuleHostInfoRequest.offset;
                    limit = listKernelModuleHostInfoRequest.limit;
                    hostName = listKernelModuleHostInfoRequest.hostName;
                    hostIp = listKernelModuleHostInfoRequest.hostIp;
                    partMatch = listKernelModuleHostInfoRequest.partMatch;
                } else {
                    name = listKernelModuleHostInfoRequest['name'];
                    enterpriseProjectId = listKernelModuleHostInfoRequest['enterprise_project_id'];
                    offset = listKernelModuleHostInfoRequest['offset'];
                    limit = listKernelModuleHostInfoRequest['limit'];
                    hostName = listKernelModuleHostInfoRequest['host_name'];
                    hostIp = listKernelModuleHostInfoRequest['host_ip'];
                    partMatch = listKernelModuleHostInfoRequest['part_match'];
                }
            }

        
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listKernelModuleHostInfo.');
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-主机管理-指纹类型-内核模块
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKernelModuleInfo(listKernelModuleInfoRequest?: ListKernelModuleInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/{host_id}/kernel-module",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let name;

            if (listKernelModuleInfoRequest !== null && listKernelModuleInfoRequest !== undefined) {
                if (listKernelModuleInfoRequest instanceof ListKernelModuleInfoRequest) {
                    hostId = listKernelModuleInfoRequest.hostId;
                    enterpriseProjectId = listKernelModuleInfoRequest.enterpriseProjectId;
                    name = listKernelModuleInfoRequest.name;
                } else {
                    hostId = listKernelModuleInfoRequest['host_id'];
                    enterpriseProjectId = listKernelModuleInfoRequest['enterprise_project_id'];
                    name = listKernelModuleInfoRequest['name'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listKernelModuleInfo.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-内核模块左侧树
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKernelModuleStatistics(listKernelModuleStatisticsRequest?: ListKernelModuleStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/statistics/kernel-module",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let name;

            if (listKernelModuleStatisticsRequest !== null && listKernelModuleStatisticsRequest !== undefined) {
                if (listKernelModuleStatisticsRequest instanceof ListKernelModuleStatisticsRequest) {
                    enterpriseProjectId = listKernelModuleStatisticsRequest.enterpriseProjectId;
                    offset = listKernelModuleStatisticsRequest.offset;
                    limit = listKernelModuleStatisticsRequest.limit;
                    name = listKernelModuleStatisticsRequest.name;
                } else {
                    enterpriseProjectId = listKernelModuleStatisticsRequest['enterprise_project_id'];
                    offset = listKernelModuleStatisticsRequest['offset'];
                    limit = listKernelModuleStatisticsRequest['limit'];
                    name = listKernelModuleStatisticsRequest['name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器Kubernetes集群列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKubernetesClusterDetails(listKubernetesClusterDetailsRequest?: ListKubernetesClusterDetailsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/clusters",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let clusterName;
            
            let loadAgentInfo;
            
            let scene;

            if (listKubernetesClusterDetailsRequest !== null && listKubernetesClusterDetailsRequest !== undefined) {
                if (listKubernetesClusterDetailsRequest instanceof ListKubernetesClusterDetailsRequest) {
                    enterpriseProjectId = listKubernetesClusterDetailsRequest.enterpriseProjectId;
                    offset = listKubernetesClusterDetailsRequest.offset;
                    limit = listKubernetesClusterDetailsRequest.limit;
                    clusterName = listKubernetesClusterDetailsRequest.clusterName;
                    loadAgentInfo = listKubernetesClusterDetailsRequest.loadAgentInfo;
                    scene = listKubernetesClusterDetailsRequest.scene;
                } else {
                    enterpriseProjectId = listKubernetesClusterDetailsRequest['enterprise_project_id'];
                    offset = listKubernetesClusterDetailsRequest['offset'];
                    limit = listKubernetesClusterDetailsRequest['limit'];
                    clusterName = listKubernetesClusterDetailsRequest['cluster_name'];
                    loadAgentInfo = listKubernetesClusterDetailsRequest['load_agent_info'];
                    scene = listKubernetesClusterDetailsRequest['scene'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (loadAgentInfo !== null && loadAgentInfo !== undefined) {
                localVarQueryParameter['load_agent_info'] = loadAgentInfo;
            }
            if (scene !== null && scene !== undefined) {
                localVarQueryParameter['scene'] = scene;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器Kubernetes端点列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKubernetesEndpointDetails(listKubernetesEndpointDetailsRequest?: ListKubernetesEndpointDetailsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/endpoints",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let name;
            
            let clusterName;
            
            let namespace;

            if (listKubernetesEndpointDetailsRequest !== null && listKubernetesEndpointDetailsRequest !== undefined) {
                if (listKubernetesEndpointDetailsRequest instanceof ListKubernetesEndpointDetailsRequest) {
                    enterpriseProjectId = listKubernetesEndpointDetailsRequest.enterpriseProjectId;
                    offset = listKubernetesEndpointDetailsRequest.offset;
                    limit = listKubernetesEndpointDetailsRequest.limit;
                    name = listKubernetesEndpointDetailsRequest.name;
                    clusterName = listKubernetesEndpointDetailsRequest.clusterName;
                    namespace = listKubernetesEndpointDetailsRequest.namespace;
                } else {
                    enterpriseProjectId = listKubernetesEndpointDetailsRequest['enterprise_project_id'];
                    offset = listKubernetesEndpointDetailsRequest['offset'];
                    limit = listKubernetesEndpointDetailsRequest['limit'];
                    name = listKubernetesEndpointDetailsRequest['name'];
                    clusterName = listKubernetesEndpointDetailsRequest['cluster_name'];
                    namespace = listKubernetesEndpointDetailsRequest['namespace'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器Kubernetes服务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listKubernetesServiceDetails(listKubernetesServiceDetailsRequest?: ListKubernetesServiceDetailsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/services",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let name;
            
            let clusterName;
            
            let namespace;

            if (listKubernetesServiceDetailsRequest !== null && listKubernetesServiceDetailsRequest !== undefined) {
                if (listKubernetesServiceDetailsRequest instanceof ListKubernetesServiceDetailsRequest) {
                    enterpriseProjectId = listKubernetesServiceDetailsRequest.enterpriseProjectId;
                    offset = listKubernetesServiceDetailsRequest.offset;
                    limit = listKubernetesServiceDetailsRequest.limit;
                    name = listKubernetesServiceDetailsRequest.name;
                    clusterName = listKubernetesServiceDetailsRequest.clusterName;
                    namespace = listKubernetesServiceDetailsRequest.namespace;
                } else {
                    enterpriseProjectId = listKubernetesServiceDetailsRequest['enterprise_project_id'];
                    offset = listKubernetesServiceDetailsRequest['offset'];
                    limit = listKubernetesServiceDetailsRequest['limit'];
                    name = listKubernetesServiceDetailsRequest['name'];
                    clusterName = listKubernetesServiceDetailsRequest['cluster_name'];
                    namespace = listKubernetesServiceDetailsRequest['namespace'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询常用登录IP信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listLoginCommonIp(listLoginCommonIpRequest?: ListLoginCommonIpRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/login-common-ip",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let ipAddr;

            if (listLoginCommonIpRequest !== null && listLoginCommonIpRequest !== undefined) {
                if (listLoginCommonIpRequest instanceof ListLoginCommonIpRequest) {
                    enterpriseProjectId = listLoginCommonIpRequest.enterpriseProjectId;
                    ipAddr = listLoginCommonIpRequest.ipAddr;
                } else {
                    enterpriseProjectId = listLoginCommonIpRequest['enterprise_project_id'];
                    ipAddr = listLoginCommonIpRequest['ip_addr'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (ipAddr !== null && ipAddr !== undefined) {
                localVarQueryParameter['ip_addr'] = ipAddr;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询常用登录地信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listLoginCommonLocation(listLoginCommonLocationRequest?: ListLoginCommonLocationRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/login-common-location",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let areaCode;

            if (listLoginCommonLocationRequest !== null && listLoginCommonLocationRequest !== undefined) {
                if (listLoginCommonLocationRequest instanceof ListLoginCommonLocationRequest) {
                    enterpriseProjectId = listLoginCommonLocationRequest.enterpriseProjectId;
                    areaCode = listLoginCommonLocationRequest.areaCode;
                } else {
                    enterpriseProjectId = listLoginCommonLocationRequest['enterprise_project_id'];
                    areaCode = listLoginCommonLocationRequest['area_code'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (areaCode !== null && areaCode !== undefined) {
                localVarQueryParameter['area_code'] = areaCode;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询SSH登录IP白名单列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listLoginWhiteIp(listLoginWhiteIpRequest?: ListLoginWhiteIpRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/login-white-ip",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let whiteIp;

            if (listLoginWhiteIpRequest !== null && listLoginWhiteIpRequest !== undefined) {
                if (listLoginWhiteIpRequest instanceof ListLoginWhiteIpRequest) {
                    enterpriseProjectId = listLoginWhiteIpRequest.enterpriseProjectId;
                    whiteIp = listLoginWhiteIpRequest.whiteIp;
                } else {
                    enterpriseProjectId = listLoginWhiteIpRequest['enterprise_project_id'];
                    whiteIp = listLoginWhiteIpRequest['white_ip'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (whiteIp !== null && whiteIp !== undefined) {
                localVarQueryParameter['white_ip'] = whiteIp;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询登录白名单列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listLoginWhiteList(listLoginWhiteListRequest?: ListLoginWhiteListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/white-list/login",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let privateIp;
            
            let loginIp;
            
            let loginUserName;

            if (listLoginWhiteListRequest !== null && listLoginWhiteListRequest !== undefined) {
                if (listLoginWhiteListRequest instanceof ListLoginWhiteListRequest) {
                    offset = listLoginWhiteListRequest.offset;
                    limit = listLoginWhiteListRequest.limit;
                    enterpriseProjectId = listLoginWhiteListRequest.enterpriseProjectId;
                    privateIp = listLoginWhiteListRequest.privateIp;
                    loginIp = listLoginWhiteListRequest.loginIp;
                    loginUserName = listLoginWhiteListRequest.loginUserName;
                } else {
                    offset = listLoginWhiteListRequest['offset'];
                    limit = listLoginWhiteListRequest['limit'];
                    enterpriseProjectId = listLoginWhiteListRequest['enterprise_project_id'];
                    privateIp = listLoginWhiteListRequest['private_ip'];
                    loginIp = listLoginWhiteListRequest['login_ip'];
                    loginUserName = listLoginWhiteListRequest['login_user_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listLoginWhiteList.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listLoginWhiteList.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (loginIp !== null && loginIp !== undefined) {
                localVarQueryParameter['login_ip'] = loginIp;
            }
            if (loginUserName !== null && loginUserName !== undefined) {
                localVarQueryParameter['login_user_name'] = loginUserName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询恶意软件云查样本收集配置开关状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listMalwareCollectStatus(listMalwareCollectStatusRequest?: ListMalwareCollectStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/malware/collect",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listMalwareCollectStatusRequest !== null && listMalwareCollectStatusRequest !== undefined) {
                if (listMalwareCollectStatusRequest instanceof ListMalwareCollectStatusRequest) {
                    enterpriseProjectId = listMalwareCollectStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listMalwareCollectStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群下的namespace
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listNamespaces(listNamespacesRequest?: ListNamespacesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/namespace",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (listNamespacesRequest !== null && listNamespacesRequest !== undefined) {
                if (listNamespacesRequest instanceof ListNamespacesRequest) {
                    clusterId = listNamespacesRequest.clusterId;
                    enterpriseProjectId = listNamespacesRequest.enterpriseProjectId;
                } else {
                    clusterId = listNamespacesRequest['cluster_id'];
                    enterpriseProjectId = listNamespacesRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listNamespaces.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询备份恢复任务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listOperationLogsByVaultName(listOperationLogsByVaultNameRequest?: ListOperationLogsByVaultNameRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/ransomware/backup/operation-logs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let status;
            
            let resourceName;
            
            let lastDays;

            if (listOperationLogsByVaultNameRequest !== null && listOperationLogsByVaultNameRequest !== undefined) {
                if (listOperationLogsByVaultNameRequest instanceof ListOperationLogsByVaultNameRequest) {
                    offset = listOperationLogsByVaultNameRequest.offset;
                    limit = listOperationLogsByVaultNameRequest.limit;
                    enterpriseProjectId = listOperationLogsByVaultNameRequest.enterpriseProjectId;
                    status = listOperationLogsByVaultNameRequest.status;
                    resourceName = listOperationLogsByVaultNameRequest.resourceName;
                    lastDays = listOperationLogsByVaultNameRequest.lastDays;
                } else {
                    offset = listOperationLogsByVaultNameRequest['offset'];
                    limit = listOperationLogsByVaultNameRequest['limit'];
                    enterpriseProjectId = listOperationLogsByVaultNameRequest['enterprise_project_id'];
                    status = listOperationLogsByVaultNameRequest['status'];
                    resourceName = listOperationLogsByVaultNameRequest['resource_name'];
                    lastDays = listOperationLogsByVaultNameRequest['last_days'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listOperationLogsByVaultName.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listOperationLogsByVaultName.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (resourceName !== null && resourceName !== undefined) {
                localVarQueryParameter['resource_name'] = resourceName;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询账号组织
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listOrganizationTree(listOrganizationTreeRequest?: ListOrganizationTreeRequest) {
            const options = {
                method: "GET",
                url: "/v5/setting/account/organization-tree",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let xSecurityToken;
            
            let region;
            
            let isRefresh;
            
            let enterpriseProjectId;

            if (listOrganizationTreeRequest !== null && listOrganizationTreeRequest !== undefined) {
                if (listOrganizationTreeRequest instanceof ListOrganizationTreeRequest) {
                    xSecurityToken = listOrganizationTreeRequest.xSecurityToken;
                    region = listOrganizationTreeRequest.region;
                    isRefresh = listOrganizationTreeRequest.isRefresh;
                    enterpriseProjectId = listOrganizationTreeRequest.enterpriseProjectId;
                } else {
                    xSecurityToken = listOrganizationTreeRequest['X-Security-Token'];
                    region = listOrganizationTreeRequest['region'];
                    isRefresh = listOrganizationTreeRequest['is_refresh'];
                    enterpriseProjectId = listOrganizationTreeRequest['enterprise_project_id'];
                }
            }

        
            if (isRefresh !== null && isRefresh !== undefined) {
                localVarQueryParameter['is_refresh'] = isRefresh;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (xSecurityToken !== undefined && xSecurityToken !== null) {
                localVarHeaderParameter['X-Security-Token'] = String(xSecurityToken);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询口令复杂度策略检测报告
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPasswordComplexity(listPasswordComplexityRequest?: ListPasswordComplexityRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/password-complexity",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostIp;
            
            let hostId;
            
            let resultType;
            
            let limit;
            
            let offset;

            if (listPasswordComplexityRequest !== null && listPasswordComplexityRequest !== undefined) {
                if (listPasswordComplexityRequest instanceof ListPasswordComplexityRequest) {
                    enterpriseProjectId = listPasswordComplexityRequest.enterpriseProjectId;
                    hostName = listPasswordComplexityRequest.hostName;
                    hostIp = listPasswordComplexityRequest.hostIp;
                    hostId = listPasswordComplexityRequest.hostId;
                    resultType = listPasswordComplexityRequest.resultType;
                    limit = listPasswordComplexityRequest.limit;
                    offset = listPasswordComplexityRequest.offset;
                } else {
                    enterpriseProjectId = listPasswordComplexityRequest['enterprise_project_id'];
                    hostName = listPasswordComplexityRequest['host_name'];
                    hostIp = listPasswordComplexityRequest['host_ip'];
                    hostId = listPasswordComplexityRequest['host_id'];
                    resultType = listPasswordComplexityRequest['result_type'];
                    limit = listPasswordComplexityRequest['limit'];
                    offset = listPasswordComplexityRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (resultType !== null && resultType !== undefined) {
                localVarQueryParameter['result_type'] = resultType;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取docker插件安装脚本
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPluginInstallScript(listPluginInstallScriptRequest?: ListPluginInstallScriptRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/docker-plugin-install-script",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let plugin;
            
            let operateType;
            
            let enterpriseProjectId;
            
            let outsideHost;
            
            let batchInstall;

            if (listPluginInstallScriptRequest !== null && listPluginInstallScriptRequest !== undefined) {
                if (listPluginInstallScriptRequest instanceof ListPluginInstallScriptRequest) {
                    plugin = listPluginInstallScriptRequest.plugin;
                    operateType = listPluginInstallScriptRequest.operateType;
                    enterpriseProjectId = listPluginInstallScriptRequest.enterpriseProjectId;
                    outsideHost = listPluginInstallScriptRequest.outsideHost;
                    batchInstall = listPluginInstallScriptRequest.batchInstall;
                } else {
                    plugin = listPluginInstallScriptRequest['plugin'];
                    operateType = listPluginInstallScriptRequest['operate_type'];
                    enterpriseProjectId = listPluginInstallScriptRequest['enterprise_project_id'];
                    outsideHost = listPluginInstallScriptRequest['outside_host'];
                    batchInstall = listPluginInstallScriptRequest['batch_install'];
                }
            }

        
            if (plugin === null || plugin === undefined) {
                throw new RequiredError('plugin','Required parameter plugin was null or undefined when calling listPluginInstallScript.');
            }
            if (plugin !== null && plugin !== undefined) {
                localVarQueryParameter['plugin'] = plugin;
            }
            if (operateType === null || operateType === undefined) {
                throw new RequiredError('operateType','Required parameter operateType was null or undefined when calling listPluginInstallScript.');
            }
            if (operateType !== null && operateType !== undefined) {
                localVarQueryParameter['operate_type'] = operateType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (outsideHost !== null && outsideHost !== undefined) {
                localVarQueryParameter['outside_host'] = outsideHost;
            }
            if (batchInstall !== null && batchInstall !== undefined) {
                localVarQueryParameter['batch_install'] = batchInstall;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询插件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPlugins(listPluginsRequest?: ListPluginsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/plugins",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let name;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostId;
            
            let privateIp;
            
            let publicIp;
            
            let groupId;
            
            let assetValue;
            
            let limit;
            
            let offset;
            
            let agentStatus;
            
            let detectResult;
            
            let hostStatus;
            
            let osType;
            
            let ipAddr;
            
            let protectStatus;
            
            let groupName;
            
            let policyGroupId;
            
            let policyGroupName;
            
            let label;
            
            let chargingMode;
            
            let refresh;
            
            let aboveVersion;
            
            let version;
            
            let plugin;
            
            let outsideHost;

            if (listPluginsRequest !== null && listPluginsRequest !== undefined) {
                if (listPluginsRequest instanceof ListPluginsRequest) {
                    name = listPluginsRequest.name;
                    enterpriseProjectId = listPluginsRequest.enterpriseProjectId;
                    hostName = listPluginsRequest.hostName;
                    hostId = listPluginsRequest.hostId;
                    privateIp = listPluginsRequest.privateIp;
                    publicIp = listPluginsRequest.publicIp;
                    groupId = listPluginsRequest.groupId;
                    assetValue = listPluginsRequest.assetValue;
                    limit = listPluginsRequest.limit;
                    offset = listPluginsRequest.offset;
                    agentStatus = listPluginsRequest.agentStatus;
                    detectResult = listPluginsRequest.detectResult;
                    hostStatus = listPluginsRequest.hostStatus;
                    osType = listPluginsRequest.osType;
                    ipAddr = listPluginsRequest.ipAddr;
                    protectStatus = listPluginsRequest.protectStatus;
                    groupName = listPluginsRequest.groupName;
                    policyGroupId = listPluginsRequest.policyGroupId;
                    policyGroupName = listPluginsRequest.policyGroupName;
                    label = listPluginsRequest.label;
                    chargingMode = listPluginsRequest.chargingMode;
                    refresh = listPluginsRequest.refresh;
                    aboveVersion = listPluginsRequest.aboveVersion;
                    version = listPluginsRequest.version;
                    plugin = listPluginsRequest.plugin;
                    outsideHost = listPluginsRequest.outsideHost;
                } else {
                    name = listPluginsRequest['name'];
                    enterpriseProjectId = listPluginsRequest['enterprise_project_id'];
                    hostName = listPluginsRequest['host_name'];
                    hostId = listPluginsRequest['host_id'];
                    privateIp = listPluginsRequest['private_ip'];
                    publicIp = listPluginsRequest['public_ip'];
                    groupId = listPluginsRequest['group_id'];
                    assetValue = listPluginsRequest['asset_value'];
                    limit = listPluginsRequest['limit'];
                    offset = listPluginsRequest['offset'];
                    agentStatus = listPluginsRequest['agent_status'];
                    detectResult = listPluginsRequest['detect_result'];
                    hostStatus = listPluginsRequest['host_status'];
                    osType = listPluginsRequest['os_type'];
                    ipAddr = listPluginsRequest['ip_addr'];
                    protectStatus = listPluginsRequest['protect_status'];
                    groupName = listPluginsRequest['group_name'];
                    policyGroupId = listPluginsRequest['policy_group_id'];
                    policyGroupName = listPluginsRequest['policy_group_name'];
                    label = listPluginsRequest['label'];
                    chargingMode = listPluginsRequest['charging_mode'];
                    refresh = listPluginsRequest['refresh'];
                    aboveVersion = listPluginsRequest['above_version'];
                    version = listPluginsRequest['version'];
                    plugin = listPluginsRequest['plugin'];
                    outsideHost = listPluginsRequest['outside_host'];
                }
            }

        
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listPlugins.');
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (agentStatus !== null && agentStatus !== undefined) {
                localVarQueryParameter['agent_status'] = agentStatus;
            }
            if (detectResult !== null && detectResult !== undefined) {
                localVarQueryParameter['detect_result'] = detectResult;
            }
            if (hostStatus !== null && hostStatus !== undefined) {
                localVarQueryParameter['host_status'] = hostStatus;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (ipAddr !== null && ipAddr !== undefined) {
                localVarQueryParameter['ip_addr'] = ipAddr;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (policyGroupId !== null && policyGroupId !== undefined) {
                localVarQueryParameter['policy_group_id'] = policyGroupId;
            }
            if (policyGroupName !== null && policyGroupName !== undefined) {
                localVarQueryParameter['policy_group_name'] = policyGroupName;
            }
            if (label !== null && label !== undefined) {
                localVarQueryParameter['label'] = label;
            }
            if (chargingMode !== null && chargingMode !== undefined) {
                localVarQueryParameter['charging_mode'] = chargingMode;
            }
            if (refresh !== null && refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }
            if (aboveVersion !== null && aboveVersion !== undefined) {
                localVarQueryParameter['above_version'] = aboveVersion;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (plugin !== null && plugin !== undefined) {
                localVarQueryParameter['plugin'] = plugin;
            }
            if (outsideHost !== null && outsideHost !== undefined) {
                localVarQueryParameter['outside_host'] = outsideHost;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询主机策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPolicies(listPoliciesRequest?: ListPoliciesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/host-management/policies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let agentId;
            
            let enterpriseProjectId;

            if (listPoliciesRequest !== null && listPoliciesRequest !== undefined) {
                if (listPoliciesRequest instanceof ListPoliciesRequest) {
                    offset = listPoliciesRequest.offset;
                    limit = listPoliciesRequest.limit;
                    agentId = listPoliciesRequest.agentId;
                    enterpriseProjectId = listPoliciesRequest.enterpriseProjectId;
                } else {
                    offset = listPoliciesRequest['offset'];
                    limit = listPoliciesRequest['limit'];
                    agentId = listPoliciesRequest['agent_id'];
                    enterpriseProjectId = listPoliciesRequest['enterprise_project_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listPolicies.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listPolicies.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling listPolicies.');
            }
            if (agentId !== null && agentId !== undefined) {
                localVarQueryParameter['agent_id'] = agentId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 具备该端口的主机/容器信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPortHost(listPortHostRequest?: ListPortHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/ports/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let port;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostIp;
            
            let type;
            
            let category;
            
            let limit;
            
            let offset;

            if (listPortHostRequest !== null && listPortHostRequest !== undefined) {
                if (listPortHostRequest instanceof ListPortHostRequest) {
                    port = listPortHostRequest.port;
                    enterpriseProjectId = listPortHostRequest.enterpriseProjectId;
                    hostName = listPortHostRequest.hostName;
                    hostIp = listPortHostRequest.hostIp;
                    type = listPortHostRequest.type;
                    category = listPortHostRequest.category;
                    limit = listPortHostRequest.limit;
                    offset = listPortHostRequest.offset;
                } else {
                    port = listPortHostRequest['port'];
                    enterpriseProjectId = listPortHostRequest['enterprise_project_id'];
                    hostName = listPortHostRequest['host_name'];
                    hostIp = listPortHostRequest['host_ip'];
                    type = listPortHostRequest['type'];
                    category = listPortHostRequest['category'];
                    limit = listPortHostRequest['limit'];
                    offset = listPortHostRequest['offset'];
                }
            }

        
            if (port === null || port === undefined) {
                throw new RequiredError('port','Required parameter port was null or undefined when calling listPortHost.');
            }
            if (port !== null && port !== undefined) {
                localVarQueryParameter['port'] = port;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询开放端口列表，支持通过传入端口或协议类型查询服务器数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPortStatistics(listPortStatisticsRequest?: ListPortStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/port/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let category;
            
            let sortDir;
            
            let limit;
            
            let offset;
            
            let port;
            
            let portString;
            
            let type;
            
            let status;
            
            let sortKey;

            if (listPortStatisticsRequest !== null && listPortStatisticsRequest !== undefined) {
                if (listPortStatisticsRequest instanceof ListPortStatisticsRequest) {
                    enterpriseProjectId = listPortStatisticsRequest.enterpriseProjectId;
                    category = listPortStatisticsRequest.category;
                    sortDir = listPortStatisticsRequest.sortDir;
                    limit = listPortStatisticsRequest.limit;
                    offset = listPortStatisticsRequest.offset;
                    port = listPortStatisticsRequest.port;
                    portString = listPortStatisticsRequest.portString;
                    type = listPortStatisticsRequest.type;
                    status = listPortStatisticsRequest.status;
                    sortKey = listPortStatisticsRequest.sortKey;
                } else {
                    enterpriseProjectId = listPortStatisticsRequest['enterprise_project_id'];
                    category = listPortStatisticsRequest['category'];
                    sortDir = listPortStatisticsRequest['sort_dir'];
                    limit = listPortStatisticsRequest['limit'];
                    offset = listPortStatisticsRequest['offset'];
                    port = listPortStatisticsRequest['port'];
                    portString = listPortStatisticsRequest['port_string'];
                    type = listPortStatisticsRequest['type'];
                    status = listPortStatisticsRequest['status'];
                    sortKey = listPortStatisticsRequest['sort_key'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (port !== null && port !== undefined) {
                localVarQueryParameter['port'] = port;
            }
            if (portString !== null && portString !== undefined) {
                localVarQueryParameter['port_string'] = portString;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单服务器的开放端口列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPorts(listPortsRequest?: ListPortsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/ports",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let hostName;
            
            let hostIp;
            
            let port;
            
            let type;
            
            let status;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;

            if (listPortsRequest !== null && listPortsRequest !== undefined) {
                if (listPortsRequest instanceof ListPortsRequest) {
                    hostId = listPortsRequest.hostId;
                    hostName = listPortsRequest.hostName;
                    hostIp = listPortsRequest.hostIp;
                    port = listPortsRequest.port;
                    type = listPortsRequest.type;
                    status = listPortsRequest.status;
                    enterpriseProjectId = listPortsRequest.enterpriseProjectId;
                    limit = listPortsRequest.limit;
                    offset = listPortsRequest.offset;
                    category = listPortsRequest.category;
                } else {
                    hostId = listPortsRequest['host_id'];
                    hostName = listPortsRequest['host_name'];
                    hostIp = listPortsRequest['host_ip'];
                    port = listPortsRequest['port'];
                    type = listPortsRequest['type'];
                    status = listPortsRequest['status'];
                    enterpriseProjectId = listPortsRequest['enterprise_project_id'];
                    limit = listPortsRequest['limit'];
                    offset = listPortsRequest['offset'];
                    category = listPortsRequest['category'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listPorts.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (port !== null && port !== undefined) {
                localVarQueryParameter['port'] = port;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程列表，通过传入进程路径参数查询对应的服务器数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProcessStatistics(listProcessStatisticsRequest?: ListProcessStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/process/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;
            
            let path;

            if (listProcessStatisticsRequest !== null && listProcessStatisticsRequest !== undefined) {
                if (listProcessStatisticsRequest instanceof ListProcessStatisticsRequest) {
                    enterpriseProjectId = listProcessStatisticsRequest.enterpriseProjectId;
                    limit = listProcessStatisticsRequest.limit;
                    offset = listProcessStatisticsRequest.offset;
                    category = listProcessStatisticsRequest.category;
                    path = listProcessStatisticsRequest.path;
                } else {
                    enterpriseProjectId = listProcessStatisticsRequest['enterprise_project_id'];
                    limit = listProcessStatisticsRequest['limit'];
                    offset = listProcessStatisticsRequest['offset'];
                    category = listProcessStatisticsRequest['category'];
                    path = listProcessStatisticsRequest['path'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (path !== null && path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 具备该进程的主机/容器信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProcessesHost(listProcessesHostRequest?: ListProcessesHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/processes/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostIp;
            
            let path;
            
            let category;
            
            let limit;
            
            let offset;

            if (listProcessesHostRequest !== null && listProcessesHostRequest !== undefined) {
                if (listProcessesHostRequest instanceof ListProcessesHostRequest) {
                    enterpriseProjectId = listProcessesHostRequest.enterpriseProjectId;
                    hostName = listProcessesHostRequest.hostName;
                    hostIp = listProcessesHostRequest.hostIp;
                    path = listProcessesHostRequest.path;
                    category = listProcessesHostRequest.category;
                    limit = listProcessesHostRequest.limit;
                    offset = listProcessesHostRequest.offset;
                } else {
                    enterpriseProjectId = listProcessesHostRequest['enterprise_project_id'];
                    hostName = listProcessesHostRequest['host_name'];
                    hostIp = listProcessesHostRequest['host_ip'];
                    path = listProcessesHostRequest['path'];
                    category = listProcessesHostRequest['category'];
                    limit = listProcessesHostRequest['limit'];
                    offset = listProcessesHostRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (path !== null && path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询租户当前项目下所有用过的标签
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProjectTags(listProjectTagsRequest?: ListProjectTagsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/{resource_type}/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;

            
            let resourceType;

            if (listProjectTagsRequest !== null && listProjectTagsRequest !== undefined) {
                if (listProjectTagsRequest instanceof ListProjectTagsRequest) {
                    resourceType = listProjectTagsRequest.resourceType;
                } else {
                    resourceType = listProjectTagsRequest['resource_type'];
                }
            }

        
            if (resourceType === null || resourceType === undefined) {
            throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling listProjectTags.');
            }

            options.pathParams = { 'resource_type': resourceType, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询勒索病毒的防护策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProtectionPolicy(listProtectionPolicyRequest?: ListProtectionPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/ransomware/protection/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let policyName;
            
            let protectPolicyId;
            
            let operatingSystem;

            if (listProtectionPolicyRequest !== null && listProtectionPolicyRequest !== undefined) {
                if (listProtectionPolicyRequest instanceof ListProtectionPolicyRequest) {
                    region = listProtectionPolicyRequest.region;
                    enterpriseProjectId = listProtectionPolicyRequest.enterpriseProjectId;
                    offset = listProtectionPolicyRequest.offset;
                    limit = listProtectionPolicyRequest.limit;
                    policyName = listProtectionPolicyRequest.policyName;
                    protectPolicyId = listProtectionPolicyRequest.protectPolicyId;
                    operatingSystem = listProtectionPolicyRequest.operatingSystem;
                } else {
                    region = listProtectionPolicyRequest['region'];
                    enterpriseProjectId = listProtectionPolicyRequest['enterprise_project_id'];
                    offset = listProtectionPolicyRequest['offset'];
                    limit = listProtectionPolicyRequest['limit'];
                    policyName = listProtectionPolicyRequest['policy_name'];
                    protectPolicyId = listProtectionPolicyRequest['protect_policy_id'];
                    operatingSystem = listProtectionPolicyRequest['operating_system'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (protectPolicyId !== null && protectPolicyId !== undefined) {
                localVarQueryParameter['protect_policy_id'] = protectPolicyId;
            }
            if (operatingSystem !== null && operatingSystem !== undefined) {
                localVarQueryParameter['operating_system'] = operatingSystem;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询勒索防护服务器列表，与云备份服务配合使用。因此使用勒索相关接口之前确保该局点有云备份服务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProtectionServer(listProtectionServerRequest?: ListProtectionServerRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/ransomware/server",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostName;
            
            let osType;
            
            let hostIp;
            
            let hostStatus;
            
            let lastDays;

            if (listProtectionServerRequest !== null && listProtectionServerRequest !== undefined) {
                if (listProtectionServerRequest instanceof ListProtectionServerRequest) {
                    region = listProtectionServerRequest.region;
                    enterpriseProjectId = listProtectionServerRequest.enterpriseProjectId;
                    offset = listProtectionServerRequest.offset;
                    limit = listProtectionServerRequest.limit;
                    hostName = listProtectionServerRequest.hostName;
                    osType = listProtectionServerRequest.osType;
                    hostIp = listProtectionServerRequest.hostIp;
                    hostStatus = listProtectionServerRequest.hostStatus;
                    lastDays = listProtectionServerRequest.lastDays;
                } else {
                    region = listProtectionServerRequest['region'];
                    enterpriseProjectId = listProtectionServerRequest['enterprise_project_id'];
                    offset = listProtectionServerRequest['offset'];
                    limit = listProtectionServerRequest['limit'];
                    hostName = listProtectionServerRequest['host_name'];
                    osType = listProtectionServerRequest['os_type'];
                    hostIp = listProtectionServerRequest['host_ip'];
                    hostStatus = listProtectionServerRequest['host_status'];
                    lastDays = listProtectionServerRequest['last_days'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (hostStatus !== null && hostStatus !== undefined) {
                localVarQueryParameter['host_status'] = hostStatus;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询防护服务器列表：查询防护服务器相关数据，包含服务器名称、ip地址、操作系统、服务器组名称、防护策略、防护状态、微服务防护状态、RASP防护状态、RASP攻击数量信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProtectionServers(listProtectionServersRequest?: ListProtectionServersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/servers",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let appStatus;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let osType;
            
            let hostIp;
            
            let appType;

            if (listProtectionServersRequest !== null && listProtectionServersRequest !== undefined) {
                if (listProtectionServersRequest instanceof ListProtectionServersRequest) {
                    offset = listProtectionServersRequest.offset;
                    limit = listProtectionServersRequest.limit;
                    appStatus = listProtectionServersRequest.appStatus;
                    enterpriseProjectId = listProtectionServersRequest.enterpriseProjectId;
                    hostName = listProtectionServersRequest.hostName;
                    osType = listProtectionServersRequest.osType;
                    hostIp = listProtectionServersRequest.hostIp;
                    appType = listProtectionServersRequest.appType;
                } else {
                    offset = listProtectionServersRequest['offset'];
                    limit = listProtectionServersRequest['limit'];
                    appStatus = listProtectionServersRequest['app_status'];
                    enterpriseProjectId = listProtectionServersRequest['enterprise_project_id'];
                    hostName = listProtectionServersRequest['host_name'];
                    osType = listProtectionServersRequest['os_type'];
                    hostIp = listProtectionServersRequest['host_ip'];
                    appType = listProtectionServersRequest['app_type'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listProtectionServers.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listProtectionServers.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (appStatus === null || appStatus === undefined) {
                throw new RequiredError('appStatus','Required parameter appStatus was null or undefined when calling listProtectionServers.');
            }
            if (appStatus !== null && appStatus !== undefined) {
                localVarQueryParameter['app_status'] = appStatus;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (appType !== null && appType !== undefined) {
                localVarQueryParameter['app_type'] = appType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询导出任务信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listQueryExportTask(listQueryExportTaskRequest?: ListQueryExportTaskRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/export-task/{task_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let taskId;
            
            let region;
            
            let enterpriseProjectId;

            if (listQueryExportTaskRequest !== null && listQueryExportTaskRequest !== undefined) {
                if (listQueryExportTaskRequest instanceof ListQueryExportTaskRequest) {
                    taskId = listQueryExportTaskRequest.taskId;
                    region = listQueryExportTaskRequest.region;
                    enterpriseProjectId = listQueryExportTaskRequest.enterpriseProjectId;
                } else {
                    taskId = listQueryExportTaskRequest['task_id'];
                    region = listQueryExportTaskRequest['region'];
                    enterpriseProjectId = listQueryExportTaskRequest['enterprise_project_id'];
                }
            }

        
            if (taskId === null || taskId === undefined) {
            throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling listQueryExportTask.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'task_id': taskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询配额详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listQuotasDetail(listQuotasDetailRequest?: ListQuotasDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/billing/quotas-detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let version;
            
            let category;
            
            let quotaStatus;
            
            let usedStatus;
            
            let hostName;
            
            let resourceId;
            
            let chargingMode;
            
            let limit;
            
            let offset;

            if (listQuotasDetailRequest !== null && listQuotasDetailRequest !== undefined) {
                if (listQuotasDetailRequest instanceof ListQuotasDetailRequest) {
                    region = listQuotasDetailRequest.region;
                    enterpriseProjectId = listQuotasDetailRequest.enterpriseProjectId;
                    version = listQuotasDetailRequest.version;
                    category = listQuotasDetailRequest.category;
                    quotaStatus = listQuotasDetailRequest.quotaStatus;
                    usedStatus = listQuotasDetailRequest.usedStatus;
                    hostName = listQuotasDetailRequest.hostName;
                    resourceId = listQuotasDetailRequest.resourceId;
                    chargingMode = listQuotasDetailRequest.chargingMode;
                    limit = listQuotasDetailRequest.limit;
                    offset = listQuotasDetailRequest.offset;
                } else {
                    region = listQuotasDetailRequest['region'];
                    enterpriseProjectId = listQuotasDetailRequest['enterprise_project_id'];
                    version = listQuotasDetailRequest['version'];
                    category = listQuotasDetailRequest['category'];
                    quotaStatus = listQuotasDetailRequest['quota_status'];
                    usedStatus = listQuotasDetailRequest['used_status'];
                    hostName = listQuotasDetailRequest['host_name'];
                    resourceId = listQuotasDetailRequest['resource_id'];
                    chargingMode = listQuotasDetailRequest['charging_mode'];
                    limit = listQuotasDetailRequest['limit'];
                    offset = listQuotasDetailRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (quotaStatus !== null && quotaStatus !== undefined) {
                localVarQueryParameter['quota_status'] = quotaStatus;
            }
            if (usedStatus !== null && usedStatus !== undefined) {
                localVarQueryParameter['used_status'] = usedStatus;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (resourceId !== null && resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            if (chargingMode !== null && chargingMode !== undefined) {
                localVarQueryParameter['charging_mode'] = chargingMode;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询勒索防护服务器列表，与云备份服务配合使用。因此使用勒索相关接口之前确保该局点有云备份服务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRansomwareProtectionNodes(listRansomwareProtectionNodesRequest?: ListRansomwareProtectionNodesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/ransomware/servers",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostId;
            
            let osType;
            
            let hostIp;
            
            let privateIp;
            
            let hostStatus;
            
            let ransomProtectionStatus;
            
            let protectPolicyName;
            
            let policyName;
            
            let policyId;
            
            let agentStatus;
            
            let groupId;
            
            let groupName;
            
            let lastDays;

            if (listRansomwareProtectionNodesRequest !== null && listRansomwareProtectionNodesRequest !== undefined) {
                if (listRansomwareProtectionNodesRequest instanceof ListRansomwareProtectionNodesRequest) {
                    offset = listRansomwareProtectionNodesRequest.offset;
                    limit = listRansomwareProtectionNodesRequest.limit;
                    enterpriseProjectId = listRansomwareProtectionNodesRequest.enterpriseProjectId;
                    hostName = listRansomwareProtectionNodesRequest.hostName;
                    hostId = listRansomwareProtectionNodesRequest.hostId;
                    osType = listRansomwareProtectionNodesRequest.osType;
                    hostIp = listRansomwareProtectionNodesRequest.hostIp;
                    privateIp = listRansomwareProtectionNodesRequest.privateIp;
                    hostStatus = listRansomwareProtectionNodesRequest.hostStatus;
                    ransomProtectionStatus = listRansomwareProtectionNodesRequest.ransomProtectionStatus;
                    protectPolicyName = listRansomwareProtectionNodesRequest.protectPolicyName;
                    policyName = listRansomwareProtectionNodesRequest.policyName;
                    policyId = listRansomwareProtectionNodesRequest.policyId;
                    agentStatus = listRansomwareProtectionNodesRequest.agentStatus;
                    groupId = listRansomwareProtectionNodesRequest.groupId;
                    groupName = listRansomwareProtectionNodesRequest.groupName;
                    lastDays = listRansomwareProtectionNodesRequest.lastDays;
                } else {
                    offset = listRansomwareProtectionNodesRequest['offset'];
                    limit = listRansomwareProtectionNodesRequest['limit'];
                    enterpriseProjectId = listRansomwareProtectionNodesRequest['enterprise_project_id'];
                    hostName = listRansomwareProtectionNodesRequest['host_name'];
                    hostId = listRansomwareProtectionNodesRequest['host_id'];
                    osType = listRansomwareProtectionNodesRequest['os_type'];
                    hostIp = listRansomwareProtectionNodesRequest['host_ip'];
                    privateIp = listRansomwareProtectionNodesRequest['private_ip'];
                    hostStatus = listRansomwareProtectionNodesRequest['host_status'];
                    ransomProtectionStatus = listRansomwareProtectionNodesRequest['ransom_protection_status'];
                    protectPolicyName = listRansomwareProtectionNodesRequest['protect_policy_name'];
                    policyName = listRansomwareProtectionNodesRequest['policy_name'];
                    policyId = listRansomwareProtectionNodesRequest['policy_id'];
                    agentStatus = listRansomwareProtectionNodesRequest['agent_status'];
                    groupId = listRansomwareProtectionNodesRequest['group_id'];
                    groupName = listRansomwareProtectionNodesRequest['group_name'];
                    lastDays = listRansomwareProtectionNodesRequest['last_days'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listRansomwareProtectionNodes.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listRansomwareProtectionNodes.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (hostStatus !== null && hostStatus !== undefined) {
                localVarQueryParameter['host_status'] = hostStatus;
            }
            if (ransomProtectionStatus !== null && ransomProtectionStatus !== undefined) {
                localVarQueryParameter['ransom_protection_status'] = ransomProtectionStatus;
            }
            if (protectPolicyName !== null && protectPolicyName !== undefined) {
                localVarQueryParameter['protect_policy_name'] = protectPolicyName;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (agentStatus !== null && agentStatus !== undefined) {
                localVarQueryParameter['agent_status'] = agentStatus;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询应用防护事件列表：展示防护事件相关信息，包含告警级别、服务器名称、告警名称、告警时间、攻击源ip、攻击源url数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRaspEvents(listRaspEventsRequest?: ListRaspEventsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let appType;
            
            let severity;
            
            let attackTag;
            
            let protectStatus;

            if (listRaspEventsRequest !== null && listRaspEventsRequest !== undefined) {
                if (listRaspEventsRequest instanceof ListRaspEventsRequest) {
                    hostId = listRaspEventsRequest.hostId;
                    startTime = listRaspEventsRequest.startTime;
                    endTime = listRaspEventsRequest.endTime;
                    limit = listRaspEventsRequest.limit;
                    offset = listRaspEventsRequest.offset;
                    enterpriseProjectId = listRaspEventsRequest.enterpriseProjectId;
                    appType = listRaspEventsRequest.appType;
                    severity = listRaspEventsRequest.severity;
                    attackTag = listRaspEventsRequest.attackTag;
                    protectStatus = listRaspEventsRequest.protectStatus;
                } else {
                    hostId = listRaspEventsRequest['host_id'];
                    startTime = listRaspEventsRequest['start_time'];
                    endTime = listRaspEventsRequest['end_time'];
                    limit = listRaspEventsRequest['limit'];
                    offset = listRaspEventsRequest['offset'];
                    enterpriseProjectId = listRaspEventsRequest['enterprise_project_id'];
                    appType = listRaspEventsRequest['app_type'];
                    severity = listRaspEventsRequest['severity'];
                    attackTag = listRaspEventsRequest['attack_tag'];
                    protectStatus = listRaspEventsRequest['protect_status'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listRaspEvents.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling listRaspEvents.');
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listRaspEvents.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listRaspEvents.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listRaspEvents.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (appType !== null && appType !== undefined) {
                localVarQueryParameter['app_type'] = appType;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (attackTag !== null && attackTag !== undefined) {
                localVarQueryParameter['attack_tag'] = attackTag;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询防护策略列表：查询创建的防护策略信息，包含防护策略名称、检测规则、关联服务器数量
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRaspPolicies(listRaspPoliciesRequest?: ListRaspPoliciesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/policies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let osType;
            
            let limit;
            
            let offset;
            
            let policyName;

            if (listRaspPoliciesRequest !== null && listRaspPoliciesRequest !== undefined) {
                if (listRaspPoliciesRequest instanceof ListRaspPoliciesRequest) {
                    region = listRaspPoliciesRequest.region;
                    enterpriseProjectId = listRaspPoliciesRequest.enterpriseProjectId;
                    osType = listRaspPoliciesRequest.osType;
                    limit = listRaspPoliciesRequest.limit;
                    offset = listRaspPoliciesRequest.offset;
                    policyName = listRaspPoliciesRequest.policyName;
                } else {
                    region = listRaspPoliciesRequest['region'];
                    enterpriseProjectId = listRaspPoliciesRequest['enterprise_project_id'];
                    osType = listRaspPoliciesRequest['os_type'];
                    limit = listRaspPoliciesRequest['limit'];
                    offset = listRaspPoliciesRequest['offset'];
                    policyName = listRaspPoliciesRequest['policy_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询指定安全配置项的检查项列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRiskConfigCheckRules(listRiskConfigCheckRulesRequest?: ListRiskConfigCheckRulesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/risk-config/{check_name}/check-rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let checkName;
            
            let standard;
            
            let enterpriseProjectId;
            
            let resultType;
            
            let checkRuleName;
            
            let severity;
            
            let hostId;
            
            let limit;
            
            let offset;

            if (listRiskConfigCheckRulesRequest !== null && listRiskConfigCheckRulesRequest !== undefined) {
                if (listRiskConfigCheckRulesRequest instanceof ListRiskConfigCheckRulesRequest) {
                    checkName = listRiskConfigCheckRulesRequest.checkName;
                    standard = listRiskConfigCheckRulesRequest.standard;
                    enterpriseProjectId = listRiskConfigCheckRulesRequest.enterpriseProjectId;
                    resultType = listRiskConfigCheckRulesRequest.resultType;
                    checkRuleName = listRiskConfigCheckRulesRequest.checkRuleName;
                    severity = listRiskConfigCheckRulesRequest.severity;
                    hostId = listRiskConfigCheckRulesRequest.hostId;
                    limit = listRiskConfigCheckRulesRequest.limit;
                    offset = listRiskConfigCheckRulesRequest.offset;
                } else {
                    checkName = listRiskConfigCheckRulesRequest['check_name'];
                    standard = listRiskConfigCheckRulesRequest['standard'];
                    enterpriseProjectId = listRiskConfigCheckRulesRequest['enterprise_project_id'];
                    resultType = listRiskConfigCheckRulesRequest['result_type'];
                    checkRuleName = listRiskConfigCheckRulesRequest['check_rule_name'];
                    severity = listRiskConfigCheckRulesRequest['severity'];
                    hostId = listRiskConfigCheckRulesRequest['host_id'];
                    limit = listRiskConfigCheckRulesRequest['limit'];
                    offset = listRiskConfigCheckRulesRequest['offset'];
                }
            }

        
            if (checkName === null || checkName === undefined) {
            throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling listRiskConfigCheckRules.');
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling listRiskConfigCheckRules.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (resultType !== null && resultType !== undefined) {
                localVarQueryParameter['result_type'] = resultType;
            }
            if (checkRuleName !== null && checkRuleName !== undefined) {
                localVarQueryParameter['check_rule_name'] = checkRuleName;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'check_name': checkName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询指定安全配置项的受影响服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRiskConfigHosts(listRiskConfigHostsRequest?: ListRiskConfigHostsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/risk-config/{check_name}/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let checkName;
            
            let standard;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostIp;
            
            let limit;
            
            let offset;

            if (listRiskConfigHostsRequest !== null && listRiskConfigHostsRequest !== undefined) {
                if (listRiskConfigHostsRequest instanceof ListRiskConfigHostsRequest) {
                    checkName = listRiskConfigHostsRequest.checkName;
                    standard = listRiskConfigHostsRequest.standard;
                    enterpriseProjectId = listRiskConfigHostsRequest.enterpriseProjectId;
                    hostName = listRiskConfigHostsRequest.hostName;
                    hostIp = listRiskConfigHostsRequest.hostIp;
                    limit = listRiskConfigHostsRequest.limit;
                    offset = listRiskConfigHostsRequest.offset;
                } else {
                    checkName = listRiskConfigHostsRequest['check_name'];
                    standard = listRiskConfigHostsRequest['standard'];
                    enterpriseProjectId = listRiskConfigHostsRequest['enterprise_project_id'];
                    hostName = listRiskConfigHostsRequest['host_name'];
                    hostIp = listRiskConfigHostsRequest['host_ip'];
                    limit = listRiskConfigHostsRequest['limit'];
                    offset = listRiskConfigHostsRequest['offset'];
                }
            }

        
            if (checkName === null || checkName === undefined) {
            throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling listRiskConfigHosts.');
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling listRiskConfigHosts.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'check_name': checkName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询租户的服务器安全配置检测结果列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRiskConfigs(listRiskConfigsRequest?: ListRiskConfigsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/risk-configs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let checkName;
            
            let groupId;
            
            let severity;
            
            let standard;
            
            let hostId;
            
            let limit;
            
            let offset;

            if (listRiskConfigsRequest !== null && listRiskConfigsRequest !== undefined) {
                if (listRiskConfigsRequest instanceof ListRiskConfigsRequest) {
                    enterpriseProjectId = listRiskConfigsRequest.enterpriseProjectId;
                    checkName = listRiskConfigsRequest.checkName;
                    groupId = listRiskConfigsRequest.groupId;
                    severity = listRiskConfigsRequest.severity;
                    standard = listRiskConfigsRequest.standard;
                    hostId = listRiskConfigsRequest.hostId;
                    limit = listRiskConfigsRequest.limit;
                    offset = listRiskConfigsRequest.offset;
                } else {
                    enterpriseProjectId = listRiskConfigsRequest['enterprise_project_id'];
                    checkName = listRiskConfigsRequest['check_name'];
                    groupId = listRiskConfigsRequest['group_id'];
                    severity = listRiskConfigsRequest['severity'];
                    standard = listRiskConfigsRequest['standard'];
                    hostId = listRiskConfigsRequest['host_id'];
                    limit = listRiskConfigsRequest['limit'];
                    offset = listRiskConfigsRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (checkName !== null && checkName !== undefined) {
                localVarQueryParameter['check_name'] = checkName;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查入侵事件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSecurityEvents(listSecurityEventsRequest?: ListSecurityEventsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let category;
            
            let region;
            
            let enterpriseProjectId;
            
            let lastDays;
            
            let hostName;
            
            let hostId;
            
            let privateIp;
            
            let publicIp;
            
            let containerName;
            
            let offset;
            
            let limit;
            
            let eventTypes;
            
            let handleStatus;
            
            let severity;
            
            let beginTime;
            
            let endTime;
            
            let eventClassIds;
            
            let severityList;
            
            let attackTag;
            
            let assetValue;
            
            let tagList;
            
            let attCk;
            
            let eventName;
            
            let autoBlock;

            if (listSecurityEventsRequest !== null && listSecurityEventsRequest !== undefined) {
                if (listSecurityEventsRequest instanceof ListSecurityEventsRequest) {
                    category = listSecurityEventsRequest.category;
                    region = listSecurityEventsRequest.region;
                    enterpriseProjectId = listSecurityEventsRequest.enterpriseProjectId;
                    lastDays = listSecurityEventsRequest.lastDays;
                    hostName = listSecurityEventsRequest.hostName;
                    hostId = listSecurityEventsRequest.hostId;
                    privateIp = listSecurityEventsRequest.privateIp;
                    publicIp = listSecurityEventsRequest.publicIp;
                    containerName = listSecurityEventsRequest.containerName;
                    offset = listSecurityEventsRequest.offset;
                    limit = listSecurityEventsRequest.limit;
                    eventTypes = listSecurityEventsRequest.eventTypes;
                    handleStatus = listSecurityEventsRequest.handleStatus;
                    severity = listSecurityEventsRequest.severity;
                    beginTime = listSecurityEventsRequest.beginTime;
                    endTime = listSecurityEventsRequest.endTime;
                    eventClassIds = listSecurityEventsRequest.eventClassIds;
                    severityList = listSecurityEventsRequest.severityList;
                    attackTag = listSecurityEventsRequest.attackTag;
                    assetValue = listSecurityEventsRequest.assetValue;
                    tagList = listSecurityEventsRequest.tagList;
                    attCk = listSecurityEventsRequest.attCk;
                    eventName = listSecurityEventsRequest.eventName;
                    autoBlock = listSecurityEventsRequest.autoBlock;
                } else {
                    category = listSecurityEventsRequest['category'];
                    region = listSecurityEventsRequest['region'];
                    enterpriseProjectId = listSecurityEventsRequest['enterprise_project_id'];
                    lastDays = listSecurityEventsRequest['last_days'];
                    hostName = listSecurityEventsRequest['host_name'];
                    hostId = listSecurityEventsRequest['host_id'];
                    privateIp = listSecurityEventsRequest['private_ip'];
                    publicIp = listSecurityEventsRequest['public_ip'];
                    containerName = listSecurityEventsRequest['container_name'];
                    offset = listSecurityEventsRequest['offset'];
                    limit = listSecurityEventsRequest['limit'];
                    eventTypes = listSecurityEventsRequest['event_types'];
                    handleStatus = listSecurityEventsRequest['handle_status'];
                    severity = listSecurityEventsRequest['severity'];
                    beginTime = listSecurityEventsRequest['begin_time'];
                    endTime = listSecurityEventsRequest['end_time'];
                    eventClassIds = listSecurityEventsRequest['event_class_ids'];
                    severityList = listSecurityEventsRequest['severity_list'];
                    attackTag = listSecurityEventsRequest['attack_tag'];
                    assetValue = listSecurityEventsRequest['asset_value'];
                    tagList = listSecurityEventsRequest['tag_list'];
                    attCk = listSecurityEventsRequest['att_ck'];
                    eventName = listSecurityEventsRequest['event_name'];
                    autoBlock = listSecurityEventsRequest['auto_block'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listSecurityEvents.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (eventTypes !== null && eventTypes !== undefined) {
                localVarQueryParameter['event_types'] = eventTypes;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (eventClassIds !== null && eventClassIds !== undefined) {
                localVarQueryParameter['event_class_ids'] = eventClassIds;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (attackTag !== null && attackTag !== undefined) {
                localVarQueryParameter['attack_tag'] = attackTag;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (tagList !== null && tagList !== undefined) {
                localVarQueryParameter['tag_list'] = tagList;
            }
            if (attCk !== null && attCk !== undefined) {
                localVarQueryParameter['att_ck'] = attCk;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (autoBlock !== null && autoBlock !== undefined) {
                localVarQueryParameter['auto_block'] = autoBlock;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询云原生网络模式2.0的集群已配置的安全组策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSecurityGroupPolicies(listSecurityGroupPoliciesRequest?: ListSecurityGroupPoliciesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/security-group-policies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (listSecurityGroupPoliciesRequest !== null && listSecurityGroupPoliciesRequest !== undefined) {
                if (listSecurityGroupPoliciesRequest instanceof ListSecurityGroupPoliciesRequest) {
                    limit = listSecurityGroupPoliciesRequest.limit;
                    offset = listSecurityGroupPoliciesRequest.offset;
                    clusterId = listSecurityGroupPoliciesRequest.clusterId;
                    enterpriseProjectId = listSecurityGroupPoliciesRequest.enterpriseProjectId;
                } else {
                    limit = listSecurityGroupPoliciesRequest['limit'];
                    offset = listSecurityGroupPoliciesRequest['offset'];
                    clusterId = listSecurityGroupPoliciesRequest['cluster_id'];
                    enterpriseProjectId = listSecurityGroupPoliciesRequest['enterprise_project_id'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listSecurityGroupPolicies.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listSecurityGroupPolicies.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listSecurityGroupPolicies.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询企业项目下所有的安全组列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSecurityGroups(listSecurityGroupsRequest?: ListSecurityGroupsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/security-groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (listSecurityGroupsRequest !== null && listSecurityGroupsRequest !== undefined) {
                if (listSecurityGroupsRequest instanceof ListSecurityGroupsRequest) {
                    enterpriseProjectId = listSecurityGroupsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = listSecurityGroupsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询swr镜像仓库镜像列表,如果需要从swr同步最新镜像，需要先调用“从swr同步镜像”接口
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSwrImageRepository(listSwrImageRepositoryRequest?: ListSwrImageRepositoryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/swr-repository",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageType;
            
            let region;
            
            let enterpriseProjectId;
            
            let namespace;
            
            let imageName;
            
            let imageVersion;
            
            let latestVersion;
            
            let offset;
            
            let limit;
            
            let scanStatus;
            
            let instanceName;
            
            let imageSize;
            
            let startLatestUpdateTime;
            
            let endLatestUpdateTime;
            
            let startLatestScanTime;
            
            let endLatestScanTime;
            
            let hasMaliciousFile;
            
            let hasUnsafeSetting;
            
            let hasVul;
            
            let instanceId;

            if (listSwrImageRepositoryRequest !== null && listSwrImageRepositoryRequest !== undefined) {
                if (listSwrImageRepositoryRequest instanceof ListSwrImageRepositoryRequest) {
                    imageType = listSwrImageRepositoryRequest.imageType;
                    region = listSwrImageRepositoryRequest.region;
                    enterpriseProjectId = listSwrImageRepositoryRequest.enterpriseProjectId;
                    namespace = listSwrImageRepositoryRequest.namespace;
                    imageName = listSwrImageRepositoryRequest.imageName;
                    imageVersion = listSwrImageRepositoryRequest.imageVersion;
                    latestVersion = listSwrImageRepositoryRequest.latestVersion;
                    offset = listSwrImageRepositoryRequest.offset;
                    limit = listSwrImageRepositoryRequest.limit;
                    scanStatus = listSwrImageRepositoryRequest.scanStatus;
                    instanceName = listSwrImageRepositoryRequest.instanceName;
                    imageSize = listSwrImageRepositoryRequest.imageSize;
                    startLatestUpdateTime = listSwrImageRepositoryRequest.startLatestUpdateTime;
                    endLatestUpdateTime = listSwrImageRepositoryRequest.endLatestUpdateTime;
                    startLatestScanTime = listSwrImageRepositoryRequest.startLatestScanTime;
                    endLatestScanTime = listSwrImageRepositoryRequest.endLatestScanTime;
                    hasMaliciousFile = listSwrImageRepositoryRequest.hasMaliciousFile;
                    hasUnsafeSetting = listSwrImageRepositoryRequest.hasUnsafeSetting;
                    hasVul = listSwrImageRepositoryRequest.hasVul;
                    instanceId = listSwrImageRepositoryRequest.instanceId;
                } else {
                    imageType = listSwrImageRepositoryRequest['image_type'];
                    region = listSwrImageRepositoryRequest['region'];
                    enterpriseProjectId = listSwrImageRepositoryRequest['enterprise_project_id'];
                    namespace = listSwrImageRepositoryRequest['namespace'];
                    imageName = listSwrImageRepositoryRequest['image_name'];
                    imageVersion = listSwrImageRepositoryRequest['image_version'];
                    latestVersion = listSwrImageRepositoryRequest['latest_version'];
                    offset = listSwrImageRepositoryRequest['offset'];
                    limit = listSwrImageRepositoryRequest['limit'];
                    scanStatus = listSwrImageRepositoryRequest['scan_status'];
                    instanceName = listSwrImageRepositoryRequest['instance_name'];
                    imageSize = listSwrImageRepositoryRequest['image_size'];
                    startLatestUpdateTime = listSwrImageRepositoryRequest['start_latest_update_time'];
                    endLatestUpdateTime = listSwrImageRepositoryRequest['end_latest_update_time'];
                    startLatestScanTime = listSwrImageRepositoryRequest['start_latest_scan_time'];
                    endLatestScanTime = listSwrImageRepositoryRequest['end_latest_scan_time'];
                    hasMaliciousFile = listSwrImageRepositoryRequest['has_malicious_file'];
                    hasUnsafeSetting = listSwrImageRepositoryRequest['has_unsafe_setting'];
                    hasVul = listSwrImageRepositoryRequest['has_vul'];
                    instanceId = listSwrImageRepositoryRequest['instance_id'];
                }
            }

        
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling listSwrImageRepository.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (imageVersion !== null && imageVersion !== undefined) {
                localVarQueryParameter['image_version'] = imageVersion;
            }
            if (latestVersion !== null && latestVersion !== undefined) {
                localVarQueryParameter['latest_version'] = latestVersion;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (scanStatus !== null && scanStatus !== undefined) {
                localVarQueryParameter['scan_status'] = scanStatus;
            }
            if (instanceName !== null && instanceName !== undefined) {
                localVarQueryParameter['instance_name'] = instanceName;
            }
            if (imageSize !== null && imageSize !== undefined) {
                localVarQueryParameter['image_size'] = imageSize;
            }
            if (startLatestUpdateTime !== null && startLatestUpdateTime !== undefined) {
                localVarQueryParameter['start_latest_update_time'] = startLatestUpdateTime;
            }
            if (endLatestUpdateTime !== null && endLatestUpdateTime !== undefined) {
                localVarQueryParameter['end_latest_update_time'] = endLatestUpdateTime;
            }
            if (startLatestScanTime !== null && startLatestScanTime !== undefined) {
                localVarQueryParameter['start_latest_scan_time'] = startLatestScanTime;
            }
            if (endLatestScanTime !== null && endLatestScanTime !== undefined) {
                localVarQueryParameter['end_latest_scan_time'] = endLatestScanTime;
            }
            if (hasMaliciousFile !== null && hasMaliciousFile !== undefined) {
                localVarQueryParameter['has_malicious_file'] = hasMaliciousFile;
            }
            if (hasUnsafeSetting !== null && hasUnsafeSetting !== undefined) {
                localVarQueryParameter['has_unsafe_setting'] = hasUnsafeSetting;
            }
            if (hasVul !== null && hasVul !== undefined) {
                localVarQueryParameter['has_vul'] = hasVul;
            }
            if (instanceId !== null && instanceId !== undefined) {
                localVarQueryParameter['instance_id'] = instanceId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询系统用户白名单列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSystemUserWhiteList(listSystemUserWhiteListRequest?: ListSystemUserWhiteListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/white-list/userlist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let systemUserName;

            if (listSystemUserWhiteListRequest !== null && listSystemUserWhiteListRequest !== undefined) {
                if (listSystemUserWhiteListRequest instanceof ListSystemUserWhiteListRequest) {
                    offset = listSystemUserWhiteListRequest.offset;
                    limit = listSystemUserWhiteListRequest.limit;
                    enterpriseProjectId = listSystemUserWhiteListRequest.enterpriseProjectId;
                    hostId = listSystemUserWhiteListRequest.hostId;
                    hostName = listSystemUserWhiteListRequest.hostName;
                    privateIp = listSystemUserWhiteListRequest.privateIp;
                    publicIp = listSystemUserWhiteListRequest.publicIp;
                    systemUserName = listSystemUserWhiteListRequest.systemUserName;
                } else {
                    offset = listSystemUserWhiteListRequest['offset'];
                    limit = listSystemUserWhiteListRequest['limit'];
                    enterpriseProjectId = listSystemUserWhiteListRequest['enterprise_project_id'];
                    hostId = listSystemUserWhiteListRequest['host_id'];
                    hostName = listSystemUserWhiteListRequest['host_name'];
                    privateIp = listSystemUserWhiteListRequest['private_ip'];
                    publicIp = listSystemUserWhiteListRequest['public_ip'];
                    systemUserName = listSystemUserWhiteListRequest['system_user_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listSystemUserWhiteList.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listSystemUserWhiteList.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (systemUserName !== null && systemUserName !== undefined) {
                localVarQueryParameter['system_user_name'] = systemUserName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询双因子主机列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listTwoFactorLoginHost(listTwoFactorLoginHostRequest?: ListTwoFactorLoginHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/two-factor-login/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let displayName;

            if (listTwoFactorLoginHostRequest !== null && listTwoFactorLoginHostRequest !== undefined) {
                if (listTwoFactorLoginHostRequest instanceof ListTwoFactorLoginHostRequest) {
                    limit = listTwoFactorLoginHostRequest.limit;
                    offset = listTwoFactorLoginHostRequest.offset;
                    enterpriseProjectId = listTwoFactorLoginHostRequest.enterpriseProjectId;
                    hostName = listTwoFactorLoginHostRequest.hostName;
                    displayName = listTwoFactorLoginHostRequest.displayName;
                } else {
                    limit = listTwoFactorLoginHostRequest['limit'];
                    offset = listTwoFactorLoginHostRequest['offset'];
                    enterpriseProjectId = listTwoFactorLoginHostRequest['enterprise_project_id'];
                    hostName = listTwoFactorLoginHostRequest['host_name'];
                    displayName = listTwoFactorLoginHostRequest['display_name'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listTwoFactorLoginHost.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listTwoFactorLoginHost.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (displayName !== null && displayName !== undefined) {
                localVarQueryParameter['display_name'] = displayName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取账户变动历史记录信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listUserChangeHistories(listUserChangeHistoriesRequest?: ListUserChangeHistoriesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/user/change-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostName;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let userName;
            
            let rootPermission;
            
            let privateIp;
            
            let changeType;
            
            let limit;
            
            let offset;
            
            let startTime;
            
            let endTime;

            if (listUserChangeHistoriesRequest !== null && listUserChangeHistoriesRequest !== undefined) {
                if (listUserChangeHistoriesRequest instanceof ListUserChangeHistoriesRequest) {
                    hostName = listUserChangeHistoriesRequest.hostName;
                    hostId = listUserChangeHistoriesRequest.hostId;
                    enterpriseProjectId = listUserChangeHistoriesRequest.enterpriseProjectId;
                    userName = listUserChangeHistoriesRequest.userName;
                    rootPermission = listUserChangeHistoriesRequest.rootPermission;
                    privateIp = listUserChangeHistoriesRequest.privateIp;
                    changeType = listUserChangeHistoriesRequest.changeType;
                    limit = listUserChangeHistoriesRequest.limit;
                    offset = listUserChangeHistoriesRequest.offset;
                    startTime = listUserChangeHistoriesRequest.startTime;
                    endTime = listUserChangeHistoriesRequest.endTime;
                } else {
                    hostName = listUserChangeHistoriesRequest['host_name'];
                    hostId = listUserChangeHistoriesRequest['host_id'];
                    enterpriseProjectId = listUserChangeHistoriesRequest['enterprise_project_id'];
                    userName = listUserChangeHistoriesRequest['user_name'];
                    rootPermission = listUserChangeHistoriesRequest['root_permission'];
                    privateIp = listUserChangeHistoriesRequest['private_ip'];
                    changeType = listUserChangeHistoriesRequest['change_type'];
                    limit = listUserChangeHistoriesRequest['limit'];
                    offset = listUserChangeHistoriesRequest['offset'];
                    startTime = listUserChangeHistoriesRequest['start_time'];
                    endTime = listUserChangeHistoriesRequest['end_time'];
                }
            }

        
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (rootPermission !== null && rootPermission !== undefined) {
                localVarQueryParameter['root_permission'] = rootPermission;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (changeType !== null && changeType !== undefined) {
                localVarQueryParameter['change_type'] = changeType;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询账号信息列表，支持通过传入账号名称参数查询对应的服务器数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listUserStatistics(listUserStatisticsRequest?: ListUserStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/user/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let userName;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;

            if (listUserStatisticsRequest !== null && listUserStatisticsRequest !== undefined) {
                if (listUserStatisticsRequest instanceof ListUserStatisticsRequest) {
                    userName = listUserStatisticsRequest.userName;
                    enterpriseProjectId = listUserStatisticsRequest.enterpriseProjectId;
                    limit = listUserStatisticsRequest.limit;
                    offset = listUserStatisticsRequest.offset;
                    category = listUserStatisticsRequest.category;
                } else {
                    userName = listUserStatisticsRequest['user_name'];
                    enterpriseProjectId = listUserStatisticsRequest['enterprise_project_id'];
                    limit = listUserStatisticsRequest['limit'];
                    offset = listUserStatisticsRequest['offset'];
                    category = listUserStatisticsRequest['category'];
                }
            }

        
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询账号的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listUsers(listUsersRequest?: ListUsersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/users",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let userName;
            
            let hostName;
            
            let privateIp;
            
            let loginPermission;
            
            let rootPermission;
            
            let userGroup;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let category;
            
            let partMatch;

            if (listUsersRequest !== null && listUsersRequest !== undefined) {
                if (listUsersRequest instanceof ListUsersRequest) {
                    hostId = listUsersRequest.hostId;
                    userName = listUsersRequest.userName;
                    hostName = listUsersRequest.hostName;
                    privateIp = listUsersRequest.privateIp;
                    loginPermission = listUsersRequest.loginPermission;
                    rootPermission = listUsersRequest.rootPermission;
                    userGroup = listUsersRequest.userGroup;
                    enterpriseProjectId = listUsersRequest.enterpriseProjectId;
                    limit = listUsersRequest.limit;
                    offset = listUsersRequest.offset;
                    category = listUsersRequest.category;
                    partMatch = listUsersRequest.partMatch;
                } else {
                    hostId = listUsersRequest['host_id'];
                    userName = listUsersRequest['user_name'];
                    hostName = listUsersRequest['host_name'];
                    privateIp = listUsersRequest['private_ip'];
                    loginPermission = listUsersRequest['login_permission'];
                    rootPermission = listUsersRequest['root_permission'];
                    userGroup = listUsersRequest['user_group'];
                    enterpriseProjectId = listUsersRequest['enterprise_project_id'];
                    limit = listUsersRequest['limit'];
                    offset = listUsersRequest['offset'];
                    category = listUsersRequest['category'];
                    partMatch = listUsersRequest['part_match'];
                }
            }

        
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (loginPermission !== null && loginPermission !== undefined) {
                localVarQueryParameter['login_permission'] = loginPermission;
            }
            if (rootPermission !== null && rootPermission !== undefined) {
                localVarQueryParameter['root_permission'] = rootPermission;
            }
            if (userGroup !== null && userGroup !== undefined) {
                localVarQueryParameter['user_group'] = userGroup;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞历史处置记录列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHandleHistory(listVulHandleHistoryRequest?: ListVulHandleHistoryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/handle-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let status;
            
            let vulId;
            
            let vulType;
            
            let assetValue;
            
            let groupName;
            
            let hostName;
            
            let hostIp;
            
            let clusterId;
            
            let sortKey;
            
            let sortDir;
            
            let publicIp;
            
            let privateIp;

            if (listVulHandleHistoryRequest !== null && listVulHandleHistoryRequest !== undefined) {
                if (listVulHandleHistoryRequest instanceof ListVulHandleHistoryRequest) {
                    enterpriseProjectId = listVulHandleHistoryRequest.enterpriseProjectId;
                    limit = listVulHandleHistoryRequest.limit;
                    offset = listVulHandleHistoryRequest.offset;
                    status = listVulHandleHistoryRequest.status;
                    vulId = listVulHandleHistoryRequest.vulId;
                    vulType = listVulHandleHistoryRequest.vulType;
                    assetValue = listVulHandleHistoryRequest.assetValue;
                    groupName = listVulHandleHistoryRequest.groupName;
                    hostName = listVulHandleHistoryRequest.hostName;
                    hostIp = listVulHandleHistoryRequest.hostIp;
                    clusterId = listVulHandleHistoryRequest.clusterId;
                    sortKey = listVulHandleHistoryRequest.sortKey;
                    sortDir = listVulHandleHistoryRequest.sortDir;
                    publicIp = listVulHandleHistoryRequest.publicIp;
                    privateIp = listVulHandleHistoryRequest.privateIp;
                } else {
                    enterpriseProjectId = listVulHandleHistoryRequest['enterprise_project_id'];
                    limit = listVulHandleHistoryRequest['limit'];
                    offset = listVulHandleHistoryRequest['offset'];
                    status = listVulHandleHistoryRequest['status'];
                    vulId = listVulHandleHistoryRequest['vul_id'];
                    vulType = listVulHandleHistoryRequest['vul_type'];
                    assetValue = listVulHandleHistoryRequest['asset_value'];
                    groupName = listVulHandleHistoryRequest['group_name'];
                    hostName = listVulHandleHistoryRequest['host_name'];
                    hostIp = listVulHandleHistoryRequest['host_ip'];
                    clusterId = listVulHandleHistoryRequest['cluster_id'];
                    sortKey = listVulHandleHistoryRequest['sort_key'];
                    sortDir = listVulHandleHistoryRequest['sort_dir'];
                    publicIp = listVulHandleHistoryRequest['public_ip'];
                    privateIp = listVulHandleHistoryRequest['private_ip'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling listVulHandleHistory.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listVulHandleHistory.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listVulHandleHistory.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (vulType !== null && vulType !== undefined) {
                localVarQueryParameter['vul_type'] = vulType;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询受影响服务器详情-软件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHostApps(listVulHostAppsRequest?: ListVulHostAppsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/{host_id}/apps",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let vulId;
            
            let handleStatus;
            
            let containerId;
            
            let isContainer;

            if (listVulHostAppsRequest !== null && listVulHostAppsRequest !== undefined) {
                if (listVulHostAppsRequest instanceof ListVulHostAppsRequest) {
                    hostId = listVulHostAppsRequest.hostId;
                    enterpriseProjectId = listVulHostAppsRequest.enterpriseProjectId;
                    vulId = listVulHostAppsRequest.vulId;
                    handleStatus = listVulHostAppsRequest.handleStatus;
                    containerId = listVulHostAppsRequest.containerId;
                    isContainer = listVulHostAppsRequest.isContainer;
                } else {
                    hostId = listVulHostAppsRequest['host_id'];
                    enterpriseProjectId = listVulHostAppsRequest['enterprise_project_id'];
                    vulId = listVulHostAppsRequest['vul_id'];
                    handleStatus = listVulHostAppsRequest['handle_status'];
                    containerId = listVulHostAppsRequest['container_id'];
                    isContainer = listVulHostAppsRequest['is_container'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listVulHostApps.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (isContainer !== null && isContainer !== undefined) {
                localVarQueryParameter['is_container'] = isContainer;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询可回滚的备份列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHostBackups(listVulHostBackupsRequest?: ListVulHostBackupsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/backup/backups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let vulId;
            
            let hostId;
            
            let enterpriseProjectId;

            if (listVulHostBackupsRequest !== null && listVulHostBackupsRequest !== undefined) {
                if (listVulHostBackupsRequest instanceof ListVulHostBackupsRequest) {
                    vulId = listVulHostBackupsRequest.vulId;
                    hostId = listVulHostBackupsRequest.hostId;
                    enterpriseProjectId = listVulHostBackupsRequest.enterpriseProjectId;
                } else {
                    vulId = listVulHostBackupsRequest['vul_id'];
                    hostId = listVulHostBackupsRequest['host_id'];
                    enterpriseProjectId = listVulHostBackupsRequest['enterprise_project_id'];
                }
            }

        
            if (vulId === null || vulId === undefined) {
                throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulHostBackups.');
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listVulHostBackups.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询受影响服务器详情-进程列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHostProcess(listVulHostProcessRequest?: ListVulHostProcessRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/{host_id}/process",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let appName;
            
            let handleStatus;
            
            let containerId;

            if (listVulHostProcessRequest !== null && listVulHostProcessRequest !== undefined) {
                if (listVulHostProcessRequest instanceof ListVulHostProcessRequest) {
                    hostId = listVulHostProcessRequest.hostId;
                    enterpriseProjectId = listVulHostProcessRequest.enterpriseProjectId;
                    offset = listVulHostProcessRequest.offset;
                    limit = listVulHostProcessRequest.limit;
                    appName = listVulHostProcessRequest.appName;
                    handleStatus = listVulHostProcessRequest.handleStatus;
                    containerId = listVulHostProcessRequest.containerId;
                } else {
                    hostId = listVulHostProcessRequest['host_id'];
                    enterpriseProjectId = listVulHostProcessRequest['enterprise_project_id'];
                    offset = listVulHostProcessRequest['offset'];
                    limit = listVulHostProcessRequest['limit'];
                    appName = listVulHostProcessRequest['app_name'];
                    handleStatus = listVulHostProcessRequest['handle_status'];
                    containerId = listVulHostProcessRequest['container_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listVulHostProcess.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (appName !== null && appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询处理对应的主机存储库的列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHostVaults(listVulHostVaultsRequest?: ListVulHostVaultsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/backup/host-vaults",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let backupInfoId;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;

            if (listVulHostVaultsRequest !== null && listVulHostVaultsRequest !== undefined) {
                if (listVulHostVaultsRequest instanceof ListVulHostVaultsRequest) {
                    backupInfoId = listVulHostVaultsRequest.backupInfoId;
                    enterpriseProjectId = listVulHostVaultsRequest.enterpriseProjectId;
                    limit = listVulHostVaultsRequest.limit;
                    offset = listVulHostVaultsRequest.offset;
                } else {
                    backupInfoId = listVulHostVaultsRequest['backup_info_id'];
                    enterpriseProjectId = listVulHostVaultsRequest['enterprise_project_id'];
                    limit = listVulHostVaultsRequest['limit'];
                    offset = listVulHostVaultsRequest['offset'];
                }
            }

        
            if (backupInfoId === null || backupInfoId === undefined) {
                throw new RequiredError('backupInfoId','Required parameter backupInfoId was null or undefined when calling listVulHostVaults.');
            }
            if (backupInfoId !== null && backupInfoId !== undefined) {
                localVarQueryParameter['backup_info_id'] = backupInfoId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 漏洞对应cve信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulnerabilityCve(listVulnerabilityCveRequest?: ListVulnerabilityCveRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/vulnerability/{vul_id}/cve",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let vulId;
            
            let region;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;

            if (listVulnerabilityCveRequest !== null && listVulnerabilityCveRequest !== undefined) {
                if (listVulnerabilityCveRequest instanceof ListVulnerabilityCveRequest) {
                    vulId = listVulnerabilityCveRequest.vulId;
                    region = listVulnerabilityCveRequest.region;
                    enterpriseProjectId = listVulnerabilityCveRequest.enterpriseProjectId;
                    offset = listVulnerabilityCveRequest.offset;
                    limit = listVulnerabilityCveRequest.limit;
                } else {
                    vulId = listVulnerabilityCveRequest['vul_id'];
                    region = listVulnerabilityCveRequest['region'];
                    enterpriseProjectId = listVulnerabilityCveRequest['enterprise_project_id'];
                    offset = listVulnerabilityCveRequest['offset'];
                    limit = listVulnerabilityCveRequest['limit'];
                }
            }

        
            if (vulId === null || vulId === undefined) {
            throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulnerabilityCve.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'vul_id': vulId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询弱口令检测结果列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWeakPasswordUsers(listWeakPasswordUsersRequest?: ListWeakPasswordUsersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/weak-password-users",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostIp;
            
            let userName;
            
            let hostId;
            
            let limit;
            
            let offset;

            if (listWeakPasswordUsersRequest !== null && listWeakPasswordUsersRequest !== undefined) {
                if (listWeakPasswordUsersRequest instanceof ListWeakPasswordUsersRequest) {
                    enterpriseProjectId = listWeakPasswordUsersRequest.enterpriseProjectId;
                    hostName = listWeakPasswordUsersRequest.hostName;
                    hostIp = listWeakPasswordUsersRequest.hostIp;
                    userName = listWeakPasswordUsersRequest.userName;
                    hostId = listWeakPasswordUsersRequest.hostId;
                    limit = listWeakPasswordUsersRequest.limit;
                    offset = listWeakPasswordUsersRequest.offset;
                } else {
                    enterpriseProjectId = listWeakPasswordUsersRequest['enterprise_project_id'];
                    hostName = listWeakPasswordUsersRequest['host_name'];
                    hostIp = listWeakPasswordUsersRequest['host_ip'];
                    userName = listWeakPasswordUsersRequest['user_name'];
                    hostId = listWeakPasswordUsersRequest['host_id'];
                    limit = listWeakPasswordUsersRequest['limit'];
                    offset = listWeakPasswordUsersRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (userName !== null && userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-左侧WebAppAndService名称树信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebAppAndServiceStatistics(listWebAppAndServiceStatisticsRequest?: ListWebAppAndServiceStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/web-app-and-service-statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let name;
            
            let category;
            
            let catalogue;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;

            if (listWebAppAndServiceStatisticsRequest !== null && listWebAppAndServiceStatisticsRequest !== undefined) {
                if (listWebAppAndServiceStatisticsRequest instanceof ListWebAppAndServiceStatisticsRequest) {
                    name = listWebAppAndServiceStatisticsRequest.name;
                    category = listWebAppAndServiceStatisticsRequest.category;
                    catalogue = listWebAppAndServiceStatisticsRequest.catalogue;
                    enterpriseProjectId = listWebAppAndServiceStatisticsRequest.enterpriseProjectId;
                    offset = listWebAppAndServiceStatisticsRequest.offset;
                    limit = listWebAppAndServiceStatisticsRequest.limit;
                } else {
                    name = listWebAppAndServiceStatisticsRequest['name'];
                    category = listWebAppAndServiceStatisticsRequest['category'];
                    catalogue = listWebAppAndServiceStatisticsRequest['catalogue'];
                    enterpriseProjectId = listWebAppAndServiceStatisticsRequest['enterprise_project_id'];
                    offset = listWebAppAndServiceStatisticsRequest['offset'];
                    limit = listWebAppAndServiceStatisticsRequest['limit'];
                }
            }

        
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listWebAppAndServiceStatistics.');
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebAppAndServiceStatistics.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (catalogue === null || catalogue === undefined) {
                throw new RequiredError('catalogue','Required parameter catalogue was null or undefined when calling listWebAppAndServiceStatistics.');
            }
            if (catalogue !== null && catalogue !== undefined) {
                localVarQueryParameter['catalogue'] = catalogue;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-右侧WebAppAndService资产信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebAppAndServices(listWebAppAndServicesRequest?: ListWebAppAndServicesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/web-app-and-services",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let name;
            
            let category;
            
            let catalogue;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostName;
            
            let hostId;
            
            let hostIp;
            
            let version;
            
            let installDir;
            
            let partMatch;

            if (listWebAppAndServicesRequest !== null && listWebAppAndServicesRequest !== undefined) {
                if (listWebAppAndServicesRequest instanceof ListWebAppAndServicesRequest) {
                    name = listWebAppAndServicesRequest.name;
                    category = listWebAppAndServicesRequest.category;
                    catalogue = listWebAppAndServicesRequest.catalogue;
                    enterpriseProjectId = listWebAppAndServicesRequest.enterpriseProjectId;
                    offset = listWebAppAndServicesRequest.offset;
                    limit = listWebAppAndServicesRequest.limit;
                    hostName = listWebAppAndServicesRequest.hostName;
                    hostId = listWebAppAndServicesRequest.hostId;
                    hostIp = listWebAppAndServicesRequest.hostIp;
                    version = listWebAppAndServicesRequest.version;
                    installDir = listWebAppAndServicesRequest.installDir;
                    partMatch = listWebAppAndServicesRequest.partMatch;
                } else {
                    name = listWebAppAndServicesRequest['name'];
                    category = listWebAppAndServicesRequest['category'];
                    catalogue = listWebAppAndServicesRequest['catalogue'];
                    enterpriseProjectId = listWebAppAndServicesRequest['enterprise_project_id'];
                    offset = listWebAppAndServicesRequest['offset'];
                    limit = listWebAppAndServicesRequest['limit'];
                    hostName = listWebAppAndServicesRequest['host_name'];
                    hostId = listWebAppAndServicesRequest['host_id'];
                    hostIp = listWebAppAndServicesRequest['host_ip'];
                    version = listWebAppAndServicesRequest['version'];
                    installDir = listWebAppAndServicesRequest['install_dir'];
                    partMatch = listWebAppAndServicesRequest['part_match'];
                }
            }

        
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listWebAppAndServices.');
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebAppAndServices.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (catalogue === null || catalogue === undefined) {
                throw new RequiredError('catalogue','Required parameter catalogue was null or undefined when calling listWebAppAndServices.');
            }
            if (catalogue !== null && catalogue !== undefined) {
                localVarQueryParameter['catalogue'] = catalogue;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (installDir !== null && installDir !== undefined) {
                localVarQueryParameter['install_dir'] = installDir;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-Web框架的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebFrameworkHostInfo(listWebFrameworkHostInfoRequest?: ListWebFrameworkHostInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/host/web-framework",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let category;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let fileName;
            
            let hostName;
            
            let hostIp;
            
            let partMatch;

            if (listWebFrameworkHostInfoRequest !== null && listWebFrameworkHostInfoRequest !== undefined) {
                if (listWebFrameworkHostInfoRequest instanceof ListWebFrameworkHostInfoRequest) {
                    category = listWebFrameworkHostInfoRequest.category;
                    enterpriseProjectId = listWebFrameworkHostInfoRequest.enterpriseProjectId;
                    offset = listWebFrameworkHostInfoRequest.offset;
                    limit = listWebFrameworkHostInfoRequest.limit;
                    fileName = listWebFrameworkHostInfoRequest.fileName;
                    hostName = listWebFrameworkHostInfoRequest.hostName;
                    hostIp = listWebFrameworkHostInfoRequest.hostIp;
                    partMatch = listWebFrameworkHostInfoRequest.partMatch;
                } else {
                    category = listWebFrameworkHostInfoRequest['category'];
                    enterpriseProjectId = listWebFrameworkHostInfoRequest['enterprise_project_id'];
                    offset = listWebFrameworkHostInfoRequest['offset'];
                    limit = listWebFrameworkHostInfoRequest['limit'];
                    fileName = listWebFrameworkHostInfoRequest['file_name'];
                    hostName = listWebFrameworkHostInfoRequest['host_name'];
                    hostIp = listWebFrameworkHostInfoRequest['host_ip'];
                    partMatch = listWebFrameworkHostInfoRequest['part_match'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebFrameworkHostInfo.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-主机管理-指纹类型-Web框架
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebFrameworkInfo(listWebFrameworkInfoRequest?: ListWebFrameworkInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/{host_id}/web-framework",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let category;
            
            let enterpriseProjectId;
            
            let fileName;

            if (listWebFrameworkInfoRequest !== null && listWebFrameworkInfoRequest !== undefined) {
                if (listWebFrameworkInfoRequest instanceof ListWebFrameworkInfoRequest) {
                    hostId = listWebFrameworkInfoRequest.hostId;
                    category = listWebFrameworkInfoRequest.category;
                    enterpriseProjectId = listWebFrameworkInfoRequest.enterpriseProjectId;
                    fileName = listWebFrameworkInfoRequest.fileName;
                } else {
                    hostId = listWebFrameworkInfoRequest['host_id'];
                    category = listWebFrameworkInfoRequest['category'];
                    enterpriseProjectId = listWebFrameworkInfoRequest['enterprise_project_id'];
                    fileName = listWebFrameworkInfoRequest['file_name'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listWebFrameworkInfo.');
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebFrameworkInfo.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-Web框架左侧树
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebFrameworkStatistics(listWebFrameworkStatisticsRequest?: ListWebFrameworkStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/statistics/web-framework",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let category;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let fileName;

            if (listWebFrameworkStatisticsRequest !== null && listWebFrameworkStatisticsRequest !== undefined) {
                if (listWebFrameworkStatisticsRequest instanceof ListWebFrameworkStatisticsRequest) {
                    category = listWebFrameworkStatisticsRequest.category;
                    enterpriseProjectId = listWebFrameworkStatisticsRequest.enterpriseProjectId;
                    offset = listWebFrameworkStatisticsRequest.offset;
                    limit = listWebFrameworkStatisticsRequest.limit;
                    fileName = listWebFrameworkStatisticsRequest.fileName;
                } else {
                    category = listWebFrameworkStatisticsRequest['category'];
                    enterpriseProjectId = listWebFrameworkStatisticsRequest['enterprise_project_id'];
                    offset = listWebFrameworkStatisticsRequest['offset'];
                    limit = listWebFrameworkStatisticsRequest['limit'];
                    fileName = listWebFrameworkStatisticsRequest['file_name'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebFrameworkStatistics.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-Web站点的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebSiteHostInfo(listWebSiteHostInfoRequest?: ListWebSiteHostInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/host/web-site",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let category;
            
            let domain;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostName;
            
            let hostIp;
            
            let partMatch;

            if (listWebSiteHostInfoRequest !== null && listWebSiteHostInfoRequest !== undefined) {
                if (listWebSiteHostInfoRequest instanceof ListWebSiteHostInfoRequest) {
                    category = listWebSiteHostInfoRequest.category;
                    domain = listWebSiteHostInfoRequest.domain;
                    enterpriseProjectId = listWebSiteHostInfoRequest.enterpriseProjectId;
                    offset = listWebSiteHostInfoRequest.offset;
                    limit = listWebSiteHostInfoRequest.limit;
                    hostName = listWebSiteHostInfoRequest.hostName;
                    hostIp = listWebSiteHostInfoRequest.hostIp;
                    partMatch = listWebSiteHostInfoRequest.partMatch;
                } else {
                    category = listWebSiteHostInfoRequest['category'];
                    domain = listWebSiteHostInfoRequest['domain'];
                    enterpriseProjectId = listWebSiteHostInfoRequest['enterprise_project_id'];
                    offset = listWebSiteHostInfoRequest['offset'];
                    limit = listWebSiteHostInfoRequest['limit'];
                    hostName = listWebSiteHostInfoRequest['host_name'];
                    hostIp = listWebSiteHostInfoRequest['host_ip'];
                    partMatch = listWebSiteHostInfoRequest['part_match'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebSiteHostInfo.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling listWebSiteHostInfo.');
            }
            if (domain !== null && domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (partMatch !== null && partMatch !== undefined) {
                localVarQueryParameter['part_match'] = partMatch;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-主机管理-指纹类型-Web站点
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebSiteInfo(listWebSiteInfoRequest?: ListWebSiteInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/{host_id}/web-site",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let category;
            
            let enterpriseProjectId;
            
            let domain;

            if (listWebSiteInfoRequest !== null && listWebSiteInfoRequest !== undefined) {
                if (listWebSiteInfoRequest instanceof ListWebSiteInfoRequest) {
                    hostId = listWebSiteInfoRequest.hostId;
                    category = listWebSiteInfoRequest.category;
                    enterpriseProjectId = listWebSiteInfoRequest.enterpriseProjectId;
                    domain = listWebSiteInfoRequest.domain;
                } else {
                    hostId = listWebSiteInfoRequest['host_id'];
                    category = listWebSiteInfoRequest['category'];
                    enterpriseProjectId = listWebSiteInfoRequest['enterprise_project_id'];
                    domain = listWebSiteInfoRequest['domain'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listWebSiteInfo.');
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling listWebSiteInfo.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (domain !== null && domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-资产指纹-Web站点左侧树
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebSiteStatistics(listWebSiteStatisticsRequest?: ListWebSiteStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/statistics/web-site",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let domain;

            if (listWebSiteStatisticsRequest !== null && listWebSiteStatisticsRequest !== undefined) {
                if (listWebSiteStatisticsRequest instanceof ListWebSiteStatisticsRequest) {
                    enterpriseProjectId = listWebSiteStatisticsRequest.enterpriseProjectId;
                    offset = listWebSiteStatisticsRequest.offset;
                    limit = listWebSiteStatisticsRequest.limit;
                    domain = listWebSiteStatisticsRequest.domain;
                } else {
                    enterpriseProjectId = listWebSiteStatisticsRequest['enterprise_project_id'];
                    offset = listWebSiteStatisticsRequest['offset'];
                    limit = listWebSiteStatisticsRequest['limit'];
                    domain = listWebSiteStatisticsRequest['domain'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (domain !== null && domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群下某一命名空间下的工作负载
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWorkLoads(listWorkLoadsRequest?: ListWorkLoadsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/{namespace}/workloads",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let namespace;
            
            let workloadType;
            
            let enterpriseProjectId;

            if (listWorkLoadsRequest !== null && listWorkLoadsRequest !== undefined) {
                if (listWorkLoadsRequest instanceof ListWorkLoadsRequest) {
                    clusterId = listWorkLoadsRequest.clusterId;
                    namespace = listWorkLoadsRequest.namespace;
                    workloadType = listWorkLoadsRequest.workloadType;
                    enterpriseProjectId = listWorkLoadsRequest.enterpriseProjectId;
                } else {
                    clusterId = listWorkLoadsRequest['cluster_id'];
                    namespace = listWorkLoadsRequest['namespace'];
                    workloadType = listWorkLoadsRequest['workload_type'];
                    enterpriseProjectId = listWorkLoadsRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling listWorkLoads.');
            }
            if (namespace === null || namespace === undefined) {
            throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling listWorkLoads.');
            }
            if (workloadType === null || workloadType === undefined) {
                throw new RequiredError('workloadType','Required parameter workloadType was null or undefined when calling listWorkLoads.');
            }
            if (workloadType !== null && workloadType !== undefined) {
                localVarQueryParameter['workload_type'] = workloadType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId,'namespace': namespace, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 编辑动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        modifyDecoyPortPolicy(modifyDecoyPortPolicyRequest?: ModifyDecoyPortPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/honeypot-port/policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (modifyDecoyPortPolicyRequest !== null && modifyDecoyPortPolicyRequest !== undefined) {
                if (modifyDecoyPortPolicyRequest instanceof ModifyDecoyPortPolicyRequest) {
                    policyId = modifyDecoyPortPolicyRequest.policyId;
                    body = modifyDecoyPortPolicyRequest.body
                    enterpriseProjectId = modifyDecoyPortPolicyRequest.enterpriseProjectId;
                } else {
                    policyId = modifyDecoyPortPolicyRequest['policy_id'];
                    body = modifyDecoyPortPolicyRequest['body'];
                    enterpriseProjectId = modifyDecoyPortPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling modifyDecoyPortPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除告警白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        removeAlarmWhiteList(removeAlarmWhiteListRequest?: RemoveAlarmWhiteListRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/event/white-list/alarm",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (removeAlarmWhiteListRequest !== null && removeAlarmWhiteListRequest !== undefined) {
                if (removeAlarmWhiteListRequest instanceof RemoveAlarmWhiteListRequest) {
                    body = removeAlarmWhiteListRequest.body
                    enterpriseProjectId = removeAlarmWhiteListRequest.enterpriseProjectId;
                } else {
                    body = removeAlarmWhiteListRequest['body'];
                    enterpriseProjectId = removeAlarmWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除登录白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        removeLoginWhiteList(removeLoginWhiteListRequest?: RemoveLoginWhiteListRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/event/white-list/login",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (removeLoginWhiteListRequest !== null && removeLoginWhiteListRequest !== undefined) {
                if (removeLoginWhiteListRequest instanceof RemoveLoginWhiteListRequest) {
                    body = removeLoginWhiteListRequest.body
                    enterpriseProjectId = removeLoginWhiteListRequest.enterpriseProjectId;
                } else {
                    body = removeLoginWhiteListRequest['body'];
                    enterpriseProjectId = removeLoginWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除系统用户白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        removeSystemUserWhiteList(removeSystemUserWhiteListRequest?: RemoveSystemUserWhiteListRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/event/white-list/userlist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (removeSystemUserWhiteListRequest !== null && removeSystemUserWhiteListRequest !== undefined) {
                if (removeSystemUserWhiteListRequest instanceof RemoveSystemUserWhiteListRequest) {
                    body = removeSystemUserWhiteListRequest.body
                    enterpriseProjectId = removeSystemUserWhiteListRequest.enterpriseProjectId;
                } else {
                    body = removeSystemUserWhiteListRequest['body'];
                    enterpriseProjectId = removeSystemUserWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 用备份进行回滚
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        restoreVulHostBackup(restoreVulHostBackupRequest?: RestoreVulHostBackupRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/vulnerability/backup/{backup_id}/restore",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let backupId;
            
            let enterpriseProjectId;

            if (restoreVulHostBackupRequest !== null && restoreVulHostBackupRequest !== undefined) {
                if (restoreVulHostBackupRequest instanceof RestoreVulHostBackupRequest) {
                    backupId = restoreVulHostBackupRequest.backupId;
                    enterpriseProjectId = restoreVulHostBackupRequest.enterpriseProjectId;
                } else {
                    backupId = restoreVulHostBackupRequest['backup_id'];
                    enterpriseProjectId = restoreVulHostBackupRequest['enterprise_project_id'];
                }
            }

        
            if (backupId === null || backupId === undefined) {
            throw new RequiredError('backupId','Required parameter backupId was null or undefined when calling restoreVulHostBackup.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'backup_id': backupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 采集单主机资产指纹
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        runHostAssetManualCollect(runHostAssetManualCollectRequest?: RunHostAssetManualCollectRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/asset/manual-collect/{type}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let type;
            
            let hostId;
            
            let enterpriseProjectId;

            if (runHostAssetManualCollectRequest !== null && runHostAssetManualCollectRequest !== undefined) {
                if (runHostAssetManualCollectRequest instanceof RunHostAssetManualCollectRequest) {
                    type = runHostAssetManualCollectRequest.type;
                    hostId = runHostAssetManualCollectRequest.hostId;
                    enterpriseProjectId = runHostAssetManualCollectRequest.enterpriseProjectId;
                } else {
                    type = runHostAssetManualCollectRequest['type'];
                    hostId = runHostAssetManualCollectRequest['host_id'];
                    enterpriseProjectId = runHostAssetManualCollectRequest['enterprise_project_id'];
                }
            }

        
            if (type === null || type === undefined) {
            throw new RequiredError('type','Required parameter type was null or undefined when calling runHostAssetManualCollect.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling runHostAssetManualCollect.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'type': type, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 从SWR服务同步镜像列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        runImageSynchronize(runImageSynchronizeRequest?: RunImageSynchronizeRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/synchronize",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (runImageSynchronizeRequest !== null && runImageSynchronizeRequest !== undefined) {
                if (runImageSynchronizeRequest instanceof RunImageSynchronizeRequest) {
                    body = runImageSynchronizeRequest.body
                    region = runImageSynchronizeRequest.region;
                    enterpriseProjectId = runImageSynchronizeRequest.enterpriseProjectId;
                } else {
                    body = runImageSynchronizeRequest['body'];
                    region = runImageSynchronizeRequest['region'];
                    enterpriseProjectId = runImageSynchronizeRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 设置提示信息配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setMalwareReminders(setMalwareRemindersRequest?: SetMalwareRemindersRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/setting/malware/reminders",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (setMalwareRemindersRequest !== null && setMalwareRemindersRequest !== undefined) {
                if (setMalwareRemindersRequest instanceof SetMalwareRemindersRequest) {
                    body = setMalwareRemindersRequest.body
                    enterpriseProjectId = setMalwareRemindersRequest.enterpriseProjectId;
                } else {
                    body = setMalwareRemindersRequest['body'];
                    enterpriseProjectId = setMalwareRemindersRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 设置双因子登录配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setTwoFactorLoginConfig(setTwoFactorLoginConfigRequest?: SetTwoFactorLoginConfigRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/setting/two-factor-login/config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (setTwoFactorLoginConfigRequest !== null && setTwoFactorLoginConfigRequest !== undefined) {
                if (setTwoFactorLoginConfigRequest instanceof SetTwoFactorLoginConfigRequest) {
                    body = setTwoFactorLoginConfigRequest.body
                    enterpriseProjectId = setTwoFactorLoginConfigRequest.enterpriseProjectId;
                } else {
                    body = setTwoFactorLoginConfigRequest['body'];
                    enterpriseProjectId = setTwoFactorLoginConfigRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-概览-资产状态-主机Agent状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAgentStatisticsStatus(showAgentStatisticsStatusRequest?: ShowAgentStatisticsStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/overview/status/agent",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAgentStatisticsStatusRequest !== null && showAgentStatisticsStatusRequest !== undefined) {
                if (showAgentStatisticsStatusRequest instanceof ShowAgentStatisticsStatusRequest) {
                    enterpriseProjectId = showAgentStatisticsStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAgentStatisticsStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询应用防护开启状态：查询单台服务器的应用防护功能开启状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAppRaspSwitchStatus(showAppRaspSwitchStatusRequest?: ShowAppRaspSwitchStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/{host_id}/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let appType;

            if (showAppRaspSwitchStatusRequest !== null && showAppRaspSwitchStatusRequest !== undefined) {
                if (showAppRaspSwitchStatusRequest instanceof ShowAppRaspSwitchStatusRequest) {
                    hostId = showAppRaspSwitchStatusRequest.hostId;
                    enterpriseProjectId = showAppRaspSwitchStatusRequest.enterpriseProjectId;
                    appType = showAppRaspSwitchStatusRequest.appType;
                } else {
                    hostId = showAppRaspSwitchStatusRequest['host_id'];
                    enterpriseProjectId = showAppRaspSwitchStatusRequest['enterprise_project_id'];
                    appType = showAppRaspSwitchStatusRequest['app_type'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showAppRaspSwitchStatus.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (appType !== null && appType !== undefined) {
                localVarQueryParameter['app_type'] = appType;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产统计信息，账号、端口、进程等
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAssetStatistic(showAssetStatisticRequest?: ShowAssetStatisticRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let category;

            if (showAssetStatisticRequest !== null && showAssetStatisticRequest !== undefined) {
                if (showAssetStatisticRequest instanceof ShowAssetStatisticRequest) {
                    enterpriseProjectId = showAssetStatisticRequest.enterpriseProjectId;
                    hostId = showAssetStatisticRequest.hostId;
                    category = showAssetStatisticRequest.category;
                } else {
                    enterpriseProjectId = showAssetStatisticRequest['enterprise_project_id'];
                    hostId = showAssetStatisticRequest['host_id'];
                    category = showAssetStatisticRequest['category'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询HSS存储库绑定的备份策略信息，确保已经购买了勒索防护存储库，可以从cbr云备份服务进行验证，确保已经存在HSS_projectid命名的存储库已经购买
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showBackupPolicyInfo(showBackupPolicyInfoRequest?: ShowBackupPolicyInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/backup/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;

            if (showBackupPolicyInfoRequest !== null && showBackupPolicyInfoRequest !== undefined) {
                if (showBackupPolicyInfoRequest instanceof ShowBackupPolicyInfoRequest) {
                    region = showBackupPolicyInfoRequest.region;
                    enterpriseProjectId = showBackupPolicyInfoRequest.enterpriseProjectId;
                } else {
                    region = showBackupPolicyInfoRequest['region'];
                    enterpriseProjectId = showBackupPolicyInfoRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询基线扫描手动检测结果
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showBaselineScanStatus(showBaselineScanStatusRequest?: ShowBaselineScanStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/scan-status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showBaselineScanStatusRequest !== null && showBaselineScanStatusRequest !== undefined) {
                if (showBaselineScanStatusRequest instanceof ShowBaselineScanStatusRequest) {
                    enterpriseProjectId = showBaselineScanStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showBaselineScanStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询基线白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showBaselineWhiteList(showBaselineWhiteListRequest?: ShowBaselineWhiteListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/whitelist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let id;
            
            let enterpriseProjectId;

            if (showBaselineWhiteListRequest !== null && showBaselineWhiteListRequest !== undefined) {
                if (showBaselineWhiteListRequest instanceof ShowBaselineWhiteListRequest) {
                    id = showBaselineWhiteListRequest.id;
                    enterpriseProjectId = showBaselineWhiteListRequest.enterpriseProjectId;
                } else {
                    id = showBaselineWhiteListRequest['id'];
                    enterpriseProjectId = showBaselineWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showBaselineWhiteList.');
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询配置检查项检测报告
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showCheckRuleDetail(showCheckRuleDetailRequest?: ShowCheckRuleDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/check-rule/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let checkName;
            
            let checkType;
            
            let checkRuleId;
            
            let standard;
            
            let enterpriseProjectId;
            
            let hostId;

            if (showCheckRuleDetailRequest !== null && showCheckRuleDetailRequest !== undefined) {
                if (showCheckRuleDetailRequest instanceof ShowCheckRuleDetailRequest) {
                    checkName = showCheckRuleDetailRequest.checkName;
                    checkType = showCheckRuleDetailRequest.checkType;
                    checkRuleId = showCheckRuleDetailRequest.checkRuleId;
                    standard = showCheckRuleDetailRequest.standard;
                    enterpriseProjectId = showCheckRuleDetailRequest.enterpriseProjectId;
                    hostId = showCheckRuleDetailRequest.hostId;
                } else {
                    checkName = showCheckRuleDetailRequest['check_name'];
                    checkType = showCheckRuleDetailRequest['check_type'];
                    checkRuleId = showCheckRuleDetailRequest['check_rule_id'];
                    standard = showCheckRuleDetailRequest['standard'];
                    enterpriseProjectId = showCheckRuleDetailRequest['enterprise_project_id'];
                    hostId = showCheckRuleDetailRequest['host_id'];
                }
            }

        
            if (checkName === null || checkName === undefined) {
                throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling showCheckRuleDetail.');
            }
            if (checkName !== null && checkName !== undefined) {
                localVarQueryParameter['check_name'] = checkName;
            }
            if (checkType === null || checkType === undefined) {
                throw new RequiredError('checkType','Required parameter checkType was null or undefined when calling showCheckRuleDetail.');
            }
            if (checkType !== null && checkType !== undefined) {
                localVarQueryParameter['check_type'] = checkType;
            }
            if (checkRuleId === null || checkRuleId === undefined) {
                throw new RequiredError('checkRuleId','Required parameter checkRuleId was null or undefined when calling showCheckRuleDetail.');
            }
            if (checkRuleId !== null && checkRuleId !== undefined) {
                localVarQueryParameter['check_rule_id'] = checkRuleId;
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling showCheckRuleDetail.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群资产统计数量
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showClusterAssetStatistics(showClusterAssetStatisticsRequest?: ShowClusterAssetStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/cluster/asset/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showClusterAssetStatisticsRequest !== null && showClusterAssetStatisticsRequest !== undefined) {
                if (showClusterAssetStatisticsRequest instanceof ShowClusterAssetStatisticsRequest) {
                    enterpriseProjectId = showClusterAssetStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showClusterAssetStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群防护策略模板
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showClusterProtectPolicyTemplate(showClusterProtectPolicyTemplateRequest?: ShowClusterProtectPolicyTemplateRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/clusters/protection-policy-templates/{policy_template_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyTemplateId;
            
            let enterpriseProjectId;

            if (showClusterProtectPolicyTemplateRequest !== null && showClusterProtectPolicyTemplateRequest !== undefined) {
                if (showClusterProtectPolicyTemplateRequest instanceof ShowClusterProtectPolicyTemplateRequest) {
                    policyTemplateId = showClusterProtectPolicyTemplateRequest.policyTemplateId;
                    enterpriseProjectId = showClusterProtectPolicyTemplateRequest.enterpriseProjectId;
                } else {
                    policyTemplateId = showClusterProtectPolicyTemplateRequest['policy_template_id'];
                    enterpriseProjectId = showClusterProtectPolicyTemplateRequest['enterprise_project_id'];
                }
            }

        
            if (policyTemplateId === null || policyTemplateId === undefined) {
            throw new RequiredError('policyTemplateId','Required parameter policyTemplateId was null or undefined when calling showClusterProtectPolicyTemplate.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_template_id': policyTemplateId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 呈现某一端口详细信息，如本地端口：80，类型：TCP，危险程度：正常，端口描述：常用于SSH(SecureShell)-远程登录协议，用于安全登录文件传输（SCP，SFTP）及端口重新定向。
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showCommonPort(showCommonPortRequest?: ShowCommonPortRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/common-port-info",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let port;
            
            let categoty;
            
            let enterpriseProjectId;

            if (showCommonPortRequest !== null && showCommonPortRequest !== undefined) {
                if (showCommonPortRequest instanceof ShowCommonPortRequest) {
                    port = showCommonPortRequest.port;
                    categoty = showCommonPortRequest.categoty;
                    enterpriseProjectId = showCommonPortRequest.enterpriseProjectId;
                } else {
                    port = showCommonPortRequest['port'];
                    categoty = showCommonPortRequest['categoty'];
                    enterpriseProjectId = showCommonPortRequest['enterprise_project_id'];
                }
            }

        
            if (port === null || port === undefined) {
                throw new RequiredError('port','Required parameter port was null or undefined when calling showCommonPort.');
            }
            if (port !== null && port !== undefined) {
                localVarQueryParameter['port'] = port;
            }
            if (categoty === null || categoty === undefined) {
                throw new RequiredError('categoty','Required parameter categoty was null or undefined when calling showCommonPort.');
            }
            if (categoty !== null && categoty !== undefined) {
                localVarQueryParameter['categoty'] = categoty;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器集群网络的网络信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showContainerNetworkInfo(showContainerNetworkInfoRequest?: ShowContainerNetworkInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/network-info",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (showContainerNetworkInfoRequest !== null && showContainerNetworkInfoRequest !== undefined) {
                if (showContainerNetworkInfoRequest instanceof ShowContainerNetworkInfoRequest) {
                    clusterId = showContainerNetworkInfoRequest.clusterId;
                    enterpriseProjectId = showContainerNetworkInfoRequest.enterpriseProjectId;
                } else {
                    clusterId = showContainerNetworkInfoRequest['cluster_id'];
                    enterpriseProjectId = showContainerNetworkInfoRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling showContainerNetworkInfo.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器节点防护总览数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showContainerNodeStatistics(showContainerNodeStatisticsRequest?: ShowContainerNodeStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/node-statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showContainerNodeStatisticsRequest !== null && showContainerNodeStatisticsRequest !== undefined) {
                if (showContainerNodeStatisticsRequest instanceof ShowContainerNodeStatisticsRequest) {
                    enterpriseProjectId = showContainerNodeStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showContainerNodeStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-概览-资产状态-容器节点防护状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showContainerProtectionStatus(showContainerProtectionStatusRequest?: ShowContainerProtectionStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/overview/status/container/protection",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showContainerProtectionStatusRequest !== null && showContainerProtectionStatusRequest !== undefined) {
                if (showContainerProtectionStatusRequest instanceof ShowContainerProtectionStatusRequest) {
                    enterpriseProjectId = showContainerProtectionStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showContainerProtectionStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看动态端口蜜罐策略详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDecoyPortPolicyDetails(showDecoyPortPolicyDetailsRequest?: ShowDecoyPortPolicyDetailsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/honeypot-port/policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;

            if (showDecoyPortPolicyDetailsRequest !== null && showDecoyPortPolicyDetailsRequest !== undefined) {
                if (showDecoyPortPolicyDetailsRequest instanceof ShowDecoyPortPolicyDetailsRequest) {
                    policyId = showDecoyPortPolicyDetailsRequest.policyId;
                    offset = showDecoyPortPolicyDetailsRequest.offset;
                    limit = showDecoyPortPolicyDetailsRequest.limit;
                    enterpriseProjectId = showDecoyPortPolicyDetailsRequest.enterpriseProjectId;
                } else {
                    policyId = showDecoyPortPolicyDetailsRequest['policy_id'];
                    offset = showDecoyPortPolicyDetailsRequest['offset'];
                    limit = showDecoyPortPolicyDetailsRequest['limit'];
                    enterpriseProjectId = showDecoyPortPolicyDetailsRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling showDecoyPortPolicyDetails.');
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling showDecoyPortPolicyDetails.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling showDecoyPortPolicyDetails.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询攻击标识分布统计列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showEventAttackTag(showEventAttackTagRequest?: ShowEventAttackTagRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/event/attack-tag",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let category;
            
            let enterpriseProjectId;
            
            let lastDays;
            
            let hostName;
            
            let hostId;
            
            let privateIp;
            
            let publicIp;
            
            let containerName;
            
            let eventType;
            
            let handleStatus;
            
            let severity;
            
            let severityList;
            
            let attackTag;
            
            let assetValue;
            
            let tagList;
            
            let attCk;
            
            let eventName;

            if (showEventAttackTagRequest !== null && showEventAttackTagRequest !== undefined) {
                if (showEventAttackTagRequest instanceof ShowEventAttackTagRequest) {
                    region = showEventAttackTagRequest.region;
                    category = showEventAttackTagRequest.category;
                    enterpriseProjectId = showEventAttackTagRequest.enterpriseProjectId;
                    lastDays = showEventAttackTagRequest.lastDays;
                    hostName = showEventAttackTagRequest.hostName;
                    hostId = showEventAttackTagRequest.hostId;
                    privateIp = showEventAttackTagRequest.privateIp;
                    publicIp = showEventAttackTagRequest.publicIp;
                    containerName = showEventAttackTagRequest.containerName;
                    eventType = showEventAttackTagRequest.eventType;
                    handleStatus = showEventAttackTagRequest.handleStatus;
                    severity = showEventAttackTagRequest.severity;
                    severityList = showEventAttackTagRequest.severityList;
                    attackTag = showEventAttackTagRequest.attackTag;
                    assetValue = showEventAttackTagRequest.assetValue;
                    tagList = showEventAttackTagRequest.tagList;
                    attCk = showEventAttackTagRequest.attCk;
                    eventName = showEventAttackTagRequest.eventName;
                } else {
                    region = showEventAttackTagRequest['region'];
                    category = showEventAttackTagRequest['category'];
                    enterpriseProjectId = showEventAttackTagRequest['enterprise_project_id'];
                    lastDays = showEventAttackTagRequest['last_days'];
                    hostName = showEventAttackTagRequest['host_name'];
                    hostId = showEventAttackTagRequest['host_id'];
                    privateIp = showEventAttackTagRequest['private_ip'];
                    publicIp = showEventAttackTagRequest['public_ip'];
                    containerName = showEventAttackTagRequest['container_name'];
                    eventType = showEventAttackTagRequest['event_type'];
                    handleStatus = showEventAttackTagRequest['handle_status'];
                    severity = showEventAttackTagRequest['severity'];
                    severityList = showEventAttackTagRequest['severity_list'];
                    attackTag = showEventAttackTagRequest['attack_tag'];
                    assetValue = showEventAttackTagRequest['asset_value'];
                    tagList = showEventAttackTagRequest['tag_list'];
                    attCk = showEventAttackTagRequest['att_ck'];
                    eventName = showEventAttackTagRequest['event_name'];
                }
            }

        
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling showEventAttackTag.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (eventType !== null && eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (attackTag !== null && attackTag !== undefined) {
                localVarQueryParameter['attack_tag'] = attackTag;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (tagList !== null && tagList !== undefined) {
                localVarQueryParameter['tag_list'] = tagList;
            }
            if (attCk !== null && attCk !== undefined) {
                localVarQueryParameter['att_ck'] = attCk;
            }
            if (eventName !== null && eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单主机资产指纹采集状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showHostAssetManualCollectStatus(showHostAssetManualCollectStatusRequest?: ShowHostAssetManualCollectStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/manual-collect/{type}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let type;
            
            let hostId;
            
            let enterpriseProjectId;

            if (showHostAssetManualCollectStatusRequest !== null && showHostAssetManualCollectStatusRequest !== undefined) {
                if (showHostAssetManualCollectStatusRequest instanceof ShowHostAssetManualCollectStatusRequest) {
                    type = showHostAssetManualCollectStatusRequest.type;
                    hostId = showHostAssetManualCollectStatusRequest.hostId;
                    enterpriseProjectId = showHostAssetManualCollectStatusRequest.enterpriseProjectId;
                } else {
                    type = showHostAssetManualCollectStatusRequest['type'];
                    hostId = showHostAssetManualCollectStatusRequest['host_id'];
                    enterpriseProjectId = showHostAssetManualCollectStatusRequest['enterprise_project_id'];
                }
            }

        
            if (type === null || type === undefined) {
            throw new RequiredError('type','Required parameter type was null or undefined when calling showHostAssetManualCollectStatus.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showHostAssetManualCollectStatus.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'type': type, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-概览-资产状态-Agent状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showHostProtectionStatus(showHostProtectionStatusRequest?: ShowHostProtectionStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/overview/status/host/protection",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showHostProtectionStatusRequest !== null && showHostProtectionStatusRequest !== undefined) {
                if (showHostProtectionStatusRequest instanceof ShowHostProtectionStatusRequest) {
                    enterpriseProjectId = showHostProtectionStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showHostProtectionStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 容器资产-镜像统计
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showImageAssetStatistics(showImageAssetStatisticsRequest?: ShowImageAssetStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/asset/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showImageAssetStatisticsRequest !== null && showImageAssetStatisticsRequest !== undefined) {
                if (showImageAssetStatisticsRequest instanceof ShowImageAssetStatisticsRequest) {
                    enterpriseProjectId = showImageAssetStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showImageAssetStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像配置检查项检测报告
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showImageCheckRuleDetail(showImageCheckRuleDetailRequest?: ShowImageCheckRuleDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/baseline/check-rule/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageType;
            
            let checkName;
            
            let checkType;
            
            let checkRuleId;
            
            let standard;
            
            let region;
            
            let enterpriseProjectId;
            
            let namespace;
            
            let imageName;
            
            let imageVersion;
            
            let imageId;
            
            let instanceId;

            if (showImageCheckRuleDetailRequest !== null && showImageCheckRuleDetailRequest !== undefined) {
                if (showImageCheckRuleDetailRequest instanceof ShowImageCheckRuleDetailRequest) {
                    imageType = showImageCheckRuleDetailRequest.imageType;
                    checkName = showImageCheckRuleDetailRequest.checkName;
                    checkType = showImageCheckRuleDetailRequest.checkType;
                    checkRuleId = showImageCheckRuleDetailRequest.checkRuleId;
                    standard = showImageCheckRuleDetailRequest.standard;
                    region = showImageCheckRuleDetailRequest.region;
                    enterpriseProjectId = showImageCheckRuleDetailRequest.enterpriseProjectId;
                    namespace = showImageCheckRuleDetailRequest.namespace;
                    imageName = showImageCheckRuleDetailRequest.imageName;
                    imageVersion = showImageCheckRuleDetailRequest.imageVersion;
                    imageId = showImageCheckRuleDetailRequest.imageId;
                    instanceId = showImageCheckRuleDetailRequest.instanceId;
                } else {
                    imageType = showImageCheckRuleDetailRequest['image_type'];
                    checkName = showImageCheckRuleDetailRequest['check_name'];
                    checkType = showImageCheckRuleDetailRequest['check_type'];
                    checkRuleId = showImageCheckRuleDetailRequest['check_rule_id'];
                    standard = showImageCheckRuleDetailRequest['standard'];
                    region = showImageCheckRuleDetailRequest['region'];
                    enterpriseProjectId = showImageCheckRuleDetailRequest['enterprise_project_id'];
                    namespace = showImageCheckRuleDetailRequest['namespace'];
                    imageName = showImageCheckRuleDetailRequest['image_name'];
                    imageVersion = showImageCheckRuleDetailRequest['image_version'];
                    imageId = showImageCheckRuleDetailRequest['image_id'];
                    instanceId = showImageCheckRuleDetailRequest['instance_id'];
                }
            }

        
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling showImageCheckRuleDetail.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (checkName === null || checkName === undefined) {
                throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling showImageCheckRuleDetail.');
            }
            if (checkName !== null && checkName !== undefined) {
                localVarQueryParameter['check_name'] = checkName;
            }
            if (checkType === null || checkType === undefined) {
                throw new RequiredError('checkType','Required parameter checkType was null or undefined when calling showImageCheckRuleDetail.');
            }
            if (checkType !== null && checkType !== undefined) {
                localVarQueryParameter['check_type'] = checkType;
            }
            if (checkRuleId === null || checkRuleId === undefined) {
                throw new RequiredError('checkRuleId','Required parameter checkRuleId was null or undefined when calling showImageCheckRuleDetail.');
            }
            if (checkRuleId !== null && checkRuleId !== undefined) {
                localVarQueryParameter['check_rule_id'] = checkRuleId;
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling showImageCheckRuleDetail.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (imageVersion !== null && imageVersion !== undefined) {
                localVarQueryParameter['image_version'] = imageVersion;
            }
            if (imageId !== null && imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }
            if (instanceId !== null && instanceId !== undefined) {
                localVarQueryParameter['instance_id'] = instanceId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器详细信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showK8sContainerDetail(showK8sContainerDetailRequest?: ShowK8sContainerDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/container/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let containerId;
            
            let enterpriseProjectId;

            if (showK8sContainerDetailRequest !== null && showK8sContainerDetailRequest !== undefined) {
                if (showK8sContainerDetailRequest instanceof ShowK8sContainerDetailRequest) {
                    containerId = showK8sContainerDetailRequest.containerId;
                    enterpriseProjectId = showK8sContainerDetailRequest.enterpriseProjectId;
                } else {
                    containerId = showK8sContainerDetailRequest['container_id'];
                    enterpriseProjectId = showK8sContainerDetailRequest['enterprise_project_id'];
                }
            }

        
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling showK8sContainerDetail.');
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询pod详细信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showK8sPodDetail(showK8sPodDetailRequest?: ShowK8sPodDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/{pod_name}/pod/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let podName;
            
            let enterpriseProjectId;

            if (showK8sPodDetailRequest !== null && showK8sPodDetailRequest !== undefined) {
                if (showK8sPodDetailRequest instanceof ShowK8sPodDetailRequest) {
                    podName = showK8sPodDetailRequest.podName;
                    enterpriseProjectId = showK8sPodDetailRequest.enterpriseProjectId;
                } else {
                    podName = showK8sPodDetailRequest['pod_name'];
                    enterpriseProjectId = showK8sPodDetailRequest['enterprise_project_id'];
                }
            }

        
            if (podName === null || podName === undefined) {
            throw new RequiredError('podName','Required parameter podName was null or undefined when calling showK8sPodDetail.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'pod_name': podName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器Kubernetes端点详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showKubernetesEndpointInfo(showKubernetesEndpointInfoRequest?: ShowKubernetesEndpointInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/endpoint/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let id;
            
            let enterpriseProjectId;

            if (showKubernetesEndpointInfoRequest !== null && showKubernetesEndpointInfoRequest !== undefined) {
                if (showKubernetesEndpointInfoRequest instanceof ShowKubernetesEndpointInfoRequest) {
                    id = showKubernetesEndpointInfoRequest.id;
                    enterpriseProjectId = showKubernetesEndpointInfoRequest.enterpriseProjectId;
                } else {
                    id = showKubernetesEndpointInfoRequest['id'];
                    enterpriseProjectId = showKubernetesEndpointInfoRequest['enterprise_project_id'];
                }
            }

        
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showKubernetesEndpointInfo.');
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询容器Kubernetes服务详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showKubernetesServiceInfo(showKubernetesServiceInfoRequest?: ShowKubernetesServiceInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/kubernetes/service/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let id;
            
            let enterpriseProjectId;

            if (showKubernetesServiceInfoRequest !== null && showKubernetesServiceInfoRequest !== undefined) {
                if (showKubernetesServiceInfoRequest instanceof ShowKubernetesServiceInfoRequest) {
                    id = showKubernetesServiceInfoRequest.id;
                    enterpriseProjectId = showKubernetesServiceInfoRequest.enterpriseProjectId;
                } else {
                    id = showKubernetesServiceInfoRequest['id'];
                    enterpriseProjectId = showKubernetesServiceInfoRequest['enterprise_project_id'];
                }
            }

        
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showKubernetesServiceInfo.');
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询导出任务信息-按查询条件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showLatestExportTaskByType(showLatestExportTaskByTypeRequest?: ShowLatestExportTaskByTypeRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/export-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let taskId;
            
            let enterpriseProjectId;
            
            let exportTaskType;

            if (showLatestExportTaskByTypeRequest !== null && showLatestExportTaskByTypeRequest !== undefined) {
                if (showLatestExportTaskByTypeRequest instanceof ShowLatestExportTaskByTypeRequest) {
                    taskId = showLatestExportTaskByTypeRequest.taskId;
                    enterpriseProjectId = showLatestExportTaskByTypeRequest.enterpriseProjectId;
                    exportTaskType = showLatestExportTaskByTypeRequest.exportTaskType;
                } else {
                    taskId = showLatestExportTaskByTypeRequest['task_id'];
                    enterpriseProjectId = showLatestExportTaskByTypeRequest['enterprise_project_id'];
                    exportTaskType = showLatestExportTaskByTypeRequest['export_task_type'];
                }
            }

        
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling showLatestExportTaskByType.');
            }
            if (taskId !== null && taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (exportTaskType !== null && exportTaskType !== undefined) {
                localVarQueryParameter['export_task_type'] = exportTaskType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取提示信息配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showMalwareReminders(showMalwareRemindersRequest?: ShowMalwareRemindersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/malware/reminders",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showMalwareRemindersRequest !== null && showMalwareRemindersRequest !== undefined) {
                if (showMalwareRemindersRequest instanceof ShowMalwareRemindersRequest) {
                    enterpriseProjectId = showMalwareRemindersRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showMalwareRemindersRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 集群网络策略总览
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showNetworkStatistics(showNetworkStatisticsRequest?: ShowNetworkStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/network-statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showNetworkStatisticsRequest !== null && showNetworkStatisticsRequest !== undefined) {
                if (showNetworkStatisticsRequest instanceof ShowNetworkStatisticsRequest) {
                    enterpriseProjectId = showNetworkStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showNetworkStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-概览-资产状态-操作系统统计信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showOsStatisticsInfo(showOsStatisticsInfoRequest?: ShowOsStatisticsInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/overview/status/os",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showOsStatisticsInfoRequest !== null && showOsStatisticsInfoRequest !== undefined) {
                if (showOsStatisticsInfoRequest instanceof ShowOsStatisticsInfoRequest) {
                    enterpriseProjectId = showOsStatisticsInfoRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showOsStatisticsInfoRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取页面通知信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showPageNotices(showPageNoticesRequest?: ShowPageNoticesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/setting/page-notices",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let pageLocation;

            if (showPageNoticesRequest !== null && showPageNoticesRequest !== undefined) {
                if (showPageNoticesRequest instanceof ShowPageNoticesRequest) {
                    enterpriseProjectId = showPageNoticesRequest.enterpriseProjectId;
                    pageLocation = showPageNoticesRequest.pageLocation;
                } else {
                    enterpriseProjectId = showPageNoticesRequest['enterprise_project_id'];
                    pageLocation = showPageNoticesRequest['page_location'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (pageLocation !== null && pageLocation !== undefined) {
                localVarQueryParameter['page_location'] = pageLocation;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询指定策略的总开关
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showPolicySwitchStatus(showPolicySwitchStatusRequest?: ShowPolicySwitchStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/policy/switch",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let policyName;

            if (showPolicySwitchStatusRequest !== null && showPolicySwitchStatusRequest !== undefined) {
                if (showPolicySwitchStatusRequest instanceof ShowPolicySwitchStatusRequest) {
                    enterpriseProjectId = showPolicySwitchStatusRequest.enterpriseProjectId;
                    policyName = showPolicySwitchStatusRequest.policyName;
                } else {
                    enterpriseProjectId = showPolicySwitchStatusRequest['enterprise_project_id'];
                    policyName = showPolicySwitchStatusRequest['policy_name'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling showPolicySwitchStatus.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (policyName === null || policyName === undefined) {
                throw new RequiredError('policyName','Required parameter policyName was null or undefined when calling showPolicySwitchStatus.');
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询产商品信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showProductdataOfferingInfos(showProductdataOfferingInfosRequest?: ShowProductdataOfferingInfosRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/product/productdata/offering-infos",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let siteCode;

            if (showProductdataOfferingInfosRequest !== null && showProductdataOfferingInfosRequest !== undefined) {
                if (showProductdataOfferingInfosRequest instanceof ShowProductdataOfferingInfosRequest) {
                    region = showProductdataOfferingInfosRequest.region;
                    enterpriseProjectId = showProductdataOfferingInfosRequest.enterpriseProjectId;
                    siteCode = showProductdataOfferingInfosRequest.siteCode;
                } else {
                    region = showProductdataOfferingInfosRequest['region'];
                    enterpriseProjectId = showProductdataOfferingInfosRequest['enterprise_project_id'];
                    siteCode = showProductdataOfferingInfosRequest['site_code'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (siteCode !== null && siteCode !== undefined) {
                localVarQueryParameter['site_code'] = siteCode;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 资产管理-概览-资产状态-防护配额统计信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showQuotaStatisticsInfo(showQuotaStatisticsInfoRequest?: ShowQuotaStatisticsInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/asset/overview/status/quota",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showQuotaStatisticsInfoRequest !== null && showQuotaStatisticsInfoRequest !== undefined) {
                if (showQuotaStatisticsInfoRequest instanceof ShowQuotaStatisticsInfoRequest) {
                    enterpriseProjectId = showQuotaStatisticsInfoRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showQuotaStatisticsInfoRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询防护策略详情：查询防护策略配置的相关检测规则信息，包含14种检测规则
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRaspPolicyDetail(showRaspPolicyDetailRequest?: ShowRaspPolicyDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/policy/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let policyId;

            if (showRaspPolicyDetailRequest !== null && showRaspPolicyDetailRequest !== undefined) {
                if (showRaspPolicyDetailRequest instanceof ShowRaspPolicyDetailRequest) {
                    enterpriseProjectId = showRaspPolicyDetailRequest.enterpriseProjectId;
                    policyId = showRaspPolicyDetailRequest.policyId;
                } else {
                    enterpriseProjectId = showRaspPolicyDetailRequest['enterprise_project_id'];
                    policyId = showRaspPolicyDetailRequest['policy_id'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling showRaspPolicyDetail.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling showRaspPolicyDetail.');
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 防护数据统计：统计已添加防护服务器的数量以及近七天微服务RASP攻击数量
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRaspProtectStatistics(showRaspProtectStatisticsRequest?: ShowRaspProtectStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showRaspProtectStatisticsRequest !== null && showRaspProtectStatisticsRequest !== undefined) {
                if (showRaspProtectStatisticsRequest instanceof ShowRaspProtectStatisticsRequest) {
                    enterpriseProjectId = showRaspProtectStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showRaspProtectStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询防护服务器java应用详情：查询防护服务器的java应用状态列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRaspServerDetail(showRaspServerDetailRequest?: ShowRaspServerDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/rasp/servers/{host_id}/applications",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let limit;
            
            let offset;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let keyword;
            
            let appProtectStatus;

            if (showRaspServerDetailRequest !== null && showRaspServerDetailRequest !== undefined) {
                if (showRaspServerDetailRequest instanceof ShowRaspServerDetailRequest) {
                    limit = showRaspServerDetailRequest.limit;
                    offset = showRaspServerDetailRequest.offset;
                    hostId = showRaspServerDetailRequest.hostId;
                    enterpriseProjectId = showRaspServerDetailRequest.enterpriseProjectId;
                    keyword = showRaspServerDetailRequest.keyword;
                    appProtectStatus = showRaspServerDetailRequest.appProtectStatus;
                } else {
                    limit = showRaspServerDetailRequest['limit'];
                    offset = showRaspServerDetailRequest['offset'];
                    hostId = showRaspServerDetailRequest['host_id'];
                    enterpriseProjectId = showRaspServerDetailRequest['enterprise_project_id'];
                    keyword = showRaspServerDetailRequest['keyword'];
                    appProtectStatus = showRaspServerDetailRequest['app_protect_status'];
                }
            }

        
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling showRaspServerDetail.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling showRaspServerDetail.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showRaspServerDetail.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (keyword !== null && keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }
            if (appProtectStatus !== null && appProtectStatus !== undefined) {
                localVarQueryParameter['app_protect_status'] = appProtectStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询配额信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showResourceQuotas(showResourceQuotasRequest?: ShowResourceQuotasRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/billing/quotas",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let version;
            
            let chargingMode;

            if (showResourceQuotasRequest !== null && showResourceQuotasRequest !== undefined) {
                if (showResourceQuotasRequest instanceof ShowResourceQuotasRequest) {
                    enterpriseProjectId = showResourceQuotasRequest.enterpriseProjectId;
                    version = showResourceQuotasRequest.version;
                    chargingMode = showResourceQuotasRequest.chargingMode;
                } else {
                    enterpriseProjectId = showResourceQuotasRequest['enterprise_project_id'];
                    version = showResourceQuotasRequest['version'];
                    chargingMode = showResourceQuotasRequest['charging_mode'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (chargingMode !== null && chargingMode !== undefined) {
                localVarQueryParameter['charging_mode'] = chargingMode;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询指定安全配置项的检查结果
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRiskConfigDetail(showRiskConfigDetailRequest?: ShowRiskConfigDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/risk-config/{check_name}/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let checkName;
            
            let standard;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let limit;
            
            let offset;

            if (showRiskConfigDetailRequest !== null && showRiskConfigDetailRequest !== undefined) {
                if (showRiskConfigDetailRequest instanceof ShowRiskConfigDetailRequest) {
                    checkName = showRiskConfigDetailRequest.checkName;
                    standard = showRiskConfigDetailRequest.standard;
                    enterpriseProjectId = showRiskConfigDetailRequest.enterpriseProjectId;
                    hostId = showRiskConfigDetailRequest.hostId;
                    limit = showRiskConfigDetailRequest.limit;
                    offset = showRiskConfigDetailRequest.offset;
                } else {
                    checkName = showRiskConfigDetailRequest['check_name'];
                    standard = showRiskConfigDetailRequest['standard'];
                    enterpriseProjectId = showRiskConfigDetailRequest['enterprise_project_id'];
                    hostId = showRiskConfigDetailRequest['host_id'];
                    limit = showRiskConfigDetailRequest['limit'];
                    offset = showRiskConfigDetailRequest['offset'];
                }
            }

        
            if (checkName === null || checkName === undefined) {
            throw new RequiredError('checkName','Required parameter checkName was null or undefined when calling showRiskConfigDetail.');
            }
            if (standard === null || standard === undefined) {
                throw new RequiredError('standard','Required parameter standard was null or undefined when calling showRiskConfigDetail.');
            }
            if (standard !== null && standard !== undefined) {
                localVarQueryParameter['standard'] = standard;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'check_name': checkName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单个备份策略信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSingleBackupPolicyInfo(showSingleBackupPolicyInfoRequest?: ShowSingleBackupPolicyInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/backup/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (showSingleBackupPolicyInfoRequest !== null && showSingleBackupPolicyInfoRequest !== undefined) {
                if (showSingleBackupPolicyInfoRequest instanceof ShowSingleBackupPolicyInfoRequest) {
                    policyId = showSingleBackupPolicyInfoRequest.policyId;
                    enterpriseProjectId = showSingleBackupPolicyInfoRequest.enterpriseProjectId;
                } else {
                    policyId = showSingleBackupPolicyInfoRequest['policy_id'];
                    enterpriseProjectId = showSingleBackupPolicyInfoRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling showSingleBackupPolicyInfo.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞处理对应主机的备份相关统计信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVulBackupStatistics(showVulBackupStatisticsRequest?: ShowVulBackupStatisticsRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/backup-statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (showVulBackupStatisticsRequest !== null && showVulBackupStatisticsRequest !== undefined) {
                if (showVulBackupStatisticsRequest instanceof ShowVulBackupStatisticsRequest) {
                    body = showVulBackupStatisticsRequest.body
                    enterpriseProjectId = showVulBackupStatisticsRequest.enterpriseProjectId;
                } else {
                    body = showVulBackupStatisticsRequest['body'];
                    enterpriseProjectId = showVulBackupStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 在主机试图中导出漏洞报告详细报告pdf格式
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVulReportData(showVulReportDataRequest?: ShowVulReportDataRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/report/data",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (showVulReportDataRequest !== null && showVulReportDataRequest !== undefined) {
                if (showVulReportDataRequest instanceof ShowVulReportDataRequest) {
                    body = showVulReportDataRequest.body
                    enterpriseProjectId = showVulReportDataRequest.enterpriseProjectId;
                } else {
                    body = showVulReportDataRequest['body'];
                    enterpriseProjectId = showVulReportDataRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启或关闭程序自动隔离查杀
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        startAutoKillVirusStatus(startAutoKillVirusStatusRequest?: StartAutoKillVirusStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/setting/virus-kill",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (startAutoKillVirusStatusRequest !== null && startAutoKillVirusStatusRequest !== undefined) {
                if (startAutoKillVirusStatusRequest instanceof StartAutoKillVirusStatusRequest) {
                    body = startAutoKillVirusStatusRequest.body
                    enterpriseProjectId = startAutoKillVirusStatusRequest.enterpriseProjectId;
                } else {
                    body = startAutoKillVirusStatusRequest['body'];
                    enterpriseProjectId = startAutoKillVirusStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启勒索病毒防护，请保证该region有cbr云备份服务，勒索服务与云备份服务有关联关系
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        startProtection(startProtectionRequest?: StartProtectionRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/ransomware/protection/open",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (startProtectionRequest !== null && startProtectionRequest !== undefined) {
                if (startProtectionRequest instanceof StartProtectionRequest) {
                    body = startProtectionRequest.body
                    region = startProtectionRequest.region;
                    enterpriseProjectId = startProtectionRequest.enterpriseProjectId;
                } else {
                    body = startProtectionRequest['body'];
                    region = startProtectionRequest['region'];
                    enterpriseProjectId = startProtectionRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 关闭勒索病毒防护
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        stopProtection(stopProtectionRequest?: StopProtectionRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/ransomware/protection/close",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (stopProtectionRequest !== null && stopProtectionRequest !== undefined) {
                if (stopProtectionRequest instanceof StopProtectionRequest) {
                    body = stopProtectionRequest.body
                    region = stopProtectionRequest.region;
                    enterpriseProjectId = stopProtectionRequest.enterpriseProjectId;
                } else {
                    body = stopProtectionRequest['body'];
                    region = stopProtectionRequest['region'];
                    enterpriseProjectId = stopProtectionRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 操作集群防护模式
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchClusterProtectionMode(switchClusterProtectionModeRequest?: SwitchClusterProtectionModeRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/cluster-protect/switch-mod",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (switchClusterProtectionModeRequest !== null && switchClusterProtectionModeRequest !== undefined) {
                if (switchClusterProtectionModeRequest instanceof SwitchClusterProtectionModeRequest) {
                    enterpriseProjectId = switchClusterProtectionModeRequest.enterpriseProjectId;
                    body = switchClusterProtectionModeRequest.body
                } else {
                    enterpriseProjectId = switchClusterProtectionModeRequest['enterprise_project_id'];
                    body = switchClusterProtectionModeRequest['body'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 切换防护状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchContainerProtectStatus(switchContainerProtectStatusRequest?: SwitchContainerProtectStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/switch-version",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (switchContainerProtectStatusRequest !== null && switchContainerProtectStatusRequest !== undefined) {
                if (switchContainerProtectStatusRequest instanceof SwitchContainerProtectStatusRequest) {
                    body = switchContainerProtectStatusRequest.body
                    enterpriseProjectId = switchContainerProtectStatusRequest.enterpriseProjectId;
                } else {
                    body = switchContainerProtectStatusRequest['body'];
                    enterpriseProjectId = switchContainerProtectStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 切换主机动态端口蜜罐策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchDecoyPortHostPolicy(switchDecoyPortHostPolicyRequest?: SwitchDecoyPortHostPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/honeypot-port/host-policy/{policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let hostId;
            
            let enterpriseProjectId;

            if (switchDecoyPortHostPolicyRequest !== null && switchDecoyPortHostPolicyRequest !== undefined) {
                if (switchDecoyPortHostPolicyRequest instanceof SwitchDecoyPortHostPolicyRequest) {
                    policyId = switchDecoyPortHostPolicyRequest.policyId;
                    hostId = switchDecoyPortHostPolicyRequest.hostId;
                    enterpriseProjectId = switchDecoyPortHostPolicyRequest.enterpriseProjectId;
                } else {
                    policyId = switchDecoyPortHostPolicyRequest['policy_id'];
                    hostId = switchDecoyPortHostPolicyRequest['host_id'];
                    enterpriseProjectId = switchDecoyPortHostPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling switchDecoyPortHostPolicy.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling switchDecoyPortHostPolicy.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 切换防护状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchHostsProtectStatus(switchHostsProtectStatusRequest?: SwitchHostsProtectStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/host-management/protection",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (switchHostsProtectStatusRequest !== null && switchHostsProtectStatusRequest !== undefined) {
                if (switchHostsProtectStatusRequest instanceof SwitchHostsProtectStatusRequest) {
                    body = switchHostsProtectStatusRequest.body
                    region = switchHostsProtectStatusRequest.region;
                    enterpriseProjectId = switchHostsProtectStatusRequest.enterpriseProjectId;
                } else {
                    body = switchHostsProtectStatusRequest['body'];
                    region = switchHostsProtectStatusRequest['region'];
                    enterpriseProjectId = switchHostsProtectStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启/关闭应用防护，选择开启的防护策略，选择需要防护的服务器，下发防护策略，可传入端口号更新防护端口，关闭防护则清空策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchRasp(switchRaspRequest?: SwitchRaspRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/rasp/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (switchRaspRequest !== null && switchRaspRequest !== undefined) {
                if (switchRaspRequest instanceof SwitchRaspRequest) {
                    body = switchRaspRequest.body
                    enterpriseProjectId = switchRaspRequest.enterpriseProjectId;
                } else {
                    body = switchRaspRequest['body'];
                    enterpriseProjectId = switchRaspRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步容器集群最新数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncClusterList(syncClusterListRequest?: SyncClusterListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/cluster/sync",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (syncClusterListRequest !== null && syncClusterListRequest !== undefined) {
                if (syncClusterListRequest instanceof SyncClusterListRequest) {
                    enterpriseProjectId = syncClusterListRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = syncClusterListRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步集群防护事件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncClusterProtectionEvent(syncClusterProtectionEventRequest?: SyncClusterProtectionEventRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/clusters/protection-event-sync",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let clusterId;

            if (syncClusterProtectionEventRequest !== null && syncClusterProtectionEventRequest !== undefined) {
                if (syncClusterProtectionEventRequest instanceof SyncClusterProtectionEventRequest) {
                    enterpriseProjectId = syncClusterProtectionEventRequest.enterpriseProjectId;
                    clusterId = syncClusterProtectionEventRequest.clusterId;
                } else {
                    enterpriseProjectId = syncClusterProtectionEventRequest['enterprise_project_id'];
                    clusterId = syncClusterProtectionEventRequest['cluster_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步集群下容器网络策略最新数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncContainerNetworkNode(syncContainerNetworkNodeRequest?: SyncContainerNetworkNodeRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/node-sync",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (syncContainerNetworkNodeRequest !== null && syncContainerNetworkNodeRequest !== undefined) {
                if (syncContainerNetworkNodeRequest instanceof SyncContainerNetworkNodeRequest) {
                    clusterId = syncContainerNetworkNodeRequest.clusterId;
                    enterpriseProjectId = syncContainerNetworkNodeRequest.enterpriseProjectId;
                } else {
                    clusterId = syncContainerNetworkNodeRequest['cluster_id'];
                    enterpriseProjectId = syncContainerNetworkNodeRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling syncContainerNetworkNode.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步集群下容器网络策略最新数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncContainerNetworkPolicyList(syncContainerNetworkPolicyListRequest?: SyncContainerNetworkPolicyListRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/policy-sync",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (syncContainerNetworkPolicyListRequest !== null && syncContainerNetworkPolicyListRequest !== undefined) {
                if (syncContainerNetworkPolicyListRequest instanceof SyncContainerNetworkPolicyListRequest) {
                    clusterId = syncContainerNetworkPolicyListRequest.clusterId;
                    enterpriseProjectId = syncContainerNetworkPolicyListRequest.enterpriseProjectId;
                } else {
                    clusterId = syncContainerNetworkPolicyListRequest['cluster_id'];
                    enterpriseProjectId = syncContainerNetworkPolicyListRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling syncContainerNetworkPolicyList.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步集群下安全组策略最新数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncSecurityGroupPolicies(syncSecurityGroupPoliciesRequest?: SyncSecurityGroupPoliciesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container-network/{cluster_id}/security-group-policy-sync",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (syncSecurityGroupPoliciesRequest !== null && syncSecurityGroupPoliciesRequest !== undefined) {
                if (syncSecurityGroupPoliciesRequest instanceof SyncSecurityGroupPoliciesRequest) {
                    clusterId = syncSecurityGroupPoliciesRequest.clusterId;
                    enterpriseProjectId = syncSecurityGroupPoliciesRequest.enterpriseProjectId;
                } else {
                    clusterId = syncSecurityGroupPoliciesRequest['cluster_id'];
                    enterpriseProjectId = syncSecurityGroupPoliciesRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling syncSecurityGroupPolicies.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改存储库绑定的备份策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateBackupPolicyInfo(updateBackupPolicyInfoRequest?: UpdateBackupPolicyInfoRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/backup/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (updateBackupPolicyInfoRequest !== null && updateBackupPolicyInfoRequest !== undefined) {
                if (updateBackupPolicyInfoRequest instanceof UpdateBackupPolicyInfoRequest) {
                    body = updateBackupPolicyInfoRequest.body
                    region = updateBackupPolicyInfoRequest.region;
                    enterpriseProjectId = updateBackupPolicyInfoRequest.enterpriseProjectId;
                } else {
                    body = updateBackupPolicyInfoRequest['body'];
                    region = updateBackupPolicyInfoRequest['region'];
                    enterpriseProjectId = updateBackupPolicyInfoRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 容器集群网络更新配置策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateContainerNetworkPolicy(updateContainerNetworkPolicyRequest?: UpdateContainerNetworkPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/container-network/{cluster_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (updateContainerNetworkPolicyRequest !== null && updateContainerNetworkPolicyRequest !== undefined) {
                if (updateContainerNetworkPolicyRequest instanceof UpdateContainerNetworkPolicyRequest) {
                    clusterId = updateContainerNetworkPolicyRequest.clusterId;
                    body = updateContainerNetworkPolicyRequest.body
                    enterpriseProjectId = updateContainerNetworkPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = updateContainerNetworkPolicyRequest['cluster_id'];
                    body = updateContainerNetworkPolicyRequest['body'];
                    enterpriseProjectId = updateContainerNetworkPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling updateContainerNetworkPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改防护策略：修改防护策略内容，包含策略名称、相关规则开启状态、防护动作以及检测规则配置，同时给使用该策略的服务器下发新的策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updatePolicy(updatePolicyRequest?: UpdatePolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/rasp/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let policyName;
            
            let enterpriseProjectId;

            if (updatePolicyRequest !== null && updatePolicyRequest !== undefined) {
                if (updatePolicyRequest instanceof UpdatePolicyRequest) {
                    policyId = updatePolicyRequest.policyId;
                    policyName = updatePolicyRequest.policyName;
                    body = updatePolicyRequest.body
                    enterpriseProjectId = updatePolicyRequest.enterpriseProjectId;
                } else {
                    policyId = updatePolicyRequest['policy_id'];
                    policyName = updatePolicyRequest['policy_name'];
                    body = updatePolicyRequest['body'];
                    enterpriseProjectId = updatePolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling updatePolicy.');
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (policyName === null || policyName === undefined) {
                throw new RequiredError('policyName','Required parameter policyName was null or undefined when calling updatePolicy.');
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改勒索防护策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateProtectionPolicy(updateProtectionPolicyRequest?: UpdateProtectionPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/ransomware/protection/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (updateProtectionPolicyRequest !== null && updateProtectionPolicyRequest !== undefined) {
                if (updateProtectionPolicyRequest instanceof UpdateProtectionPolicyRequest) {
                    body = updateProtectionPolicyRequest.body
                    region = updateProtectionPolicyRequest.region;
                    enterpriseProjectId = updateProtectionPolicyRequest.enterpriseProjectId;
                } else {
                    body = updateProtectionPolicyRequest['body'];
                    region = updateProtectionPolicyRequest['region'];
                    enterpriseProjectId = updateProtectionPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 更新安全组策略(云原生网络模型)
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateSecurityGroupPolicy(updateSecurityGroupPolicyRequest?: UpdateSecurityGroupPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/container-network/{cluster_id}/{namespace}/security-group-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let namespace;
            
            let enterpriseProjectId;

            if (updateSecurityGroupPolicyRequest !== null && updateSecurityGroupPolicyRequest !== undefined) {
                if (updateSecurityGroupPolicyRequest instanceof UpdateSecurityGroupPolicyRequest) {
                    clusterId = updateSecurityGroupPolicyRequest.clusterId;
                    namespace = updateSecurityGroupPolicyRequest.namespace;
                    body = updateSecurityGroupPolicyRequest.body
                    enterpriseProjectId = updateSecurityGroupPolicyRequest.enterpriseProjectId;
                } else {
                    clusterId = updateSecurityGroupPolicyRequest['cluster_id'];
                    namespace = updateSecurityGroupPolicyRequest['namespace'];
                    body = updateSecurityGroupPolicyRequest['body'];
                    enterpriseProjectId = updateSecurityGroupPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling updateSecurityGroupPolicy.');
            }
            if (namespace === null || namespace === undefined) {
            throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling updateSecurityGroupPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId,'namespace': namespace, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改系统用户白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateSystemUserWhiteList(updateSystemUserWhiteListRequest?: UpdateSystemUserWhiteListRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/event/white-list/userlist",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (updateSystemUserWhiteListRequest !== null && updateSystemUserWhiteListRequest !== undefined) {
                if (updateSystemUserWhiteListRequest instanceof UpdateSystemUserWhiteListRequest) {
                    body = updateSystemUserWhiteListRequest.body
                    enterpriseProjectId = updateSystemUserWhiteListRequest.enterpriseProjectId;
                } else {
                    body = updateSystemUserWhiteListRequest['body'];
                    enterpriseProjectId = updateSystemUserWhiteListRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改“病毒查杀按次计费”开关状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAntivirusPayPerScanStatus(changeAntivirusPayPerScanStatusRequest?: ChangeAntivirusPayPerScanStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/antivirus/pay-per-scan",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeAntivirusPayPerScanStatusRequest !== null && changeAntivirusPayPerScanStatusRequest !== undefined) {
                if (changeAntivirusPayPerScanStatusRequest instanceof ChangeAntivirusPayPerScanStatusRequest) {
                    body = changeAntivirusPayPerScanStatusRequest.body
                    enterpriseProjectId = changeAntivirusPayPerScanStatusRequest.enterpriseProjectId;
                } else {
                    body = changeAntivirusPayPerScanStatusRequest['body'];
                    enterpriseProjectId = changeAntivirusPayPerScanStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 编辑自定义查杀策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAntivirusPolicy(changeAntivirusPolicyRequest?: ChangeAntivirusPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/antivirus/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeAntivirusPolicyRequest !== null && changeAntivirusPolicyRequest !== undefined) {
                if (changeAntivirusPolicyRequest instanceof ChangeAntivirusPolicyRequest) {
                    body = changeAntivirusPolicyRequest.body
                    enterpriseProjectId = changeAntivirusPolicyRequest.enterpriseProjectId;
                } else {
                    body = changeAntivirusPolicyRequest['body'];
                    enterpriseProjectId = changeAntivirusPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建付费病毒扫描任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAntiVirusPaidTask(createAntiVirusPaidTaskRequest?: CreateAntiVirusPaidTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/pay-per-scan/tasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (createAntiVirusPaidTaskRequest !== null && createAntiVirusPaidTaskRequest !== undefined) {
                if (createAntiVirusPaidTaskRequest instanceof CreateAntiVirusPaidTaskRequest) {
                    body = createAntiVirusPaidTaskRequest.body
                    region = createAntiVirusPaidTaskRequest.region;
                    enterpriseProjectId = createAntiVirusPaidTaskRequest.enterpriseProjectId;
                } else {
                    body = createAntiVirusPaidTaskRequest['body'];
                    region = createAntiVirusPaidTaskRequest['region'];
                    enterpriseProjectId = createAntiVirusPaidTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建自定义查杀策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAntiVirusPolicy(createAntiVirusPolicyRequest?: CreateAntiVirusPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createAntiVirusPolicyRequest !== null && createAntiVirusPolicyRequest !== undefined) {
                if (createAntiVirusPolicyRequest instanceof CreateAntiVirusPolicyRequest) {
                    body = createAntiVirusPolicyRequest.body
                    enterpriseProjectId = createAntiVirusPolicyRequest.enterpriseProjectId;
                } else {
                    body = createAntiVirusPolicyRequest['body'];
                    enterpriseProjectId = createAntiVirusPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建病毒扫描任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAntiVirusTask(createAntiVirusTaskRequest?: CreateAntiVirusTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (createAntiVirusTaskRequest !== null && createAntiVirusTaskRequest !== undefined) {
                if (createAntiVirusTaskRequest instanceof CreateAntiVirusTaskRequest) {
                    body = createAntiVirusTaskRequest.body
                    region = createAntiVirusTaskRequest.region;
                    enterpriseProjectId = createAntiVirusTaskRequest.enterpriseProjectId;
                } else {
                    body = createAntiVirusTaskRequest['body'];
                    region = createAntiVirusTaskRequest['region'];
                    enterpriseProjectId = createAntiVirusTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除自定义查杀策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteAntivirusPolicy(deleteAntivirusPolicyRequest?: DeleteAntivirusPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/policy/batch-delete",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteAntivirusPolicyRequest !== null && deleteAntivirusPolicyRequest !== undefined) {
                if (deleteAntivirusPolicyRequest instanceof DeleteAntivirusPolicyRequest) {
                    body = deleteAntivirusPolicyRequest.body
                    enterpriseProjectId = deleteAntivirusPolicyRequest.enterpriseProjectId;
                } else {
                    body = deleteAntivirusPolicyRequest['body'];
                    enterpriseProjectId = deleteAntivirusPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 导出病毒扫描结果列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportAntiVirusResult(exportAntiVirusResultRequest?: ExportAntiVirusResultRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/result/export",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let handleStatus;
            
            let severityList;
            
            let assetValue;
            
            let malwareName;
            
            let filePath;
            
            let exportSize;
            
            let fileHash;
            
            let taskName;
            
            let manualIsolate;

            if (exportAntiVirusResultRequest !== null && exportAntiVirusResultRequest !== undefined) {
                if (exportAntiVirusResultRequest instanceof ExportAntiVirusResultRequest) {
                    offset = exportAntiVirusResultRequest.offset;
                    limit = exportAntiVirusResultRequest.limit;
                    body = exportAntiVirusResultRequest.body
                    enterpriseProjectId = exportAntiVirusResultRequest.enterpriseProjectId;
                    hostName = exportAntiVirusResultRequest.hostName;
                    privateIp = exportAntiVirusResultRequest.privateIp;
                    publicIp = exportAntiVirusResultRequest.publicIp;
                    handleStatus = exportAntiVirusResultRequest.handleStatus;
                    severityList = exportAntiVirusResultRequest.severityList;
                    assetValue = exportAntiVirusResultRequest.assetValue;
                    malwareName = exportAntiVirusResultRequest.malwareName;
                    filePath = exportAntiVirusResultRequest.filePath;
                    exportSize = exportAntiVirusResultRequest.exportSize;
                    fileHash = exportAntiVirusResultRequest.fileHash;
                    taskName = exportAntiVirusResultRequest.taskName;
                    manualIsolate = exportAntiVirusResultRequest.manualIsolate;
                } else {
                    offset = exportAntiVirusResultRequest['offset'];
                    limit = exportAntiVirusResultRequest['limit'];
                    body = exportAntiVirusResultRequest['body'];
                    enterpriseProjectId = exportAntiVirusResultRequest['enterprise_project_id'];
                    hostName = exportAntiVirusResultRequest['host_name'];
                    privateIp = exportAntiVirusResultRequest['private_ip'];
                    publicIp = exportAntiVirusResultRequest['public_ip'];
                    handleStatus = exportAntiVirusResultRequest['handle_status'];
                    severityList = exportAntiVirusResultRequest['severity_list'];
                    assetValue = exportAntiVirusResultRequest['asset_value'];
                    malwareName = exportAntiVirusResultRequest['malware_name'];
                    filePath = exportAntiVirusResultRequest['file_path'];
                    exportSize = exportAntiVirusResultRequest['export_size'];
                    fileHash = exportAntiVirusResultRequest['file_hash'];
                    taskName = exportAntiVirusResultRequest['task_name'];
                    manualIsolate = exportAntiVirusResultRequest['manual_isolate'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling exportAntiVirusResult.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling exportAntiVirusResult.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (malwareName !== null && malwareName !== undefined) {
                localVarQueryParameter['malware_name'] = malwareName;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (exportSize !== null && exportSize !== undefined) {
                localVarQueryParameter['export_size'] = exportSize;
            }
            if (fileHash !== null && fileHash !== undefined) {
                localVarQueryParameter['file_hash'] = fileHash;
            }
            if (taskName !== null && taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }
            if (manualIsolate !== null && manualIsolate !== undefined) {
                localVarQueryParameter['manual_isolate'] = manualIsolate;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 处置病毒扫描结果
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        handleAntiVirusResult(handleAntiVirusResultRequest?: HandleAntiVirusResultRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/antivirus/result/operate",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (handleAntiVirusResultRequest !== null && handleAntiVirusResultRequest !== undefined) {
                if (handleAntiVirusResultRequest instanceof HandleAntiVirusResultRequest) {
                    body = handleAntiVirusResultRequest.body
                    enterpriseProjectId = handleAntiVirusResultRequest.enterpriseProjectId;
                } else {
                    body = handleAntiVirusResultRequest['body'];
                    enterpriseProjectId = handleAntiVirusResultRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询病毒查杀可选服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntiVirusHost(listAntiVirusHostRequest?: ListAntiVirusHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/host-management/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let scanType;
            
            let startType;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let groupId;
            
            let policyId;
            
            let nextStartTime;

            if (listAntiVirusHostRequest !== null && listAntiVirusHostRequest !== undefined) {
                if (listAntiVirusHostRequest instanceof ListAntiVirusHostRequest) {
                    offset = listAntiVirusHostRequest.offset;
                    limit = listAntiVirusHostRequest.limit;
                    scanType = listAntiVirusHostRequest.scanType;
                    startType = listAntiVirusHostRequest.startType;
                    enterpriseProjectId = listAntiVirusHostRequest.enterpriseProjectId;
                    hostId = listAntiVirusHostRequest.hostId;
                    hostName = listAntiVirusHostRequest.hostName;
                    privateIp = listAntiVirusHostRequest.privateIp;
                    publicIp = listAntiVirusHostRequest.publicIp;
                    groupId = listAntiVirusHostRequest.groupId;
                    policyId = listAntiVirusHostRequest.policyId;
                    nextStartTime = listAntiVirusHostRequest.nextStartTime;
                } else {
                    offset = listAntiVirusHostRequest['offset'];
                    limit = listAntiVirusHostRequest['limit'];
                    scanType = listAntiVirusHostRequest['scan_type'];
                    startType = listAntiVirusHostRequest['start_type'];
                    enterpriseProjectId = listAntiVirusHostRequest['enterprise_project_id'];
                    hostId = listAntiVirusHostRequest['host_id'];
                    hostName = listAntiVirusHostRequest['host_name'];
                    privateIp = listAntiVirusHostRequest['private_ip'];
                    publicIp = listAntiVirusHostRequest['public_ip'];
                    groupId = listAntiVirusHostRequest['group_id'];
                    policyId = listAntiVirusHostRequest['policy_id'];
                    nextStartTime = listAntiVirusHostRequest['next_start_time'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAntiVirusHost.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAntiVirusHost.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (scanType === null || scanType === undefined) {
                throw new RequiredError('scanType','Required parameter scanType was null or undefined when calling listAntiVirusHost.');
            }
            if (scanType !== null && scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }
            if (startType === null || startType === undefined) {
                throw new RequiredError('startType','Required parameter startType was null or undefined when calling listAntiVirusHost.');
            }
            if (startType !== null && startType !== undefined) {
                localVarQueryParameter['start_type'] = startType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (nextStartTime !== null && nextStartTime !== undefined) {
                localVarQueryParameter['next_start_time'] = nextStartTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询付费病毒查杀服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntiVirusPaidHosts(listAntiVirusPaidHostsRequest?: ListAntiVirusPaidHostsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/pay-per-scan/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let scanType;
            
            let startType;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let groupId;

            if (listAntiVirusPaidHostsRequest !== null && listAntiVirusPaidHostsRequest !== undefined) {
                if (listAntiVirusPaidHostsRequest instanceof ListAntiVirusPaidHostsRequest) {
                    scanType = listAntiVirusPaidHostsRequest.scanType;
                    startType = listAntiVirusPaidHostsRequest.startType;
                    enterpriseProjectId = listAntiVirusPaidHostsRequest.enterpriseProjectId;
                    offset = listAntiVirusPaidHostsRequest.offset;
                    limit = listAntiVirusPaidHostsRequest.limit;
                    hostId = listAntiVirusPaidHostsRequest.hostId;
                    hostName = listAntiVirusPaidHostsRequest.hostName;
                    privateIp = listAntiVirusPaidHostsRequest.privateIp;
                    publicIp = listAntiVirusPaidHostsRequest.publicIp;
                    groupId = listAntiVirusPaidHostsRequest.groupId;
                } else {
                    scanType = listAntiVirusPaidHostsRequest['scan_type'];
                    startType = listAntiVirusPaidHostsRequest['start_type'];
                    enterpriseProjectId = listAntiVirusPaidHostsRequest['enterprise_project_id'];
                    offset = listAntiVirusPaidHostsRequest['offset'];
                    limit = listAntiVirusPaidHostsRequest['limit'];
                    hostId = listAntiVirusPaidHostsRequest['host_id'];
                    hostName = listAntiVirusPaidHostsRequest['host_name'];
                    privateIp = listAntiVirusPaidHostsRequest['private_ip'];
                    publicIp = listAntiVirusPaidHostsRequest['public_ip'];
                    groupId = listAntiVirusPaidHostsRequest['group_id'];
                }
            }

        
            if (scanType === null || scanType === undefined) {
                throw new RequiredError('scanType','Required parameter scanType was null or undefined when calling listAntiVirusPaidHosts.');
            }
            if (scanType !== null && scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }
            if (startType === null || startType === undefined) {
                throw new RequiredError('startType','Required parameter startType was null or undefined when calling listAntiVirusPaidHosts.');
            }
            if (startType !== null && startType !== undefined) {
                localVarQueryParameter['start_type'] = startType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询自定义查杀策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntiVirusPolicy(listAntiVirusPolicyRequest?: ListAntiVirusPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let policyName;

            if (listAntiVirusPolicyRequest !== null && listAntiVirusPolicyRequest !== undefined) {
                if (listAntiVirusPolicyRequest instanceof ListAntiVirusPolicyRequest) {
                    offset = listAntiVirusPolicyRequest.offset;
                    limit = listAntiVirusPolicyRequest.limit;
                    enterpriseProjectId = listAntiVirusPolicyRequest.enterpriseProjectId;
                    policyName = listAntiVirusPolicyRequest.policyName;
                } else {
                    offset = listAntiVirusPolicyRequest['offset'];
                    limit = listAntiVirusPolicyRequest['limit'];
                    enterpriseProjectId = listAntiVirusPolicyRequest['enterprise_project_id'];
                    policyName = listAntiVirusPolicyRequest['policy_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAntiVirusPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAntiVirusPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询病毒扫描结果列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntiVirusResult(listAntiVirusResultRequest?: ListAntiVirusResultRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/result",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let handleStatus;
            
            let severityList;
            
            let assetValue;
            
            let malwareName;
            
            let filePath;
            
            let fileHash;
            
            let taskName;
            
            let manualIsolate;

            if (listAntiVirusResultRequest !== null && listAntiVirusResultRequest !== undefined) {
                if (listAntiVirusResultRequest instanceof ListAntiVirusResultRequest) {
                    offset = listAntiVirusResultRequest.offset;
                    limit = listAntiVirusResultRequest.limit;
                    enterpriseProjectId = listAntiVirusResultRequest.enterpriseProjectId;
                    hostName = listAntiVirusResultRequest.hostName;
                    privateIp = listAntiVirusResultRequest.privateIp;
                    publicIp = listAntiVirusResultRequest.publicIp;
                    handleStatus = listAntiVirusResultRequest.handleStatus;
                    severityList = listAntiVirusResultRequest.severityList;
                    assetValue = listAntiVirusResultRequest.assetValue;
                    malwareName = listAntiVirusResultRequest.malwareName;
                    filePath = listAntiVirusResultRequest.filePath;
                    fileHash = listAntiVirusResultRequest.fileHash;
                    taskName = listAntiVirusResultRequest.taskName;
                    manualIsolate = listAntiVirusResultRequest.manualIsolate;
                } else {
                    offset = listAntiVirusResultRequest['offset'];
                    limit = listAntiVirusResultRequest['limit'];
                    enterpriseProjectId = listAntiVirusResultRequest['enterprise_project_id'];
                    hostName = listAntiVirusResultRequest['host_name'];
                    privateIp = listAntiVirusResultRequest['private_ip'];
                    publicIp = listAntiVirusResultRequest['public_ip'];
                    handleStatus = listAntiVirusResultRequest['handle_status'];
                    severityList = listAntiVirusResultRequest['severity_list'];
                    assetValue = listAntiVirusResultRequest['asset_value'];
                    malwareName = listAntiVirusResultRequest['malware_name'];
                    filePath = listAntiVirusResultRequest['file_path'];
                    fileHash = listAntiVirusResultRequest['file_hash'];
                    taskName = listAntiVirusResultRequest['task_name'];
                    manualIsolate = listAntiVirusResultRequest['manual_isolate'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAntiVirusResult.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAntiVirusResult.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severityList !== null && severityList !== undefined) {
                localVarQueryParameter['severity_list'] = severityList;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (malwareName !== null && malwareName !== undefined) {
                localVarQueryParameter['malware_name'] = malwareName;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (fileHash !== null && fileHash !== undefined) {
                localVarQueryParameter['file_hash'] = fileHash;
            }
            if (taskName !== null && taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }
            if (manualIsolate !== null && manualIsolate !== undefined) {
                localVarQueryParameter['manual_isolate'] = manualIsolate;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看病毒扫描任务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAntiVirusTask(listAntiVirusTaskRequest?: ListAntiVirusTaskRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let whetherPaidTask;
            
            let enterpriseProjectId;
            
            let taskName;
            
            let lastDays;
            
            let beginTime;
            
            let endTime;
            
            let taskStatus;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let hostTaskStatus;

            if (listAntiVirusTaskRequest !== null && listAntiVirusTaskRequest !== undefined) {
                if (listAntiVirusTaskRequest instanceof ListAntiVirusTaskRequest) {
                    offset = listAntiVirusTaskRequest.offset;
                    limit = listAntiVirusTaskRequest.limit;
                    whetherPaidTask = listAntiVirusTaskRequest.whetherPaidTask;
                    enterpriseProjectId = listAntiVirusTaskRequest.enterpriseProjectId;
                    taskName = listAntiVirusTaskRequest.taskName;
                    lastDays = listAntiVirusTaskRequest.lastDays;
                    beginTime = listAntiVirusTaskRequest.beginTime;
                    endTime = listAntiVirusTaskRequest.endTime;
                    taskStatus = listAntiVirusTaskRequest.taskStatus;
                    hostName = listAntiVirusTaskRequest.hostName;
                    privateIp = listAntiVirusTaskRequest.privateIp;
                    publicIp = listAntiVirusTaskRequest.publicIp;
                    hostTaskStatus = listAntiVirusTaskRequest.hostTaskStatus;
                } else {
                    offset = listAntiVirusTaskRequest['offset'];
                    limit = listAntiVirusTaskRequest['limit'];
                    whetherPaidTask = listAntiVirusTaskRequest['whether_paid_task'];
                    enterpriseProjectId = listAntiVirusTaskRequest['enterprise_project_id'];
                    taskName = listAntiVirusTaskRequest['task_name'];
                    lastDays = listAntiVirusTaskRequest['last_days'];
                    beginTime = listAntiVirusTaskRequest['begin_time'];
                    endTime = listAntiVirusTaskRequest['end_time'];
                    taskStatus = listAntiVirusTaskRequest['task_status'];
                    hostName = listAntiVirusTaskRequest['host_name'];
                    privateIp = listAntiVirusTaskRequest['private_ip'];
                    publicIp = listAntiVirusTaskRequest['public_ip'];
                    hostTaskStatus = listAntiVirusTaskRequest['host_task_status'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAntiVirusTask.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAntiVirusTask.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (whetherPaidTask === null || whetherPaidTask === undefined) {
                throw new RequiredError('whetherPaidTask','Required parameter whetherPaidTask was null or undefined when calling listAntiVirusTask.');
            }
            if (whetherPaidTask !== null && whetherPaidTask !== undefined) {
                localVarQueryParameter['whether_paid_task'] = whetherPaidTask;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (taskName !== null && taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (taskStatus !== null && taskStatus !== undefined) {
                localVarQueryParameter['task_status'] = taskStatus;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (hostTaskStatus !== null && hostTaskStatus !== undefined) {
                localVarQueryParameter['host_task_status'] = hostTaskStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询病毒查杀免费扫描次数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAntivirusFreeQuota(showAntivirusFreeQuotaRequest?: ShowAntivirusFreeQuotaRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/pay-per-scan/free-quotas",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAntivirusFreeQuotaRequest !== null && showAntivirusFreeQuotaRequest !== undefined) {
                if (showAntivirusFreeQuotaRequest instanceof ShowAntivirusFreeQuotaRequest) {
                    enterpriseProjectId = showAntivirusFreeQuotaRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAntivirusFreeQuotaRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询“病毒查杀按次计费”开关状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAntivirusPayPerScanStatus(showAntivirusPayPerScanStatusRequest?: ShowAntivirusPayPerScanStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/pay-per-scan",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAntivirusPayPerScanStatusRequest !== null && showAntivirusPayPerScanStatusRequest !== undefined) {
                if (showAntivirusPayPerScanStatusRequest instanceof ShowAntivirusPayPerScanStatusRequest) {
                    enterpriseProjectId = showAntivirusPayPerScanStatusRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAntivirusPayPerScanStatusRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询病毒查杀统计信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAntivirusStatistic(showAntivirusStatisticRequest?: ShowAntivirusStatisticRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/antivirus/statistic",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAntivirusStatisticRequest !== null && showAntivirusStatisticRequest !== undefined) {
                if (showAntivirusStatisticRequest instanceof ShowAntivirusStatisticRequest) {
                    enterpriseProjectId = showAntivirusStatisticRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAntivirusStatisticRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 取消扫描任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchAntivirusTask(switchAntivirusTaskRequest?: SwitchAntivirusTaskRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/antivirus/task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (switchAntivirusTaskRequest !== null && switchAntivirusTaskRequest !== undefined) {
                if (switchAntivirusTaskRequest instanceof SwitchAntivirusTaskRequest) {
                    body = switchAntivirusTaskRequest.body
                    enterpriseProjectId = switchAntivirusTaskRequest.enterpriseProjectId;
                } else {
                    body = switchAntivirusTaskRequest['body'];
                    enterpriseProjectId = switchAntivirusTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 白名单策略添加主机
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addAppWhitelistPolicyHost(addAppWhitelistPolicyHostRequest?: AddAppWhitelistPolicyHostRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/app/{policy_id}/host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (addAppWhitelistPolicyHostRequest !== null && addAppWhitelistPolicyHostRequest !== undefined) {
                if (addAppWhitelistPolicyHostRequest instanceof AddAppWhitelistPolicyHostRequest) {
                    policyId = addAppWhitelistPolicyHostRequest.policyId;
                    body = addAppWhitelistPolicyHostRequest.body
                    enterpriseProjectId = addAppWhitelistPolicyHostRequest.enterpriseProjectId;
                } else {
                    policyId = addAppWhitelistPolicyHostRequest['policy_id'];
                    body = addAppWhitelistPolicyHostRequest['body'];
                    enterpriseProjectId = addAppWhitelistPolicyHostRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling addAppWhitelistPolicyHost.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 新增进程白名单策略进程
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addAppWhitelistPolicyProcess(addAppWhitelistPolicyProcessRequest?: AddAppWhitelistPolicyProcessRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/app/{policy_id}/process",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let hostId;
            
            let enterpriseProjectId;

            if (addAppWhitelistPolicyProcessRequest !== null && addAppWhitelistPolicyProcessRequest !== undefined) {
                if (addAppWhitelistPolicyProcessRequest instanceof AddAppWhitelistPolicyProcessRequest) {
                    policyId = addAppWhitelistPolicyProcessRequest.policyId;
                    hostId = addAppWhitelistPolicyProcessRequest.hostId;
                    body = addAppWhitelistPolicyProcessRequest.body
                    enterpriseProjectId = addAppWhitelistPolicyProcessRequest.enterpriseProjectId;
                } else {
                    policyId = addAppWhitelistPolicyProcessRequest['policy_id'];
                    hostId = addAppWhitelistPolicyProcessRequest['host_id'];
                    body = addAppWhitelistPolicyProcessRequest['body'];
                    enterpriseProjectId = addAppWhitelistPolicyProcessRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling addAppWhitelistPolicyProcess.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling addAppWhitelistPolicyProcess.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改白名单策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAppWhitelistPolicy(changeAppWhitelistPolicyRequest?: ChangeAppWhitelistPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/app/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeAppWhitelistPolicyRequest !== null && changeAppWhitelistPolicyRequest !== undefined) {
                if (changeAppWhitelistPolicyRequest instanceof ChangeAppWhitelistPolicyRequest) {
                    enterpriseProjectId = changeAppWhitelistPolicyRequest.enterpriseProjectId;
                    body = changeAppWhitelistPolicyRequest.body
                } else {
                    enterpriseProjectId = changeAppWhitelistPolicyRequest['enterprise_project_id'];
                    body = changeAppWhitelistPolicyRequest['body'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling changeAppWhitelistPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 标记进程白名单策略识别进程
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeAppWhitelistPolicyProcessStatus(changeAppWhitelistPolicyProcessStatusRequest?: ChangeAppWhitelistPolicyProcessStatusRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/app/{policy_id}/process",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (changeAppWhitelistPolicyProcessStatusRequest !== null && changeAppWhitelistPolicyProcessStatusRequest !== undefined) {
                if (changeAppWhitelistPolicyProcessStatusRequest instanceof ChangeAppWhitelistPolicyProcessStatusRequest) {
                    policyId = changeAppWhitelistPolicyProcessStatusRequest.policyId;
                    body = changeAppWhitelistPolicyProcessStatusRequest.body
                    enterpriseProjectId = changeAppWhitelistPolicyProcessStatusRequest.enterpriseProjectId;
                } else {
                    policyId = changeAppWhitelistPolicyProcessStatusRequest['policy_id'];
                    body = changeAppWhitelistPolicyProcessStatusRequest['body'];
                    enterpriseProjectId = changeAppWhitelistPolicyProcessStatusRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling changeAppWhitelistPolicyProcessStatus.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建白名单策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAppWhitelistPolicy(createAppWhitelistPolicyRequest?: CreateAppWhitelistPolicyRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/app/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createAppWhitelistPolicyRequest !== null && createAppWhitelistPolicyRequest !== undefined) {
                if (createAppWhitelistPolicyRequest instanceof CreateAppWhitelistPolicyRequest) {
                    body = createAppWhitelistPolicyRequest.body
                    enterpriseProjectId = createAppWhitelistPolicyRequest.enterpriseProjectId;
                } else {
                    body = createAppWhitelistPolicyRequest['body'];
                    enterpriseProjectId = createAppWhitelistPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除白名单策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteAppWhitelistPolicy(deleteAppWhitelistPolicyRequest?: DeleteAppWhitelistPolicyRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/app/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteAppWhitelistPolicyRequest !== null && deleteAppWhitelistPolicyRequest !== undefined) {
                if (deleteAppWhitelistPolicyRequest instanceof DeleteAppWhitelistPolicyRequest) {
                    body = deleteAppWhitelistPolicyRequest.body
                    enterpriseProjectId = deleteAppWhitelistPolicyRequest.enterpriseProjectId;
                } else {
                    body = deleteAppWhitelistPolicyRequest['body'];
                    enterpriseProjectId = deleteAppWhitelistPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 白名单策略删除主机
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteAppWhitelistPolicyHost(deleteAppWhitelistPolicyHostRequest?: DeleteAppWhitelistPolicyHostRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/app/{policy_id}/host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (deleteAppWhitelistPolicyHostRequest !== null && deleteAppWhitelistPolicyHostRequest !== undefined) {
                if (deleteAppWhitelistPolicyHostRequest instanceof DeleteAppWhitelistPolicyHostRequest) {
                    policyId = deleteAppWhitelistPolicyHostRequest.policyId;
                    body = deleteAppWhitelistPolicyHostRequest.body
                    enterpriseProjectId = deleteAppWhitelistPolicyHostRequest.enterpriseProjectId;
                } else {
                    policyId = deleteAppWhitelistPolicyHostRequest['policy_id'];
                    body = deleteAppWhitelistPolicyHostRequest['body'];
                    enterpriseProjectId = deleteAppWhitelistPolicyHostRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling deleteAppWhitelistPolicyHost.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单可疑进程
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistEvent(listAppWhitelistEventRequest?: ListAppWhitelistEventRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/event",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let beginTime;
            
            let endTime;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let lastDays;
            
            let hostName;
            
            let hostIp;
            
            let privateIp;
            
            let handleStatus;

            if (listAppWhitelistEventRequest !== null && listAppWhitelistEventRequest !== undefined) {
                if (listAppWhitelistEventRequest instanceof ListAppWhitelistEventRequest) {
                    beginTime = listAppWhitelistEventRequest.beginTime;
                    endTime = listAppWhitelistEventRequest.endTime;
                    offset = listAppWhitelistEventRequest.offset;
                    limit = listAppWhitelistEventRequest.limit;
                    enterpriseProjectId = listAppWhitelistEventRequest.enterpriseProjectId;
                    lastDays = listAppWhitelistEventRequest.lastDays;
                    hostName = listAppWhitelistEventRequest.hostName;
                    hostIp = listAppWhitelistEventRequest.hostIp;
                    privateIp = listAppWhitelistEventRequest.privateIp;
                    handleStatus = listAppWhitelistEventRequest.handleStatus;
                } else {
                    beginTime = listAppWhitelistEventRequest['begin_time'];
                    endTime = listAppWhitelistEventRequest['end_time'];
                    offset = listAppWhitelistEventRequest['offset'];
                    limit = listAppWhitelistEventRequest['limit'];
                    enterpriseProjectId = listAppWhitelistEventRequest['enterprise_project_id'];
                    lastDays = listAppWhitelistEventRequest['last_days'];
                    hostName = listAppWhitelistEventRequest['host_name'];
                    hostIp = listAppWhitelistEventRequest['host_ip'];
                    privateIp = listAppWhitelistEventRequest['private_ip'];
                    handleStatus = listAppWhitelistEventRequest['handle_status'];
                }
            }

        
            if (beginTime === null || beginTime === undefined) {
                throw new RequiredError('beginTime','Required parameter beginTime was null or undefined when calling listAppWhitelistEvent.');
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listAppWhitelistEvent.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAppWhitelistEvent.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAppWhitelistEvent.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (lastDays !== null && lastDays !== undefined) {
                localVarQueryParameter['last_days'] = lastDays;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单可选服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistHostStatus(listAppWhitelistHostStatusRequest?: ListAppWhitelistHostStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/host-management/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostName;
            
            let version;
            
            let privateIp;
            
            let publicIp;
            
            let policyId;
            
            let groupId;

            if (listAppWhitelistHostStatusRequest !== null && listAppWhitelistHostStatusRequest !== undefined) {
                if (listAppWhitelistHostStatusRequest instanceof ListAppWhitelistHostStatusRequest) {
                    offset = listAppWhitelistHostStatusRequest.offset;
                    limit = listAppWhitelistHostStatusRequest.limit;
                    enterpriseProjectId = listAppWhitelistHostStatusRequest.enterpriseProjectId;
                    hostId = listAppWhitelistHostStatusRequest.hostId;
                    hostName = listAppWhitelistHostStatusRequest.hostName;
                    version = listAppWhitelistHostStatusRequest.version;
                    privateIp = listAppWhitelistHostStatusRequest.privateIp;
                    publicIp = listAppWhitelistHostStatusRequest.publicIp;
                    policyId = listAppWhitelistHostStatusRequest.policyId;
                    groupId = listAppWhitelistHostStatusRequest.groupId;
                } else {
                    offset = listAppWhitelistHostStatusRequest['offset'];
                    limit = listAppWhitelistHostStatusRequest['limit'];
                    enterpriseProjectId = listAppWhitelistHostStatusRequest['enterprise_project_id'];
                    hostId = listAppWhitelistHostStatusRequest['host_id'];
                    hostName = listAppWhitelistHostStatusRequest['host_name'];
                    version = listAppWhitelistHostStatusRequest['version'];
                    privateIp = listAppWhitelistHostStatusRequest['private_ip'];
                    publicIp = listAppWhitelistHostStatusRequest['public_ip'];
                    policyId = listAppWhitelistHostStatusRequest['policy_id'];
                    groupId = listAppWhitelistHostStatusRequest['group_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAppWhitelistHostStatus.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAppWhitelistHostStatus.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单策略列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistPolicy(listAppWhitelistPolicyRequest?: ListAppWhitelistPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let policyName;
            
            let policyType;
            
            let learningStatus;
            
            let intercept;

            if (listAppWhitelistPolicyRequest !== null && listAppWhitelistPolicyRequest !== undefined) {
                if (listAppWhitelistPolicyRequest instanceof ListAppWhitelistPolicyRequest) {
                    offset = listAppWhitelistPolicyRequest.offset;
                    limit = listAppWhitelistPolicyRequest.limit;
                    enterpriseProjectId = listAppWhitelistPolicyRequest.enterpriseProjectId;
                    policyName = listAppWhitelistPolicyRequest.policyName;
                    policyType = listAppWhitelistPolicyRequest.policyType;
                    learningStatus = listAppWhitelistPolicyRequest.learningStatus;
                    intercept = listAppWhitelistPolicyRequest.intercept;
                } else {
                    offset = listAppWhitelistPolicyRequest['offset'];
                    limit = listAppWhitelistPolicyRequest['limit'];
                    enterpriseProjectId = listAppWhitelistPolicyRequest['enterprise_project_id'];
                    policyName = listAppWhitelistPolicyRequest['policy_name'];
                    policyType = listAppWhitelistPolicyRequest['policy_type'];
                    learningStatus = listAppWhitelistPolicyRequest['learning_status'];
                    intercept = listAppWhitelistPolicyRequest['intercept'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAppWhitelistPolicy.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAppWhitelistPolicy.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (policyType !== null && policyType !== undefined) {
                localVarQueryParameter['policy_type'] = policyType;
            }
            if (learningStatus !== null && learningStatus !== undefined) {
                localVarQueryParameter['learning_status'] = learningStatus;
            }
            if (intercept !== null && intercept !== undefined) {
                localVarQueryParameter['intercept'] = intercept;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单策略关联主机列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistPolicyHost(listAppWhitelistPolicyHostRequest?: ListAppWhitelistPolicyHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let policyName;
            
            let learningStatus;
            
            let applyStatus;
            
            let assetValue;
            
            let hostName;
            
            let privateIp;
            
            let osType;
            
            let policyId;
            
            let publicIp;

            if (listAppWhitelistPolicyHostRequest !== null && listAppWhitelistPolicyHostRequest !== undefined) {
                if (listAppWhitelistPolicyHostRequest instanceof ListAppWhitelistPolicyHostRequest) {
                    enterpriseProjectId = listAppWhitelistPolicyHostRequest.enterpriseProjectId;
                    offset = listAppWhitelistPolicyHostRequest.offset;
                    limit = listAppWhitelistPolicyHostRequest.limit;
                    policyName = listAppWhitelistPolicyHostRequest.policyName;
                    learningStatus = listAppWhitelistPolicyHostRequest.learningStatus;
                    applyStatus = listAppWhitelistPolicyHostRequest.applyStatus;
                    assetValue = listAppWhitelistPolicyHostRequest.assetValue;
                    hostName = listAppWhitelistPolicyHostRequest.hostName;
                    privateIp = listAppWhitelistPolicyHostRequest.privateIp;
                    osType = listAppWhitelistPolicyHostRequest.osType;
                    policyId = listAppWhitelistPolicyHostRequest.policyId;
                    publicIp = listAppWhitelistPolicyHostRequest.publicIp;
                } else {
                    enterpriseProjectId = listAppWhitelistPolicyHostRequest['enterprise_project_id'];
                    offset = listAppWhitelistPolicyHostRequest['offset'];
                    limit = listAppWhitelistPolicyHostRequest['limit'];
                    policyName = listAppWhitelistPolicyHostRequest['policy_name'];
                    learningStatus = listAppWhitelistPolicyHostRequest['learning_status'];
                    applyStatus = listAppWhitelistPolicyHostRequest['apply_status'];
                    assetValue = listAppWhitelistPolicyHostRequest['asset_value'];
                    hostName = listAppWhitelistPolicyHostRequest['host_name'];
                    privateIp = listAppWhitelistPolicyHostRequest['private_ip'];
                    osType = listAppWhitelistPolicyHostRequest['os_type'];
                    policyId = listAppWhitelistPolicyHostRequest['policy_id'];
                    publicIp = listAppWhitelistPolicyHostRequest['public_ip'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling listAppWhitelistPolicyHost.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAppWhitelistPolicyHost.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAppWhitelistPolicyHost.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (policyName !== null && policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }
            if (learningStatus !== null && learningStatus !== undefined) {
                localVarQueryParameter['learning_status'] = learningStatus;
            }
            if (applyStatus !== null && applyStatus !== undefined) {
                localVarQueryParameter['apply_status'] = applyStatus;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (policyId !== null && policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单策略识别进程
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistPolicyProcess(listAppWhitelistPolicyProcessRequest?: ListAppWhitelistPolicyProcessRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/{policy_id}/process",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let policyId;
            
            let processStatus;
            
            let processType;
            
            let processName;
            
            let processHash;
            
            let processPath;
            
            let handleStatus;
            
            let osType;
            
            let fileSigner;

            if (listAppWhitelistPolicyProcessRequest !== null && listAppWhitelistPolicyProcessRequest !== undefined) {
                if (listAppWhitelistPolicyProcessRequest instanceof ListAppWhitelistPolicyProcessRequest) {
                    enterpriseProjectId = listAppWhitelistPolicyProcessRequest.enterpriseProjectId;
                    offset = listAppWhitelistPolicyProcessRequest.offset;
                    limit = listAppWhitelistPolicyProcessRequest.limit;
                    policyId = listAppWhitelistPolicyProcessRequest.policyId;
                    processStatus = listAppWhitelistPolicyProcessRequest.processStatus;
                    processType = listAppWhitelistPolicyProcessRequest.processType;
                    processName = listAppWhitelistPolicyProcessRequest.processName;
                    processHash = listAppWhitelistPolicyProcessRequest.processHash;
                    processPath = listAppWhitelistPolicyProcessRequest.processPath;
                    handleStatus = listAppWhitelistPolicyProcessRequest.handleStatus;
                    osType = listAppWhitelistPolicyProcessRequest.osType;
                    fileSigner = listAppWhitelistPolicyProcessRequest.fileSigner;
                } else {
                    enterpriseProjectId = listAppWhitelistPolicyProcessRequest['enterprise_project_id'];
                    offset = listAppWhitelistPolicyProcessRequest['offset'];
                    limit = listAppWhitelistPolicyProcessRequest['limit'];
                    policyId = listAppWhitelistPolicyProcessRequest['policy_id'];
                    processStatus = listAppWhitelistPolicyProcessRequest['process_status'];
                    processType = listAppWhitelistPolicyProcessRequest['process_type'];
                    processName = listAppWhitelistPolicyProcessRequest['process_name'];
                    processHash = listAppWhitelistPolicyProcessRequest['process_hash'];
                    processPath = listAppWhitelistPolicyProcessRequest['process_path'];
                    handleStatus = listAppWhitelistPolicyProcessRequest['handle_status'];
                    osType = listAppWhitelistPolicyProcessRequest['os_type'];
                    fileSigner = listAppWhitelistPolicyProcessRequest['file_signer'];
                }
            }

        
            if (enterpriseProjectId === null || enterpriseProjectId === undefined) {
                throw new RequiredError('enterpriseProjectId','Required parameter enterpriseProjectId was null or undefined when calling listAppWhitelistPolicyProcess.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listAppWhitelistPolicyProcess.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listAppWhitelistPolicyProcess.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling listAppWhitelistPolicyProcess.');
            }
            if (processStatus !== null && processStatus !== undefined) {
                localVarQueryParameter['process_status'] = processStatus;
            }
            if (processType !== null && processType !== undefined) {
                localVarQueryParameter['process_type'] = processType;
            }
            if (processName !== null && processName !== undefined) {
                localVarQueryParameter['process_name'] = processName;
            }
            if (processHash !== null && processHash !== undefined) {
                localVarQueryParameter['process_hash'] = processHash;
            }
            if (processPath !== null && processPath !== undefined) {
                localVarQueryParameter['process_path'] = processPath;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (fileSigner !== null && fileSigner !== undefined) {
                localVarQueryParameter['file_signer'] = fileSigner;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单策略进程扩展列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAppWhitelistPolicyProcessExtend(listAppWhitelistPolicyProcessExtendRequest?: ListAppWhitelistPolicyProcessExtendRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/{policy_id}/process-extend",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let hostId;
            
            let enterpriseProjectId;

            if (listAppWhitelistPolicyProcessExtendRequest !== null && listAppWhitelistPolicyProcessExtendRequest !== undefined) {
                if (listAppWhitelistPolicyProcessExtendRequest instanceof ListAppWhitelistPolicyProcessExtendRequest) {
                    policyId = listAppWhitelistPolicyProcessExtendRequest.policyId;
                    hostId = listAppWhitelistPolicyProcessExtendRequest.hostId;
                    enterpriseProjectId = listAppWhitelistPolicyProcessExtendRequest.enterpriseProjectId;
                } else {
                    policyId = listAppWhitelistPolicyProcessExtendRequest['policy_id'];
                    hostId = listAppWhitelistPolicyProcessExtendRequest['host_id'];
                    enterpriseProjectId = listAppWhitelistPolicyProcessExtendRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling listAppWhitelistPolicyProcessExtend.');
            }
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listAppWhitelistPolicyProcessExtend.');
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 统计agent版本不匹配主机数量
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAppWhitelistAgentStatics(showAppWhitelistAgentStaticsRequest?: ShowAppWhitelistAgentStaticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/agent/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAppWhitelistAgentStaticsRequest !== null && showAppWhitelistAgentStaticsRequest !== undefined) {
                if (showAppWhitelistAgentStaticsRequest instanceof ShowAppWhitelistAgentStaticsRequest) {
                    enterpriseProjectId = showAppWhitelistAgentStaticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAppWhitelistAgentStaticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询进程白名单策略详情
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAppWhitelistPolicy(showAppWhitelistPolicyRequest?: ShowAppWhitelistPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/app/{policy_id}/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (showAppWhitelistPolicyRequest !== null && showAppWhitelistPolicyRequest !== undefined) {
                if (showAppWhitelistPolicyRequest instanceof ShowAppWhitelistPolicyRequest) {
                    policyId = showAppWhitelistPolicyRequest.policyId;
                    enterpriseProjectId = showAppWhitelistPolicyRequest.enterpriseProjectId;
                } else {
                    policyId = showAppWhitelistPolicyRequest['policy_id'];
                    enterpriseProjectId = showAppWhitelistPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling showAppWhitelistPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 应用白名单策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchAppWhitelistPolicyHost(switchAppWhitelistPolicyHostRequest?: SwitchAppWhitelistPolicyHostRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/app/host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (switchAppWhitelistPolicyHostRequest !== null && switchAppWhitelistPolicyHostRequest !== undefined) {
                if (switchAppWhitelistPolicyHostRequest instanceof SwitchAppWhitelistPolicyHostRequest) {
                    body = switchAppWhitelistPolicyHostRequest.body
                    enterpriseProjectId = switchAppWhitelistPolicyHostRequest.enterpriseProjectId;
                } else {
                    body = switchAppWhitelistPolicyHostRequest['body'];
                    enterpriseProjectId = switchAppWhitelistPolicyHostRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 操作白名单策略学习状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        switchAppWhitelistPolicyLearnStatus(switchAppWhitelistPolicyLearnStatusRequest?: SwitchAppWhitelistPolicyLearnStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/app/{policy_id}/learn",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let policyId;
            
            let enterpriseProjectId;

            if (switchAppWhitelistPolicyLearnStatusRequest !== null && switchAppWhitelistPolicyLearnStatusRequest !== undefined) {
                if (switchAppWhitelistPolicyLearnStatusRequest instanceof SwitchAppWhitelistPolicyLearnStatusRequest) {
                    policyId = switchAppWhitelistPolicyLearnStatusRequest.policyId;
                    body = switchAppWhitelistPolicyLearnStatusRequest.body
                    enterpriseProjectId = switchAppWhitelistPolicyLearnStatusRequest.enterpriseProjectId;
                } else {
                    policyId = switchAppWhitelistPolicyLearnStatusRequest['policy_id'];
                    body = switchAppWhitelistPolicyLearnStatusRequest['body'];
                    enterpriseProjectId = switchAppWhitelistPolicyLearnStatusRequest['enterprise_project_id'];
                }
            }

        
            if (policyId === null || policyId === undefined) {
            throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling switchAppWhitelistPolicyLearnStatus.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'policy_id': policyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询基线检查执行操作时影响的范围
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHandleAffectBaseline(listHandleAffectBaselineRequest?: ListHandleAffectBaselineRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/baseline/check-rule/handle-affect-baseline",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;

            if (listHandleAffectBaselineRequest !== null && listHandleAffectBaselineRequest !== undefined) {
                if (listHandleAffectBaselineRequest instanceof ListHandleAffectBaselineRequest) {
                    offset = listHandleAffectBaselineRequest.offset;
                    limit = listHandleAffectBaselineRequest.limit;
                    body = listHandleAffectBaselineRequest.body
                    enterpriseProjectId = listHandleAffectBaselineRequest.enterpriseProjectId;
                } else {
                    offset = listHandleAffectBaselineRequest['offset'];
                    limit = listHandleAffectBaselineRequest['limit'];
                    body = listHandleAffectBaselineRequest['body'];
                    enterpriseProjectId = listHandleAffectBaselineRequest['enterprise_project_id'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listHandleAffectBaseline.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listHandleAffectBaseline.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 复制配置检测策略信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        copyBaselinePolicyGroup(copyBaselinePolicyGroupRequest?: CopyBaselinePolicyGroupRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/baseline/security-checks/policy-group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (copyBaselinePolicyGroupRequest !== null && copyBaselinePolicyGroupRequest !== undefined) {
                if (copyBaselinePolicyGroupRequest instanceof CopyBaselinePolicyGroupRequest) {
                    body = copyBaselinePolicyGroupRequest.body
                    enterpriseProjectId = copyBaselinePolicyGroupRequest.enterpriseProjectId;
                } else {
                    body = copyBaselinePolicyGroupRequest['body'];
                    enterpriseProjectId = copyBaselinePolicyGroupRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询基线检测策略的基线目录信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showBaselineDirectory(showBaselineDirectoryRequest?: ShowBaselineDirectoryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/baseline/security-checks/directory",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let supportOs;
            
            let selectType;
            
            let enterpriseProjectId;
            
            let groupId;

            if (showBaselineDirectoryRequest !== null && showBaselineDirectoryRequest !== undefined) {
                if (showBaselineDirectoryRequest instanceof ShowBaselineDirectoryRequest) {
                    supportOs = showBaselineDirectoryRequest.supportOs;
                    selectType = showBaselineDirectoryRequest.selectType;
                    enterpriseProjectId = showBaselineDirectoryRequest.enterpriseProjectId;
                    groupId = showBaselineDirectoryRequest.groupId;
                } else {
                    supportOs = showBaselineDirectoryRequest['support_os'];
                    selectType = showBaselineDirectoryRequest['select_type'];
                    enterpriseProjectId = showBaselineDirectoryRequest['enterprise_project_id'];
                    groupId = showBaselineDirectoryRequest['group_id'];
                }
            }

        
            if (supportOs === null || supportOs === undefined) {
                throw new RequiredError('supportOs','Required parameter supportOs was null or undefined when calling showBaselineDirectory.');
            }
            if (supportOs !== null && supportOs !== undefined) {
                localVarQueryParameter['support_os'] = supportOs;
            }
            if (selectType === null || selectType === undefined) {
                throw new RequiredError('selectType','Required parameter selectType was null or undefined when calling showBaselineDirectory.');
            }
            if (selectType !== null && selectType !== undefined) {
                localVarQueryParameter['select_type'] = selectType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 导出集群环境安全相关信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportRisks(exportRisksRequest?: ExportRisksRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/cluster/risk/export-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let riskType;
            
            let exportSize;
            
            let enterpriseProjectId;

            if (exportRisksRequest !== null && exportRisksRequest !== undefined) {
                if (exportRisksRequest instanceof ExportRisksRequest) {
                    riskType = exportRisksRequest.riskType;
                    exportSize = exportRisksRequest.exportSize;
                    body = exportRisksRequest.body
                    enterpriseProjectId = exportRisksRequest.enterpriseProjectId;
                } else {
                    riskType = exportRisksRequest['risk_type'];
                    exportSize = exportRisksRequest['export_size'];
                    body = exportRisksRequest['body'];
                    enterpriseProjectId = exportRisksRequest['enterprise_project_id'];
                }
            }

        
            if (riskType === null || riskType === undefined) {
                throw new RequiredError('riskType','Required parameter riskType was null or undefined when calling exportRisks.');
            }
            if (riskType !== null && riskType !== undefined) {
                localVarQueryParameter['risk_type'] = riskType;
            }
            if (exportSize === null || exportSize === undefined) {
                throw new RequiredError('exportSize','Required parameter exportSize was null or undefined when calling exportRisks.');
            }
            if (exportSize !== null && exportSize !== undefined) {
                localVarQueryParameter['export_size'] = exportSize;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群风险影响的集群资源列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterRiskAffectResources(listClusterRiskAffectResourcesRequest?: ListClusterRiskAffectResourcesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/cluster/risk/{risk_id}/affected-resources",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let riskId;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let clusterId;
            
            let resourceName;
            
            let resourceType;
            
            let namespace;

            if (listClusterRiskAffectResourcesRequest !== null && listClusterRiskAffectResourcesRequest !== undefined) {
                if (listClusterRiskAffectResourcesRequest instanceof ListClusterRiskAffectResourcesRequest) {
                    riskId = listClusterRiskAffectResourcesRequest.riskId;
                    enterpriseProjectId = listClusterRiskAffectResourcesRequest.enterpriseProjectId;
                    offset = listClusterRiskAffectResourcesRequest.offset;
                    limit = listClusterRiskAffectResourcesRequest.limit;
                    clusterId = listClusterRiskAffectResourcesRequest.clusterId;
                    resourceName = listClusterRiskAffectResourcesRequest.resourceName;
                    resourceType = listClusterRiskAffectResourcesRequest.resourceType;
                    namespace = listClusterRiskAffectResourcesRequest.namespace;
                } else {
                    riskId = listClusterRiskAffectResourcesRequest['risk_id'];
                    enterpriseProjectId = listClusterRiskAffectResourcesRequest['enterprise_project_id'];
                    offset = listClusterRiskAffectResourcesRequest['offset'];
                    limit = listClusterRiskAffectResourcesRequest['limit'];
                    clusterId = listClusterRiskAffectResourcesRequest['cluster_id'];
                    resourceName = listClusterRiskAffectResourcesRequest['resource_name'];
                    resourceType = listClusterRiskAffectResourcesRequest['resource_type'];
                    namespace = listClusterRiskAffectResourcesRequest['namespace'];
                }
            }

        
            if (riskId === null || riskId === undefined) {
            throw new RequiredError('riskId','Required parameter riskId was null or undefined when calling listClusterRiskAffectResources.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (resourceName !== null && resourceName !== undefined) {
                localVarQueryParameter['resource_name'] = resourceName;
            }
            if (resourceType !== null && resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'risk_id': riskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群风险列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listClusterRisks(listClusterRisksRequest?: ListClusterRisksRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/cluster/risks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let riskType;
            
            let riskStatus;
            
            let clusterId;
            
            let clusterName;
            
            let riskName;
            
            let riskLevel;
            
            let riskCategory;

            if (listClusterRisksRequest !== null && listClusterRisksRequest !== undefined) {
                if (listClusterRisksRequest instanceof ListClusterRisksRequest) {
                    enterpriseProjectId = listClusterRisksRequest.enterpriseProjectId;
                    offset = listClusterRisksRequest.offset;
                    limit = listClusterRisksRequest.limit;
                    riskType = listClusterRisksRequest.riskType;
                    riskStatus = listClusterRisksRequest.riskStatus;
                    clusterId = listClusterRisksRequest.clusterId;
                    clusterName = listClusterRisksRequest.clusterName;
                    riskName = listClusterRisksRequest.riskName;
                    riskLevel = listClusterRisksRequest.riskLevel;
                    riskCategory = listClusterRisksRequest.riskCategory;
                } else {
                    enterpriseProjectId = listClusterRisksRequest['enterprise_project_id'];
                    offset = listClusterRisksRequest['offset'];
                    limit = listClusterRisksRequest['limit'];
                    riskType = listClusterRisksRequest['risk_type'];
                    riskStatus = listClusterRisksRequest['risk_status'];
                    clusterId = listClusterRisksRequest['cluster_id'];
                    clusterName = listClusterRisksRequest['cluster_name'];
                    riskName = listClusterRisksRequest['risk_name'];
                    riskLevel = listClusterRisksRequest['risk_level'];
                    riskCategory = listClusterRisksRequest['risk_category'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (riskType !== null && riskType !== undefined) {
                localVarQueryParameter['risk_type'] = riskType;
            }
            if (riskStatus !== null && riskStatus !== undefined) {
                localVarQueryParameter['risk_status'] = riskStatus;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (clusterName !== null && clusterName !== undefined) {
                localVarQueryParameter['cluster_name'] = clusterName;
            }
            if (riskName !== null && riskName !== undefined) {
                localVarQueryParameter['risk_name'] = riskName;
            }
            if (riskLevel !== null && riskLevel !== undefined) {
                localVarQueryParameter['risk_level'] = riskLevel;
            }
            if (riskCategory !== null && riskCategory !== undefined) {
                localVarQueryParameter['risk_category'] = riskCategory;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群扫描统计数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showClusterScanStatistics(showClusterScanStatisticsRequest?: ShowClusterScanStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/cluster/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showClusterScanStatisticsRequest !== null && showClusterScanStatisticsRequest !== undefined) {
                if (showClusterScanStatisticsRequest instanceof ShowClusterScanStatisticsRequest) {
                    enterpriseProjectId = showClusterScanStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showClusterScanStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询项目配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProjectConfigs(listProjectConfigsRequest?: ListProjectConfigsRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (listProjectConfigsRequest !== null && listProjectConfigsRequest !== undefined) {
                if (listProjectConfigsRequest instanceof ListProjectConfigsRequest) {
                    body = listProjectConfigsRequest.body
                    enterpriseProjectId = listProjectConfigsRequest.enterpriseProjectId;
                } else {
                    body = listProjectConfigsRequest['body'];
                    enterpriseProjectId = listProjectConfigsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改项目配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        modifyProjectConfigs(modifyProjectConfigsRequest?: ModifyProjectConfigsRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (modifyProjectConfigsRequest !== null && modifyProjectConfigsRequest !== undefined) {
                if (modifyProjectConfigsRequest instanceof ModifyProjectConfigsRequest) {
                    body = modifyProjectConfigsRequest.body
                    enterpriseProjectId = modifyProjectConfigsRequest.enterpriseProjectId;
                } else {
                    body = modifyProjectConfigsRequest['body'];
                    enterpriseProjectId = modifyProjectConfigsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 保存用户访问记录
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        saveBrowsingHistory(saveBrowsingHistoryRequest?: SaveBrowsingHistoryRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/browsing-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (saveBrowsingHistoryRequest !== null && saveBrowsingHistoryRequest !== undefined) {
                if (saveBrowsingHistoryRequest instanceof SaveBrowsingHistoryRequest) {
                    body = saveBrowsingHistoryRequest.body
                    enterpriseProjectId = saveBrowsingHistoryRequest.enterpriseProjectId;
                } else {
                    body = saveBrowsingHistoryRequest['body'];
                    enterpriseProjectId = saveBrowsingHistoryRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 新增镜像仓库
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addRegistry(addRegistryRequest?: AddRegistryRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/registries",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (addRegistryRequest !== null && addRegistryRequest !== undefined) {
                if (addRegistryRequest instanceof AddRegistryRequest) {
                    body = addRegistryRequest.body
                    enterpriseProjectId = addRegistryRequest.enterpriseProjectId;
                } else {
                    body = addRegistryRequest['body'];
                    enterpriseProjectId = addRegistryRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量卸载集群daemonset
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchDeleteAgentDaemonset(batchDeleteAgentDaemonsetRequest?: BatchDeleteAgentDaemonsetRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/daemonsets/batch-delete",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (batchDeleteAgentDaemonsetRequest !== null && batchDeleteAgentDaemonsetRequest !== undefined) {
                if (batchDeleteAgentDaemonsetRequest instanceof BatchDeleteAgentDaemonsetRequest) {
                    body = batchDeleteAgentDaemonsetRequest.body
                    enterpriseProjectId = batchDeleteAgentDaemonsetRequest.enterpriseProjectId;
                } else {
                    body = batchDeleteAgentDaemonsetRequest['body'];
                    enterpriseProjectId = batchDeleteAgentDaemonsetRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量删除镜像仓接入信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchDeleteRegistry(batchDeleteRegistryRequest?: BatchDeleteRegistryRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/registries/batch-delete",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (batchDeleteRegistryRequest !== null && batchDeleteRegistryRequest !== undefined) {
                if (batchDeleteRegistryRequest instanceof BatchDeleteRegistryRequest) {
                    body = batchDeleteRegistryRequest.body
                    enterpriseProjectId = batchDeleteRegistryRequest.enterpriseProjectId;
                } else {
                    body = batchDeleteRegistryRequest['body'];
                    enterpriseProjectId = batchDeleteRegistryRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量升级集群daemonset
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchUpgradeAgentDaemonset(batchUpgradeAgentDaemonsetRequest?: BatchUpgradeAgentDaemonsetRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/daemonsets/batch-upgrade",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (batchUpgradeAgentDaemonsetRequest !== null && batchUpgradeAgentDaemonsetRequest !== undefined) {
                if (batchUpgradeAgentDaemonsetRequest instanceof BatchUpgradeAgentDaemonsetRequest) {
                    body = batchUpgradeAgentDaemonsetRequest.body
                    enterpriseProjectId = batchUpgradeAgentDaemonsetRequest.enterpriseProjectId;
                } else {
                    body = batchUpgradeAgentDaemonsetRequest['body'];
                    enterpriseProjectId = batchUpgradeAgentDaemonsetRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建集群daemonset
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAgentDaemonset(createAgentDaemonsetRequest?: CreateAgentDaemonsetRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/clusters/{cluster_id}/daemonsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (createAgentDaemonsetRequest !== null && createAgentDaemonsetRequest !== undefined) {
                if (createAgentDaemonsetRequest instanceof CreateAgentDaemonsetRequest) {
                    clusterId = createAgentDaemonsetRequest.clusterId;
                    enterpriseProjectId = createAgentDaemonsetRequest.enterpriseProjectId;
                    body = createAgentDaemonsetRequest.body
                } else {
                    clusterId = createAgentDaemonsetRequest['cluster_id'];
                    enterpriseProjectId = createAgentDaemonsetRequest['enterprise_project_id'];
                    body = createAgentDaemonsetRequest['body'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling createAgentDaemonset.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建多云集群
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createMultiCloudClusters(createMultiCloudClustersRequest?: CreateMultiCloudClustersRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createMultiCloudClustersRequest !== null && createMultiCloudClustersRequest !== undefined) {
                if (createMultiCloudClustersRequest instanceof CreateMultiCloudClustersRequest) {
                    body = createMultiCloudClustersRequest.body
                    enterpriseProjectId = createMultiCloudClustersRequest.enterpriseProjectId;
                } else {
                    body = createMultiCloudClustersRequest['body'];
                    enterpriseProjectId = createMultiCloudClustersRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除集群daemonset
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteAgentDaemonset(deleteAgentDaemonsetRequest?: DeleteAgentDaemonsetRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/container/kubernetes/clusters/{cluster_id}/daemonsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let region;
            
            let enterpriseProjectId;
            
            let invokedService;

            if (deleteAgentDaemonsetRequest !== null && deleteAgentDaemonsetRequest !== undefined) {
                if (deleteAgentDaemonsetRequest instanceof DeleteAgentDaemonsetRequest) {
                    clusterId = deleteAgentDaemonsetRequest.clusterId;
                    region = deleteAgentDaemonsetRequest.region;
                    enterpriseProjectId = deleteAgentDaemonsetRequest.enterpriseProjectId;
                    invokedService = deleteAgentDaemonsetRequest.invokedService;
                } else {
                    clusterId = deleteAgentDaemonsetRequest['cluster_id'];
                    region = deleteAgentDaemonsetRequest['region'];
                    enterpriseProjectId = deleteAgentDaemonsetRequest['enterprise_project_id'];
                    invokedService = deleteAgentDaemonsetRequest['invoked_service'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling deleteAgentDaemonset.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (invokedService !== null && invokedService !== undefined) {
                localVarQueryParameter['invoked_service'] = invokedService;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除CI/CD配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteCicdConfigurations(deleteCicdConfigurationsRequest?: DeleteCicdConfigurationsRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/cicd/configurations/batch-delete",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteCicdConfigurationsRequest !== null && deleteCicdConfigurationsRequest !== undefined) {
                if (deleteCicdConfigurationsRequest instanceof DeleteCicdConfigurationsRequest) {
                    body = deleteCicdConfigurationsRequest.body
                    enterpriseProjectId = deleteCicdConfigurationsRequest.enterpriseProjectId;
                } else {
                    body = deleteCicdConfigurationsRequest['body'];
                    enterpriseProjectId = deleteCicdConfigurationsRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除镜像仓接入信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteRegistry(deleteRegistryRequest?: DeleteRegistryRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/image/registries/{id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let id;
            
            let enterpriseProjectId;

            if (deleteRegistryRequest !== null && deleteRegistryRequest !== undefined) {
                if (deleteRegistryRequest instanceof DeleteRegistryRequest) {
                    id = deleteRegistryRequest.id;
                    enterpriseProjectId = deleteRegistryRequest.enterpriseProjectId;
                } else {
                    id = deleteRegistryRequest['id'];
                    enterpriseProjectId = deleteRegistryRequest['enterprise_project_id'];
                }
            }

        
            if (id === null || id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRegistry.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'id': id, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建镜像安全报告信息导出任务（支持全量/批量导出）,支持导出恶意文件、软件信息、文件信息、敏感信息、软件合规、镜像构建指令风险。
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportImageSecurityReportTask(exportImageSecurityReportTaskRequest?: ExportImageSecurityReportTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/security-report/export-tasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (exportImageSecurityReportTaskRequest !== null && exportImageSecurityReportTaskRequest !== undefined) {
                if (exportImageSecurityReportTaskRequest instanceof ExportImageSecurityReportTaskRequest) {
                    body = exportImageSecurityReportTaskRequest.body
                    enterpriseProjectId = exportImageSecurityReportTaskRequest.enterpriseProjectId;
                } else {
                    body = exportImageSecurityReportTaskRequest['body'];
                    enterpriseProjectId = exportImageSecurityReportTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取镜像同步任务关联的镜像仓的信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listAssociateRegistries(listAssociateRegistriesRequest?: ListAssociateRegistriesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/image-sync/tasks/{task_id}/registries",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let taskId;
            
            let enterpriseProjectId;
            
            let registryName;
            
            let registryType;
            
            let offset;
            
            let limit;
            
            let syncStatus;

            if (listAssociateRegistriesRequest !== null && listAssociateRegistriesRequest !== undefined) {
                if (listAssociateRegistriesRequest instanceof ListAssociateRegistriesRequest) {
                    taskId = listAssociateRegistriesRequest.taskId;
                    enterpriseProjectId = listAssociateRegistriesRequest.enterpriseProjectId;
                    registryName = listAssociateRegistriesRequest.registryName;
                    registryType = listAssociateRegistriesRequest.registryType;
                    offset = listAssociateRegistriesRequest.offset;
                    limit = listAssociateRegistriesRequest.limit;
                    syncStatus = listAssociateRegistriesRequest.syncStatus;
                } else {
                    taskId = listAssociateRegistriesRequest['task_id'];
                    enterpriseProjectId = listAssociateRegistriesRequest['enterprise_project_id'];
                    registryName = listAssociateRegistriesRequest['registry_name'];
                    registryType = listAssociateRegistriesRequest['registry_type'];
                    offset = listAssociateRegistriesRequest['offset'];
                    limit = listAssociateRegistriesRequest['limit'];
                    syncStatus = listAssociateRegistriesRequest['sync_status'];
                }
            }

        
            if (taskId === null || taskId === undefined) {
            throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling listAssociateRegistries.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (registryName !== null && registryName !== undefined) {
                localVarQueryParameter['registry_name'] = registryName;
            }
            if (registryType !== null && registryType !== undefined) {
                localVarQueryParameter['registry_type'] = registryType;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (syncStatus !== null && syncStatus !== undefined) {
                localVarQueryParameter['sync_status'] = syncStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'task_id': taskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询cicd配置列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCicdConfigurations(listCicdConfigurationsRequest?: ListCicdConfigurationsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/cicd/configurations",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let cicdName;
            
            let cicdId;

            if (listCicdConfigurationsRequest !== null && listCicdConfigurationsRequest !== undefined) {
                if (listCicdConfigurationsRequest instanceof ListCicdConfigurationsRequest) {
                    enterpriseProjectId = listCicdConfigurationsRequest.enterpriseProjectId;
                    offset = listCicdConfigurationsRequest.offset;
                    limit = listCicdConfigurationsRequest.limit;
                    cicdName = listCicdConfigurationsRequest.cicdName;
                    cicdId = listCicdConfigurationsRequest.cicdId;
                } else {
                    enterpriseProjectId = listCicdConfigurationsRequest['enterprise_project_id'];
                    offset = listCicdConfigurationsRequest['offset'];
                    limit = listCicdConfigurationsRequest['limit'];
                    cicdName = listCicdConfigurationsRequest['cicd_name'];
                    cicdId = listCicdConfigurationsRequest['cicd_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cicdName !== null && cicdName !== undefined) {
                localVarQueryParameter['cicd_name'] = cicdName;
            }
            if (cicdId !== null && cicdId !== undefined) {
                localVarQueryParameter['cicd_id'] = cicdId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询多云集群
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listMultiCloudClusters(listMultiCloudClustersRequest?: ListMultiCloudClustersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let clusterId;
            
            let offset;
            
            let limit;

            if (listMultiCloudClustersRequest !== null && listMultiCloudClustersRequest !== undefined) {
                if (listMultiCloudClustersRequest instanceof ListMultiCloudClustersRequest) {
                    enterpriseProjectId = listMultiCloudClustersRequest.enterpriseProjectId;
                    clusterId = listMultiCloudClustersRequest.clusterId;
                    offset = listMultiCloudClustersRequest.offset;
                    limit = listMultiCloudClustersRequest.limit;
                } else {
                    enterpriseProjectId = listMultiCloudClustersRequest['enterprise_project_id'];
                    clusterId = listMultiCloudClustersRequest['cluster_id'];
                    offset = listMultiCloudClustersRequest['offset'];
                    limit = listMultiCloudClustersRequest['limit'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取镜像仓列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRegistry(listRegistryRequest?: ListRegistryRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/registries",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let registryName;
            
            let registryId;
            
            let registryType;
            
            let registryAddr;
            
            let status;

            if (listRegistryRequest !== null && listRegistryRequest !== undefined) {
                if (listRegistryRequest instanceof ListRegistryRequest) {
                    enterpriseProjectId = listRegistryRequest.enterpriseProjectId;
                    offset = listRegistryRequest.offset;
                    limit = listRegistryRequest.limit;
                    registryName = listRegistryRequest.registryName;
                    registryId = listRegistryRequest.registryId;
                    registryType = listRegistryRequest.registryType;
                    registryAddr = listRegistryRequest.registryAddr;
                    status = listRegistryRequest.status;
                } else {
                    enterpriseProjectId = listRegistryRequest['enterprise_project_id'];
                    offset = listRegistryRequest['offset'];
                    limit = listRegistryRequest['limit'];
                    registryName = listRegistryRequest['registry_name'];
                    registryId = listRegistryRequest['registry_id'];
                    registryType = listRegistryRequest['registry_type'];
                    registryAddr = listRegistryRequest['registry_addr'];
                    status = listRegistryRequest['status'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (registryName !== null && registryName !== undefined) {
                localVarQueryParameter['registry_name'] = registryName;
            }
            if (registryId !== null && registryId !== undefined) {
                localVarQueryParameter['registry_id'] = registryId;
            }
            if (registryType !== null && registryType !== undefined) {
                localVarQueryParameter['registry_type'] = registryType;
            }
            if (registryAddr !== null && registryAddr !== undefined) {
                localVarQueryParameter['registry_addr'] = registryAddr;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像仓统计数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRegistryStatistics(listRegistryStatisticsRequest?: ListRegistryStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/registries/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let registryType;

            if (listRegistryStatisticsRequest !== null && listRegistryStatisticsRequest !== undefined) {
                if (listRegistryStatisticsRequest instanceof ListRegistryStatisticsRequest) {
                    enterpriseProjectId = listRegistryStatisticsRequest.enterpriseProjectId;
                    registryType = listRegistryStatisticsRequest.registryType;
                } else {
                    enterpriseProjectId = listRegistryStatisticsRequest['enterprise_project_id'];
                    registryType = listRegistryStatisticsRequest['registry_type'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (registryType !== null && registryType !== undefined) {
                localVarQueryParameter['registry_type'] = registryType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改CI/CD配置
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        modifyCicdConfiguration(modifyCicdConfigurationRequest?: ModifyCicdConfigurationRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/image/cicd/configurations/{cicd_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let cicdId;
            
            let enterpriseProjectId;

            if (modifyCicdConfigurationRequest !== null && modifyCicdConfigurationRequest !== undefined) {
                if (modifyCicdConfigurationRequest instanceof ModifyCicdConfigurationRequest) {
                    cicdId = modifyCicdConfigurationRequest.cicdId;
                    body = modifyCicdConfigurationRequest.body
                    enterpriseProjectId = modifyCicdConfigurationRequest.enterpriseProjectId;
                } else {
                    cicdId = modifyCicdConfigurationRequest['cicd_id'];
                    body = modifyCicdConfigurationRequest['body'];
                    enterpriseProjectId = modifyCicdConfigurationRequest['enterprise_project_id'];
                }
            }

        
            if (cicdId === null || cicdId === undefined) {
            throw new RequiredError('cicdId','Required parameter cicdId was null or undefined when calling modifyCicdConfiguration.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cicd_id': cicdId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 解析多云集群的配置文件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        parseMultiCloudClusterConfig(parseMultiCloudClusterConfigRequest?: ParseMultiCloudClusterConfigRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/config-analyze",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (parseMultiCloudClusterConfigRequest !== null && parseMultiCloudClusterConfigRequest !== undefined) {
                if (parseMultiCloudClusterConfigRequest instanceof ParseMultiCloudClusterConfigRequest) {
                    body = parseMultiCloudClusterConfigRequest.body
                    enterpriseProjectId = parseMultiCloudClusterConfigRequest.enterpriseProjectId;
                } else {
                    body = parseMultiCloudClusterConfigRequest['body'];
                    enterpriseProjectId = parseMultiCloudClusterConfigRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除多云集群
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        removeMultiCloudClusters(removeMultiCloudClustersRequest?: RemoveMultiCloudClustersRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters/{cluster_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (removeMultiCloudClustersRequest !== null && removeMultiCloudClustersRequest !== undefined) {
                if (removeMultiCloudClustersRequest instanceof RemoveMultiCloudClustersRequest) {
                    clusterId = removeMultiCloudClustersRequest.clusterId;
                    enterpriseProjectId = removeMultiCloudClustersRequest.enterpriseProjectId;
                } else {
                    clusterId = removeMultiCloudClustersRequest['cluster_id'];
                    enterpriseProjectId = removeMultiCloudClustersRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling removeMultiCloudClusters.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取部署模板，在安装Daemonset的时候提供选择
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAgentDaemonsetDeployTemplate(showAgentDaemonsetDeployTemplateRequest?: ShowAgentDaemonsetDeployTemplateRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/template",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showAgentDaemonsetDeployTemplateRequest !== null && showAgentDaemonsetDeployTemplateRequest !== undefined) {
                if (showAgentDaemonsetDeployTemplateRequest instanceof ShowAgentDaemonsetDeployTemplateRequest) {
                    enterpriseProjectId = showAgentDaemonsetDeployTemplateRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showAgentDaemonsetDeployTemplateRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取集群daemonset信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAgentDaemonsetDetailInfo(showAgentDaemonsetDetailInfoRequest?: ShowAgentDaemonsetDetailInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/clusters/{cluster_id}/daemonsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (showAgentDaemonsetDetailInfoRequest !== null && showAgentDaemonsetDetailInfoRequest !== undefined) {
                if (showAgentDaemonsetDetailInfoRequest instanceof ShowAgentDaemonsetDetailInfoRequest) {
                    clusterId = showAgentDaemonsetDetailInfoRequest.clusterId;
                    enterpriseProjectId = showAgentDaemonsetDetailInfoRequest.enterpriseProjectId;
                } else {
                    clusterId = showAgentDaemonsetDetailInfoRequest['cluster_id'];
                    enterpriseProjectId = showAgentDaemonsetDetailInfoRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling showAgentDaemonsetDetailInfo.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询CI/CD配置信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showCicdConfiguration(showCicdConfigurationRequest?: ShowCicdConfigurationRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/cicd/configurations/{cicd_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let cicdId;
            
            let enterpriseProjectId;

            if (showCicdConfigurationRequest !== null && showCicdConfigurationRequest !== undefined) {
                if (showCicdConfigurationRequest instanceof ShowCicdConfigurationRequest) {
                    cicdId = showCicdConfigurationRequest.cicdId;
                    enterpriseProjectId = showCicdConfigurationRequest.enterpriseProjectId;
                } else {
                    cicdId = showCicdConfigurationRequest['cicd_id'];
                    enterpriseProjectId = showCicdConfigurationRequest['enterprise_project_id'];
                }
            }

        
            if (cicdId === null || cicdId === undefined) {
            throw new RequiredError('cicdId','Required parameter cicdId was null or undefined when calling showCicdConfiguration.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cicd_id': cicdId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取镜像上传指令，上传的镜像是“镜像仓接入功能”和“镜像仓扫描功能”需要的组件
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showImageUploadCommand(showImageUploadCommandRequest?: ShowImageUploadCommandRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/registries/image-upload-command",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let registryAddr;
            
            let namespace;
            
            let username;
            
            let password;

            if (showImageUploadCommandRequest !== null && showImageUploadCommandRequest !== undefined) {
                if (showImageUploadCommandRequest instanceof ShowImageUploadCommandRequest) {
                    registryAddr = showImageUploadCommandRequest.registryAddr;
                    namespace = showImageUploadCommandRequest.namespace;
                    username = showImageUploadCommandRequest.username;
                    password = showImageUploadCommandRequest.password;
                } else {
                    registryAddr = showImageUploadCommandRequest['registry_addr'];
                    namespace = showImageUploadCommandRequest['namespace'];
                    username = showImageUploadCommandRequest['username'];
                    password = showImageUploadCommandRequest['password'];
                }
            }

        
            if (registryAddr === null || registryAddr === undefined) {
                throw new RequiredError('registryAddr','Required parameter registryAddr was null or undefined when calling showImageUploadCommand.');
            }
            if (registryAddr !== null && registryAddr !== undefined) {
                localVarQueryParameter['registry_addr'] = registryAddr;
            }
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling showImageUploadCommand.');
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling showImageUploadCommand.');
            }
            if (username !== null && username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling showImageUploadCommand.');
            }
            if (password !== null && password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取多云集群的账号权限
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showMultiCloudClusterAuth(showMultiCloudClusterAuthRequest?: ShowMultiCloudClusterAuthRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters/{cluster_id}/permissions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (showMultiCloudClusterAuthRequest !== null && showMultiCloudClusterAuthRequest !== undefined) {
                if (showMultiCloudClusterAuthRequest instanceof ShowMultiCloudClusterAuthRequest) {
                    clusterId = showMultiCloudClusterAuthRequest.clusterId;
                    enterpriseProjectId = showMultiCloudClusterAuthRequest.enterpriseProjectId;
                } else {
                    clusterId = showMultiCloudClusterAuthRequest['cluster_id'];
                    enterpriseProjectId = showMultiCloudClusterAuthRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling showMultiCloudClusterAuth.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取多云集群的上传镜像指令
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showMultiCloudClusterImageCommand(showMultiCloudClusterImageCommandRequest?: ShowMultiCloudClusterImageCommandRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/image-upload-command",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let imageRepo;
            
            let organization;
            
            let username;
            
            let password;
            
            let plugType;

            if (showMultiCloudClusterImageCommandRequest !== null && showMultiCloudClusterImageCommandRequest !== undefined) {
                if (showMultiCloudClusterImageCommandRequest instanceof ShowMultiCloudClusterImageCommandRequest) {
                    imageRepo = showMultiCloudClusterImageCommandRequest.imageRepo;
                    organization = showMultiCloudClusterImageCommandRequest.organization;
                    username = showMultiCloudClusterImageCommandRequest.username;
                    password = showMultiCloudClusterImageCommandRequest.password;
                    plugType = showMultiCloudClusterImageCommandRequest.plugType;
                } else {
                    imageRepo = showMultiCloudClusterImageCommandRequest['image_repo'];
                    organization = showMultiCloudClusterImageCommandRequest['organization'];
                    username = showMultiCloudClusterImageCommandRequest['username'];
                    password = showMultiCloudClusterImageCommandRequest['password'];
                    plugType = showMultiCloudClusterImageCommandRequest['plug_type'];
                }
            }

        
            if (imageRepo === null || imageRepo === undefined) {
                throw new RequiredError('imageRepo','Required parameter imageRepo was null or undefined when calling showMultiCloudClusterImageCommand.');
            }
            if (imageRepo !== null && imageRepo !== undefined) {
                localVarQueryParameter['image_repo'] = imageRepo;
            }
            if (organization === null || organization === undefined) {
                throw new RequiredError('organization','Required parameter organization was null or undefined when calling showMultiCloudClusterImageCommand.');
            }
            if (organization !== null && organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling showMultiCloudClusterImageCommand.');
            }
            if (username !== null && username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling showMultiCloudClusterImageCommand.');
            }
            if (password !== null && password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (plugType !== null && plugType !== undefined) {
                localVarQueryParameter['plug_type'] = plugType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取多云集群的代理安装脚本
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showMultiCloudClusterProxyScript(showMultiCloudClusterProxyScriptRequest?: ShowMultiCloudClusterProxyScriptRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters/{cluster_id}/agent/install-script",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (showMultiCloudClusterProxyScriptRequest !== null && showMultiCloudClusterProxyScriptRequest !== undefined) {
                if (showMultiCloudClusterProxyScriptRequest instanceof ShowMultiCloudClusterProxyScriptRequest) {
                    clusterId = showMultiCloudClusterProxyScriptRequest.clusterId;
                    enterpriseProjectId = showMultiCloudClusterProxyScriptRequest.enterpriseProjectId;
                } else {
                    clusterId = showMultiCloudClusterProxyScriptRequest['cluster_id'];
                    enterpriseProjectId = showMultiCloudClusterProxyScriptRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling showMultiCloudClusterProxyScript.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 同步多云集群的接入状态
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        syncMultiCloudClusterStatus(syncMultiCloudClusterStatusRequest?: SyncMultiCloudClusterStatusRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters/status-synchronize",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (syncMultiCloudClusterStatusRequest !== null && syncMultiCloudClusterStatusRequest !== undefined) {
                if (syncMultiCloudClusterStatusRequest instanceof SyncMultiCloudClusterStatusRequest) {
                    body = syncMultiCloudClusterStatusRequest.body
                    enterpriseProjectId = syncMultiCloudClusterStatusRequest.enterpriseProjectId;
                } else {
                    body = syncMultiCloudClusterStatusRequest['body'];
                    enterpriseProjectId = syncMultiCloudClusterStatusRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 更新集群daemonset
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateAgentDaemonset(updateAgentDaemonsetRequest?: UpdateAgentDaemonsetRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/container/kubernetes/clusters/{cluster_id}/daemonsets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let region;
            
            let enterpriseProjectId;

            if (updateAgentDaemonsetRequest !== null && updateAgentDaemonsetRequest !== undefined) {
                if (updateAgentDaemonsetRequest instanceof UpdateAgentDaemonsetRequest) {
                    clusterId = updateAgentDaemonsetRequest.clusterId;
                    region = updateAgentDaemonsetRequest.region;
                    enterpriseProjectId = updateAgentDaemonsetRequest.enterpriseProjectId;
                    body = updateAgentDaemonsetRequest.body
                } else {
                    clusterId = updateAgentDaemonsetRequest['cluster_id'];
                    region = updateAgentDaemonsetRequest['region'];
                    enterpriseProjectId = updateAgentDaemonsetRequest['enterprise_project_id'];
                    body = updateAgentDaemonsetRequest['body'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling updateAgentDaemonset.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 更新多云集群
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateMultiCloudClusters(updateMultiCloudClustersRequest?: UpdateMultiCloudClustersRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/container/kubernetes/multi-cloud/clusters/{cluster_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let clusterId;
            
            let enterpriseProjectId;

            if (updateMultiCloudClustersRequest !== null && updateMultiCloudClustersRequest !== undefined) {
                if (updateMultiCloudClustersRequest instanceof UpdateMultiCloudClustersRequest) {
                    clusterId = updateMultiCloudClustersRequest.clusterId;
                    body = updateMultiCloudClustersRequest.body
                    enterpriseProjectId = updateMultiCloudClustersRequest.enterpriseProjectId;
                } else {
                    clusterId = updateMultiCloudClustersRequest['cluster_id'];
                    body = updateMultiCloudClustersRequest['body'];
                    enterpriseProjectId = updateMultiCloudClustersRequest['enterprise_project_id'];
                }
            }

        
            if (clusterId === null || clusterId === undefined) {
            throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling updateMultiCloudClusters.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'cluster_id': clusterId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 编辑镜像仓接入信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateRegistry(updateRegistryRequest?: UpdateRegistryRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/image/registries/{id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let id;
            
            let enterpriseProjectId;

            if (updateRegistryRequest !== null && updateRegistryRequest !== undefined) {
                if (updateRegistryRequest instanceof UpdateRegistryRequest) {
                    id = updateRegistryRequest.id;
                    enterpriseProjectId = updateRegistryRequest.enterpriseProjectId;
                    body = updateRegistryRequest.body
                } else {
                    id = updateRegistryRequest['id'];
                    enterpriseProjectId = updateRegistryRequest['enterprise_project_id'];
                    body = updateRegistryRequest['body'];
                }
            }

        
            if (id === null || id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling updateRegistry.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'id': id, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 变更文件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listFileEvents(listFileEventsRequest?: ListFileEventsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/files/change-files",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let beginTime;
            
            let endTime;
            
            let fileName;
            
            let filePath;
            
            let changeType;
            
            let changeCategory;
            
            let status;

            if (listFileEventsRequest !== null && listFileEventsRequest !== undefined) {
                if (listFileEventsRequest instanceof ListFileEventsRequest) {
                    offset = listFileEventsRequest.offset;
                    limit = listFileEventsRequest.limit;
                    enterpriseProjectId = listFileEventsRequest.enterpriseProjectId;
                    hostName = listFileEventsRequest.hostName;
                    beginTime = listFileEventsRequest.beginTime;
                    endTime = listFileEventsRequest.endTime;
                    fileName = listFileEventsRequest.fileName;
                    filePath = listFileEventsRequest.filePath;
                    changeType = listFileEventsRequest.changeType;
                    changeCategory = listFileEventsRequest.changeCategory;
                    status = listFileEventsRequest.status;
                } else {
                    offset = listFileEventsRequest['offset'];
                    limit = listFileEventsRequest['limit'];
                    enterpriseProjectId = listFileEventsRequest['enterprise_project_id'];
                    hostName = listFileEventsRequest['host_name'];
                    beginTime = listFileEventsRequest['begin_time'];
                    endTime = listFileEventsRequest['end_time'];
                    fileName = listFileEventsRequest['file_name'];
                    filePath = listFileEventsRequest['file_path'];
                    changeType = listFileEventsRequest['change_type'];
                    changeCategory = listFileEventsRequest['change_category'];
                    status = listFileEventsRequest['status'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listFileEvents.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listFileEvents.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (changeType !== null && changeType !== undefined) {
                localVarQueryParameter['change_type'] = changeType;
            }
            if (changeCategory !== null && changeCategory !== undefined) {
                localVarQueryParameter['change_category'] = changeCategory;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 某个服务器变更文件信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listFileHostEventDetails(listFileHostEventDetailsRequest?: ListFileHostEventDetailsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/{host_id}/files/change-files",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let beginTime;
            
            let endTime;
            
            let fileName;
            
            let filePath;
            
            let changeType;
            
            let changeCategory;
            
            let status;

            if (listFileHostEventDetailsRequest !== null && listFileHostEventDetailsRequest !== undefined) {
                if (listFileHostEventDetailsRequest instanceof ListFileHostEventDetailsRequest) {
                    hostId = listFileHostEventDetailsRequest.hostId;
                    offset = listFileHostEventDetailsRequest.offset;
                    limit = listFileHostEventDetailsRequest.limit;
                    enterpriseProjectId = listFileHostEventDetailsRequest.enterpriseProjectId;
                    beginTime = listFileHostEventDetailsRequest.beginTime;
                    endTime = listFileHostEventDetailsRequest.endTime;
                    fileName = listFileHostEventDetailsRequest.fileName;
                    filePath = listFileHostEventDetailsRequest.filePath;
                    changeType = listFileHostEventDetailsRequest.changeType;
                    changeCategory = listFileHostEventDetailsRequest.changeCategory;
                    status = listFileHostEventDetailsRequest.status;
                } else {
                    hostId = listFileHostEventDetailsRequest['host_id'];
                    offset = listFileHostEventDetailsRequest['offset'];
                    limit = listFileHostEventDetailsRequest['limit'];
                    enterpriseProjectId = listFileHostEventDetailsRequest['enterprise_project_id'];
                    beginTime = listFileHostEventDetailsRequest['begin_time'];
                    endTime = listFileHostEventDetailsRequest['end_time'];
                    fileName = listFileHostEventDetailsRequest['file_name'];
                    filePath = listFileHostEventDetailsRequest['file_path'];
                    changeType = listFileHostEventDetailsRequest['change_type'];
                    changeCategory = listFileHostEventDetailsRequest['change_category'];
                    status = listFileHostEventDetailsRequest['status'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listFileHostEventDetails.');
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listFileHostEventDetails.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listFileHostEventDetails.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (changeType !== null && changeType !== undefined) {
                localVarQueryParameter['change_type'] = changeType;
            }
            if (changeCategory !== null && changeCategory !== undefined) {
                localVarQueryParameter['change_category'] = changeCategory;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 云服务器变更列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listFileHosts(listFileHostsRequest?: ListFileHostsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/files/change-host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let enterpriseProjectId;
            
            let beginTime;
            
            let endTime;
            
            let hostName;

            if (listFileHostsRequest !== null && listFileHostsRequest !== undefined) {
                if (listFileHostsRequest instanceof ListFileHostsRequest) {
                    offset = listFileHostsRequest.offset;
                    limit = listFileHostsRequest.limit;
                    enterpriseProjectId = listFileHostsRequest.enterpriseProjectId;
                    beginTime = listFileHostsRequest.beginTime;
                    endTime = listFileHostsRequest.endTime;
                    hostName = listFileHostsRequest.hostName;
                } else {
                    offset = listFileHostsRequest['offset'];
                    limit = listFileHostsRequest['limit'];
                    enterpriseProjectId = listFileHostsRequest['enterprise_project_id'];
                    beginTime = listFileHostsRequest['begin_time'];
                    endTime = listFileHostsRequest['end_time'];
                    hostName = listFileHostsRequest['host_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listFileHosts.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listFileHosts.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取服务器文件统计信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showFileStatistic(showFileStatisticRequest?: ShowFileStatisticRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/files/statistic",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let beginTime;
            
            let endTime;

            if (showFileStatisticRequest !== null && showFileStatisticRequest !== undefined) {
                if (showFileStatisticRequest instanceof ShowFileStatisticRequest) {
                    enterpriseProjectId = showFileStatisticRequest.enterpriseProjectId;
                    beginTime = showFileStatisticRequest.beginTime;
                    endTime = showFileStatisticRequest.endTime;
                } else {
                    enterpriseProjectId = showFileStatisticRequest['enterprise_project_id'];
                    beginTime = showFileStatisticRequest['begin_time'];
                    endTime = showFileStatisticRequest['end_time'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (beginTime !== null && beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取iac文件风险路径列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listIacFileRiskPaths(listIacFileRiskPathsRequest?: ListIacFileRiskPathsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/iac/file/risk/paths",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let fileId;
            
            let ruleId;
            
            let enterpriseProjectId;
            
            let resourceName;
            
            let resourceType;
            
            let namespace;

            if (listIacFileRiskPathsRequest !== null && listIacFileRiskPathsRequest !== undefined) {
                if (listIacFileRiskPathsRequest instanceof ListIacFileRiskPathsRequest) {
                    offset = listIacFileRiskPathsRequest.offset;
                    limit = listIacFileRiskPathsRequest.limit;
                    fileId = listIacFileRiskPathsRequest.fileId;
                    ruleId = listIacFileRiskPathsRequest.ruleId;
                    enterpriseProjectId = listIacFileRiskPathsRequest.enterpriseProjectId;
                    resourceName = listIacFileRiskPathsRequest.resourceName;
                    resourceType = listIacFileRiskPathsRequest.resourceType;
                    namespace = listIacFileRiskPathsRequest.namespace;
                } else {
                    offset = listIacFileRiskPathsRequest['offset'];
                    limit = listIacFileRiskPathsRequest['limit'];
                    fileId = listIacFileRiskPathsRequest['file_id'];
                    ruleId = listIacFileRiskPathsRequest['rule_id'];
                    enterpriseProjectId = listIacFileRiskPathsRequest['enterprise_project_id'];
                    resourceName = listIacFileRiskPathsRequest['resource_name'];
                    resourceType = listIacFileRiskPathsRequest['resource_type'];
                    namespace = listIacFileRiskPathsRequest['namespace'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listIacFileRiskPaths.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listIacFileRiskPaths.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling listIacFileRiskPaths.');
            }
            if (fileId !== null && fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling listIacFileRiskPaths.');
            }
            if (ruleId !== null && ruleId !== undefined) {
                localVarQueryParameter['rule_id'] = ruleId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (resourceName !== null && resourceName !== undefined) {
                localVarQueryParameter['resource_name'] = resourceName;
            }
            if (resourceType !== null && resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }
            if (namespace !== null && namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取iac文件风险列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listIacFileRisks(listIacFileRisksRequest?: ListIacFileRisksRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/iac/file/risks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let fileId;
            
            let enterpriseProjectId;
            
            let riskName;
            
            let riskLevel;
            
            let riskCategory;

            if (listIacFileRisksRequest !== null && listIacFileRisksRequest !== undefined) {
                if (listIacFileRisksRequest instanceof ListIacFileRisksRequest) {
                    offset = listIacFileRisksRequest.offset;
                    limit = listIacFileRisksRequest.limit;
                    fileId = listIacFileRisksRequest.fileId;
                    enterpriseProjectId = listIacFileRisksRequest.enterpriseProjectId;
                    riskName = listIacFileRisksRequest.riskName;
                    riskLevel = listIacFileRisksRequest.riskLevel;
                    riskCategory = listIacFileRisksRequest.riskCategory;
                } else {
                    offset = listIacFileRisksRequest['offset'];
                    limit = listIacFileRisksRequest['limit'];
                    fileId = listIacFileRisksRequest['file_id'];
                    enterpriseProjectId = listIacFileRisksRequest['enterprise_project_id'];
                    riskName = listIacFileRisksRequest['risk_name'];
                    riskLevel = listIacFileRisksRequest['risk_level'];
                    riskCategory = listIacFileRisksRequest['risk_category'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listIacFileRisks.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listIacFileRisks.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling listIacFileRisks.');
            }
            if (fileId !== null && fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (riskName !== null && riskName !== undefined) {
                localVarQueryParameter['risk_name'] = riskName;
            }
            if (riskLevel !== null && riskLevel !== undefined) {
                localVarQueryParameter['risk_level'] = riskLevel;
            }
            if (riskCategory !== null && riskCategory !== undefined) {
                localVarQueryParameter['risk_category'] = riskCategory;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取iac文件列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listIacFiles(listIacFilesRequest?: ListIacFilesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/container/iac/files",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let offset;
            
            let limit;
            
            let scanType;
            
            let enterpriseProjectId;
            
            let fileId;
            
            let fileName;
            
            let fileType;
            
            let risky;
            
            let cicdId;
            
            let cicdName;

            if (listIacFilesRequest !== null && listIacFilesRequest !== undefined) {
                if (listIacFilesRequest instanceof ListIacFilesRequest) {
                    offset = listIacFilesRequest.offset;
                    limit = listIacFilesRequest.limit;
                    scanType = listIacFilesRequest.scanType;
                    enterpriseProjectId = listIacFilesRequest.enterpriseProjectId;
                    fileId = listIacFilesRequest.fileId;
                    fileName = listIacFilesRequest.fileName;
                    fileType = listIacFilesRequest.fileType;
                    risky = listIacFilesRequest.risky;
                    cicdId = listIacFilesRequest.cicdId;
                    cicdName = listIacFilesRequest.cicdName;
                } else {
                    offset = listIacFilesRequest['offset'];
                    limit = listIacFilesRequest['limit'];
                    scanType = listIacFilesRequest['scan_type'];
                    enterpriseProjectId = listIacFilesRequest['enterprise_project_id'];
                    fileId = listIacFilesRequest['file_id'];
                    fileName = listIacFilesRequest['file_name'];
                    fileType = listIacFilesRequest['file_type'];
                    risky = listIacFilesRequest['risky'];
                    cicdId = listIacFilesRequest['cicd_id'];
                    cicdName = listIacFilesRequest['cicd_name'];
                }
            }

        
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listIacFiles.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listIacFiles.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (scanType === null || scanType === undefined) {
                throw new RequiredError('scanType','Required parameter scanType was null or undefined when calling listIacFiles.');
            }
            if (scanType !== null && scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (fileId !== null && fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            if (fileName !== null && fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            if (fileType !== null && fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }
            if (risky !== null && risky !== undefined) {
                localVarQueryParameter['risky'] = risky;
            }
            if (cicdId !== null && cicdId !== undefined) {
                localVarQueryParameter['cicd_id'] = cicdId;
            }
            if (cicdName !== null && cicdName !== undefined) {
                localVarQueryParameter['cicd_name'] = cicdName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 处置镜像漏洞
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        handleImageVulnerability(handleImageVulnerabilityRequest?: HandleImageVulnerabilityRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/image/vulnerability/handle",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (handleImageVulnerabilityRequest !== null && handleImageVulnerabilityRequest !== undefined) {
                if (handleImageVulnerabilityRequest instanceof HandleImageVulnerabilityRequest) {
                    body = handleImageVulnerabilityRequest.body
                    enterpriseProjectId = handleImageVulnerabilityRequest.enterpriseProjectId;
                } else {
                    body = handleImageVulnerabilityRequest['body'];
                    enterpriseProjectId = handleImageVulnerabilityRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像白名单列表，目前仅支持漏洞白名单
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageWhiteLists(listImageWhiteListsRequest?: ListImageWhiteListsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/whitelists",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let globalImageType;
            
            let type;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let vulName;
            
            let vulType;

            if (listImageWhiteListsRequest !== null && listImageWhiteListsRequest !== undefined) {
                if (listImageWhiteListsRequest instanceof ListImageWhiteListsRequest) {
                    globalImageType = listImageWhiteListsRequest.globalImageType;
                    type = listImageWhiteListsRequest.type;
                    enterpriseProjectId = listImageWhiteListsRequest.enterpriseProjectId;
                    offset = listImageWhiteListsRequest.offset;
                    limit = listImageWhiteListsRequest.limit;
                    vulName = listImageWhiteListsRequest.vulName;
                    vulType = listImageWhiteListsRequest.vulType;
                } else {
                    globalImageType = listImageWhiteListsRequest['global_image_type'];
                    type = listImageWhiteListsRequest['type'];
                    enterpriseProjectId = listImageWhiteListsRequest['enterprise_project_id'];
                    offset = listImageWhiteListsRequest['offset'];
                    limit = listImageWhiteListsRequest['limit'];
                    vulName = listImageWhiteListsRequest['vul_name'];
                    vulType = listImageWhiteListsRequest['vul_type'];
                }
            }

        
            if (globalImageType === null || globalImageType === undefined) {
                throw new RequiredError('globalImageType','Required parameter globalImageType was null or undefined when calling listImageWhiteLists.');
            }
            if (globalImageType !== null && globalImageType !== undefined) {
                localVarQueryParameter['global_image_type'] = globalImageType;
            }
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listImageWhiteLists.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            if (vulType !== null && vulType !== undefined) {
                localVarQueryParameter['vul_type'] = vulType;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看受漏洞影响的镜像列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulAffectImages(listVulAffectImagesRequest?: ListVulAffectImagesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/images",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let isHandled;
            
            let vulId;
            
            let type;
            
            let imageType;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let repairNecessity;
            
            let imageId;
            
            let imageName;
            
            let registryName;
            
            let registryType;
            
            let status;
            
            let clusterId;

            if (listVulAffectImagesRequest !== null && listVulAffectImagesRequest !== undefined) {
                if (listVulAffectImagesRequest instanceof ListVulAffectImagesRequest) {
                    isHandled = listVulAffectImagesRequest.isHandled;
                    vulId = listVulAffectImagesRequest.vulId;
                    type = listVulAffectImagesRequest.type;
                    imageType = listVulAffectImagesRequest.imageType;
                    enterpriseProjectId = listVulAffectImagesRequest.enterpriseProjectId;
                    offset = listVulAffectImagesRequest.offset;
                    limit = listVulAffectImagesRequest.limit;
                    repairNecessity = listVulAffectImagesRequest.repairNecessity;
                    imageId = listVulAffectImagesRequest.imageId;
                    imageName = listVulAffectImagesRequest.imageName;
                    registryName = listVulAffectImagesRequest.registryName;
                    registryType = listVulAffectImagesRequest.registryType;
                    status = listVulAffectImagesRequest.status;
                    clusterId = listVulAffectImagesRequest.clusterId;
                } else {
                    isHandled = listVulAffectImagesRequest['is_handled'];
                    vulId = listVulAffectImagesRequest['vul_id'];
                    type = listVulAffectImagesRequest['type'];
                    imageType = listVulAffectImagesRequest['image_type'];
                    enterpriseProjectId = listVulAffectImagesRequest['enterprise_project_id'];
                    offset = listVulAffectImagesRequest['offset'];
                    limit = listVulAffectImagesRequest['limit'];
                    repairNecessity = listVulAffectImagesRequest['repair_necessity'];
                    imageId = listVulAffectImagesRequest['image_id'];
                    imageName = listVulAffectImagesRequest['image_name'];
                    registryName = listVulAffectImagesRequest['registry_name'];
                    registryType = listVulAffectImagesRequest['registry_type'];
                    status = listVulAffectImagesRequest['status'];
                    clusterId = listVulAffectImagesRequest['cluster_id'];
                }
            }

        
            if (isHandled === null || isHandled === undefined) {
                throw new RequiredError('isHandled','Required parameter isHandled was null or undefined when calling listVulAffectImages.');
            }
            if (isHandled !== null && isHandled !== undefined) {
                localVarQueryParameter['is_handled'] = isHandled;
            }
            if (vulId === null || vulId === undefined) {
                throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulAffectImages.');
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listVulAffectImages.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (imageType === null || imageType === undefined) {
                throw new RequiredError('imageType','Required parameter imageType was null or undefined when calling listVulAffectImages.');
            }
            if (imageType !== null && imageType !== undefined) {
                localVarQueryParameter['image_type'] = imageType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (repairNecessity !== null && repairNecessity !== undefined) {
                localVarQueryParameter['repair_necessity'] = repairNecessity;
            }
            if (imageId !== null && imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }
            if (imageName !== null && imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }
            if (registryName !== null && registryName !== undefined) {
                localVarQueryParameter['registry_name'] = registryName;
            }
            if (registryType !== null && registryType !== undefined) {
                localVarQueryParameter['registry_type'] = registryType;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询镜像白名单详情，需要分页查询白名单关联的镜像列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showImageWhiteListDetail(showImageWhiteListDetailRequest?: ShowImageWhiteListDetailRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/whitelists/{id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let id;
            
            let globalImageType;
            
            let type;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;

            if (showImageWhiteListDetailRequest !== null && showImageWhiteListDetailRequest !== undefined) {
                if (showImageWhiteListDetailRequest instanceof ShowImageWhiteListDetailRequest) {
                    id = showImageWhiteListDetailRequest.id;
                    globalImageType = showImageWhiteListDetailRequest.globalImageType;
                    type = showImageWhiteListDetailRequest.type;
                    enterpriseProjectId = showImageWhiteListDetailRequest.enterpriseProjectId;
                    offset = showImageWhiteListDetailRequest.offset;
                    limit = showImageWhiteListDetailRequest.limit;
                } else {
                    id = showImageWhiteListDetailRequest['id'];
                    globalImageType = showImageWhiteListDetailRequest['global_image_type'];
                    type = showImageWhiteListDetailRequest['type'];
                    enterpriseProjectId = showImageWhiteListDetailRequest['enterprise_project_id'];
                    offset = showImageWhiteListDetailRequest['offset'];
                    limit = showImageWhiteListDetailRequest['limit'];
                }
            }

        
            if (id === null || id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling showImageWhiteListDetail.');
            }
            if (globalImageType === null || globalImageType === undefined) {
                throw new RequiredError('globalImageType','Required parameter globalImageType was null or undefined when calling showImageWhiteListDetail.');
            }
            if (globalImageType !== null && globalImageType !== undefined) {
                localVarQueryParameter['global_image_type'] = globalImageType;
            }
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling showImageWhiteListDetail.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'id': id, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取扫描任务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listImageScanTask(listImageScanTaskRequest?: ListImageScanTaskRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/image/tasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let type;
            
            let enterpriseProjectId;
            
            let globalImageType;
            
            let offset;
            
            let limit;
            
            let taskType;
            
            let taskName;
            
            let taskId;
            
            let createTime;
            
            let endTime;
            
            let taskStatus;
            
            let scanScope;

            if (listImageScanTaskRequest !== null && listImageScanTaskRequest !== undefined) {
                if (listImageScanTaskRequest instanceof ListImageScanTaskRequest) {
                    type = listImageScanTaskRequest.type;
                    enterpriseProjectId = listImageScanTaskRequest.enterpriseProjectId;
                    globalImageType = listImageScanTaskRequest.globalImageType;
                    offset = listImageScanTaskRequest.offset;
                    limit = listImageScanTaskRequest.limit;
                    taskType = listImageScanTaskRequest.taskType;
                    taskName = listImageScanTaskRequest.taskName;
                    taskId = listImageScanTaskRequest.taskId;
                    createTime = listImageScanTaskRequest.createTime;
                    endTime = listImageScanTaskRequest.endTime;
                    taskStatus = listImageScanTaskRequest.taskStatus;
                    scanScope = listImageScanTaskRequest.scanScope;
                } else {
                    type = listImageScanTaskRequest['type'];
                    enterpriseProjectId = listImageScanTaskRequest['enterprise_project_id'];
                    globalImageType = listImageScanTaskRequest['global_image_type'];
                    offset = listImageScanTaskRequest['offset'];
                    limit = listImageScanTaskRequest['limit'];
                    taskType = listImageScanTaskRequest['task_type'];
                    taskName = listImageScanTaskRequest['task_name'];
                    taskId = listImageScanTaskRequest['task_id'];
                    createTime = listImageScanTaskRequest['create_time'];
                    endTime = listImageScanTaskRequest['end_time'];
                    taskStatus = listImageScanTaskRequest['task_status'];
                    scanScope = listImageScanTaskRequest['scan_scope'];
                }
            }

        
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listImageScanTask.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (globalImageType !== null && globalImageType !== undefined) {
                localVarQueryParameter['global_image_type'] = globalImageType;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (taskType !== null && taskType !== undefined) {
                localVarQueryParameter['task_type'] = taskType;
            }
            if (taskName !== null && taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }
            if (taskId !== null && taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }
            if (createTime !== null && createTime !== undefined) {
                localVarQueryParameter['create_time'] = createTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (taskStatus !== null && taskStatus !== undefined) {
                localVarQueryParameter['task_status'] = taskStatus;
            }
            if (scanScope !== null && scanScope !== undefined) {
                localVarQueryParameter['scan_scope'] = scanScope;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 复制策略组，选择已有的旗舰版或容器版策略组，复制生成新的策略组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addPolicyGroup(addPolicyGroupRequest?: AddPolicyGroupRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/policy/group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (addPolicyGroupRequest !== null && addPolicyGroupRequest !== undefined) {
                if (addPolicyGroupRequest instanceof AddPolicyGroupRequest) {
                    body = addPolicyGroupRequest.body
                    enterpriseProjectId = addPolicyGroupRequest.enterpriseProjectId;
                } else {
                    body = addPolicyGroupRequest['body'];
                    enterpriseProjectId = addPolicyGroupRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 为已经开启旗舰版或容器版防护的服务器部署策略组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        associatePolicyGroup(associatePolicyGroupRequest?: AssociatePolicyGroupRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/policy/deploy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let region;
            
            let enterpriseProjectId;

            if (associatePolicyGroupRequest !== null && associatePolicyGroupRequest !== undefined) {
                if (associatePolicyGroupRequest instanceof AssociatePolicyGroupRequest) {
                    body = associatePolicyGroupRequest.body
                    region = associatePolicyGroupRequest.region;
                    enterpriseProjectId = associatePolicyGroupRequest.enterpriseProjectId;
                } else {
                    body = associatePolicyGroupRequest['body'];
                    region = associatePolicyGroupRequest['region'];
                    enterpriseProjectId = associatePolicyGroupRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改策略组相关内容，如防护模式
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changePolicyGroup(changePolicyGroupRequest?: ChangePolicyGroupRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/policy/group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changePolicyGroupRequest !== null && changePolicyGroupRequest !== undefined) {
                if (changePolicyGroupRequest instanceof ChangePolicyGroupRequest) {
                    body = changePolicyGroupRequest.body
                    enterpriseProjectId = changePolicyGroupRequest.enterpriseProjectId;
                } else {
                    body = changePolicyGroupRequest['body'];
                    enterpriseProjectId = changePolicyGroupRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除策略组，支持删除非默认并且未关联服务器的策略组
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deletePolicyGroup(deletePolicyGroupRequest?: DeletePolicyGroupRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/policy/group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deletePolicyGroupRequest !== null && deletePolicyGroupRequest !== undefined) {
                if (deletePolicyGroupRequest instanceof DeletePolicyGroupRequest) {
                    body = deletePolicyGroupRequest.body
                    enterpriseProjectId = deletePolicyGroupRequest.enterpriseProjectId;
                } else {
                    body = deletePolicyGroupRequest['body'];
                    enterpriseProjectId = deletePolicyGroupRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询策略组列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPolicyGroup(listPolicyGroupRequest?: ListPolicyGroupRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/policy/groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let groupName;
            
            let containerMode;
            
            let groupId;

            if (listPolicyGroupRequest !== null && listPolicyGroupRequest !== undefined) {
                if (listPolicyGroupRequest instanceof ListPolicyGroupRequest) {
                    enterpriseProjectId = listPolicyGroupRequest.enterpriseProjectId;
                    offset = listPolicyGroupRequest.offset;
                    limit = listPolicyGroupRequest.limit;
                    groupName = listPolicyGroupRequest.groupName;
                    containerMode = listPolicyGroupRequest.containerMode;
                    groupId = listPolicyGroupRequest.groupId;
                } else {
                    enterpriseProjectId = listPolicyGroupRequest['enterprise_project_id'];
                    offset = listPolicyGroupRequest['offset'];
                    limit = listPolicyGroupRequest['limit'];
                    groupName = listPolicyGroupRequest['group_name'];
                    containerMode = listPolicyGroupRequest['container_mode'];
                    groupId = listPolicyGroupRequest['group_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (containerMode !== null && containerMode !== undefined) {
                localVarQueryParameter['container_mode'] = containerMode;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 按需计费的防护配额转包年/包月过程中，会将防护配额锁定，已锁定的防护配额不支持转包年/包月，通过该接口可查询主机安全防护配额的锁定状态。
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listLockedStatus(listLockedStatusRequest?: ListLockedStatusRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/resources/{resource_id}/locked-status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let resourceId;
            
            let enterpriseProjectId;

            if (listLockedStatusRequest !== null && listLockedStatusRequest !== undefined) {
                if (listLockedStatusRequest instanceof ListLockedStatusRequest) {
                    resourceId = listLockedStatusRequest.resourceId;
                    enterpriseProjectId = listLockedStatusRequest.enterpriseProjectId;
                } else {
                    resourceId = listLockedStatusRequest['resource_id'];
                    enterpriseProjectId = listLockedStatusRequest['enterprise_project_id'];
                }
            }

        
            if (resourceId === null || resourceId === undefined) {
            throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listLockedStatus.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'resource_id': resourceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询集群的安全体检报告信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSecurityCheckClusterReport(showSecurityCheckClusterReportRequest?: ShowSecurityCheckClusterReportRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/security-check/containers/cluster-reports/{report_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let reportId;
            
            let enterpriseProjectId;
            
            let xLanguage;

            if (showSecurityCheckClusterReportRequest !== null && showSecurityCheckClusterReportRequest !== undefined) {
                if (showSecurityCheckClusterReportRequest instanceof ShowSecurityCheckClusterReportRequest) {
                    reportId = showSecurityCheckClusterReportRequest.reportId;
                    enterpriseProjectId = showSecurityCheckClusterReportRequest.enterpriseProjectId;
                    xLanguage = showSecurityCheckClusterReportRequest.xLanguage;
                } else {
                    reportId = showSecurityCheckClusterReportRequest['report_id'];
                    enterpriseProjectId = showSecurityCheckClusterReportRequest['enterprise_project_id'];
                    xLanguage = showSecurityCheckClusterReportRequest['x-language'];
                }
            }

        
            if (reportId === null || reportId === undefined) {
            throw new RequiredError('reportId','Required parameter reportId was null or undefined when calling showSecurityCheckClusterReport.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (xLanguage !== undefined && xLanguage !== null) {
                localVarHeaderParameter['x-language'] = String(xLanguage);
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'report_id': reportId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createTask(createTaskRequest?: CreateTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/common/task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createTaskRequest !== null && createTaskRequest !== undefined) {
                if (createTaskRequest instanceof CreateTaskRequest) {
                    body = createTaskRequest.body
                    enterpriseProjectId = createTaskRequest.enterpriseProjectId;
                } else {
                    body = createTaskRequest['body'];
                    enterpriseProjectId = createTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询当前任务关联的资源列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listTaskResources(listTaskResourcesRequest?: ListTaskResourcesRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/common/tasks/{task_id}/resources/batch-query",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let taskId;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;

            if (listTaskResourcesRequest !== null && listTaskResourcesRequest !== undefined) {
                if (listTaskResourcesRequest instanceof ListTaskResourcesRequest) {
                    taskId = listTaskResourcesRequest.taskId;
                    enterpriseProjectId = listTaskResourcesRequest.enterpriseProjectId;
                    offset = listTaskResourcesRequest.offset;
                    limit = listTaskResourcesRequest.limit;
                    body = listTaskResourcesRequest.body
                } else {
                    taskId = listTaskResourcesRequest['task_id'];
                    enterpriseProjectId = listTaskResourcesRequest['enterprise_project_id'];
                    offset = listTaskResourcesRequest['offset'];
                    limit = listTaskResourcesRequest['limit'];
                    body = listTaskResourcesRequest['body'];
                }
            }

        
            if (taskId === null || taskId === undefined) {
            throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling listTaskResources.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'task_id': taskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询任务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listTasks(listTasksRequest?: ListTasksRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/common/tasks/batch-query",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;

            if (listTasksRequest !== null && listTasksRequest !== undefined) {
                if (listTasksRequest instanceof ListTasksRequest) {
                    body = listTasksRequest.body
                    enterpriseProjectId = listTasksRequest.enterpriseProjectId;
                    offset = listTasksRequest.offset;
                    limit = listTasksRequest.limit;
                } else {
                    body = listTasksRequest['body'];
                    enterpriseProjectId = listTasksRequest['enterprise_project_id'];
                    offset = listTasksRequest['offset'];
                    limit = listTasksRequest['limit'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询任务统计数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showTaskStatistics(showTaskStatisticsRequest?: ShowTaskStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/common/task-statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let taskType;
            
            let enterpriseProjectId;

            if (showTaskStatisticsRequest !== null && showTaskStatisticsRequest !== undefined) {
                if (showTaskStatisticsRequest instanceof ShowTaskStatisticsRequest) {
                    taskType = showTaskStatisticsRequest.taskType;
                    enterpriseProjectId = showTaskStatisticsRequest.enterpriseProjectId;
                } else {
                    taskType = showTaskStatisticsRequest['task_type'];
                    enterpriseProjectId = showTaskStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (taskType === null || taskType === undefined) {
                throw new RequiredError('taskType','Required parameter taskType was null or undefined when calling showTaskStatistics.');
            }
            if (taskType !== null && taskType !== undefined) {
                localVarQueryParameter['task_type'] = taskType;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改漏洞扫描策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeVulScanPolicy(changeVulScanPolicyRequest?: ChangeVulScanPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/vulnerability/scan-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (changeVulScanPolicyRequest !== null && changeVulScanPolicyRequest !== undefined) {
                if (changeVulScanPolicyRequest instanceof ChangeVulScanPolicyRequest) {
                    body = changeVulScanPolicyRequest.body
                    enterpriseProjectId = changeVulScanPolicyRequest.enterpriseProjectId;
                } else {
                    body = changeVulScanPolicyRequest['body'];
                    enterpriseProjectId = changeVulScanPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建漏洞扫描任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createVulnerabilityScanTask(createVulnerabilityScanTaskRequest?: CreateVulnerabilityScanTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/scan-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (createVulnerabilityScanTaskRequest !== null && createVulnerabilityScanTaskRequest !== undefined) {
                if (createVulnerabilityScanTaskRequest instanceof CreateVulnerabilityScanTaskRequest) {
                    body = createVulnerabilityScanTaskRequest.body
                    enterpriseProjectId = createVulnerabilityScanTaskRequest.enterpriseProjectId;
                } else {
                    body = createVulnerabilityScanTaskRequest['body'];
                    enterpriseProjectId = createVulnerabilityScanTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建历史处理的漏洞导出任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportHandledVulnerabilities(exportHandledVulnerabilitiesRequest?: ExportHandledVulnerabilitiesRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/history/export-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (exportHandledVulnerabilitiesRequest !== null && exportHandledVulnerabilitiesRequest !== undefined) {
                if (exportHandledVulnerabilitiesRequest instanceof ExportHandledVulnerabilitiesRequest) {
                    body = exportHandledVulnerabilitiesRequest.body
                    enterpriseProjectId = exportHandledVulnerabilitiesRequest.enterpriseProjectId;
                } else {
                    body = exportHandledVulnerabilitiesRequest['body'];
                    enterpriseProjectId = exportHandledVulnerabilitiesRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 创建漏洞处置历史记录的导出任务
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportVulHandleHistory(exportVulHandleHistoryRequest?: ExportVulHandleHistoryRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/handle-history/export-task",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (exportVulHandleHistoryRequest !== null && exportVulHandleHistoryRequest !== undefined) {
                if (exportVulHandleHistoryRequest instanceof ExportVulHandleHistoryRequest) {
                    body = exportVulHandleHistoryRequest.body
                    enterpriseProjectId = exportVulHandleHistoryRequest.enterpriseProjectId;
                } else {
                    body = exportVulHandleHistoryRequest['body'];
                    enterpriseProjectId = exportVulHandleHistoryRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 导出漏洞及漏洞影响的主机的相关信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportVuls(exportVulsRequest?: ExportVulsRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vul/export",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let exportSize;
            
            let category;
            
            let enterpriseProjectId;
            
            let type;
            
            let vulId;
            
            let vulName;
            
            let hostId;
            
            let limit;
            
            let offset;
            
            let repairPriority;
            
            let handleStatus;
            
            let cveId;
            
            let labelList;
            
            let status;
            
            let assetValue;
            
            let groupName;

            if (exportVulsRequest !== null && exportVulsRequest !== undefined) {
                if (exportVulsRequest instanceof ExportVulsRequest) {
                    exportSize = exportVulsRequest.exportSize;
                    category = exportVulsRequest.category;
                    body = exportVulsRequest.body
                    enterpriseProjectId = exportVulsRequest.enterpriseProjectId;
                    type = exportVulsRequest.type;
                    vulId = exportVulsRequest.vulId;
                    vulName = exportVulsRequest.vulName;
                    hostId = exportVulsRequest.hostId;
                    limit = exportVulsRequest.limit;
                    offset = exportVulsRequest.offset;
                    repairPriority = exportVulsRequest.repairPriority;
                    handleStatus = exportVulsRequest.handleStatus;
                    cveId = exportVulsRequest.cveId;
                    labelList = exportVulsRequest.labelList;
                    status = exportVulsRequest.status;
                    assetValue = exportVulsRequest.assetValue;
                    groupName = exportVulsRequest.groupName;
                } else {
                    exportSize = exportVulsRequest['export_size'];
                    category = exportVulsRequest['category'];
                    body = exportVulsRequest['body'];
                    enterpriseProjectId = exportVulsRequest['enterprise_project_id'];
                    type = exportVulsRequest['type'];
                    vulId = exportVulsRequest['vul_id'];
                    vulName = exportVulsRequest['vul_name'];
                    hostId = exportVulsRequest['host_id'];
                    limit = exportVulsRequest['limit'];
                    offset = exportVulsRequest['offset'];
                    repairPriority = exportVulsRequest['repair_priority'];
                    handleStatus = exportVulsRequest['handle_status'];
                    cveId = exportVulsRequest['cve_id'];
                    labelList = exportVulsRequest['label_list'];
                    status = exportVulsRequest['status'];
                    assetValue = exportVulsRequest['asset_value'];
                    groupName = exportVulsRequest['group_name'];
                }
            }

        
            if (exportSize === null || exportSize === undefined) {
                throw new RequiredError('exportSize','Required parameter exportSize was null or undefined when calling exportVuls.');
            }
            if (exportSize !== null && exportSize !== undefined) {
                localVarQueryParameter['export_size'] = exportSize;
            }
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling exportVuls.');
            }
            if (category !== null && category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (repairPriority !== null && repairPriority !== undefined) {
                localVarQueryParameter['repair_priority'] = repairPriority;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (cveId !== null && cveId !== undefined) {
                localVarQueryParameter['cve_id'] = cveId;
            }
            if (labelList !== null && labelList !== undefined) {
                localVarQueryParameter['label_list'] = labelList;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单台服务器漏洞信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHostVuls(listHostVulsRequest?: ListHostVulsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/host/{host_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let type;
            
            let vulName;
            
            let handleStatus;
            
            let status;
            
            let repairPriority;

            if (listHostVulsRequest !== null && listHostVulsRequest !== undefined) {
                if (listHostVulsRequest instanceof ListHostVulsRequest) {
                    hostId = listHostVulsRequest.hostId;
                    enterpriseProjectId = listHostVulsRequest.enterpriseProjectId;
                    limit = listHostVulsRequest.limit;
                    offset = listHostVulsRequest.offset;
                    type = listHostVulsRequest.type;
                    vulName = listHostVulsRequest.vulName;
                    handleStatus = listHostVulsRequest.handleStatus;
                    status = listHostVulsRequest.status;
                    repairPriority = listHostVulsRequest.repairPriority;
                } else {
                    hostId = listHostVulsRequest['host_id'];
                    enterpriseProjectId = listHostVulsRequest['enterprise_project_id'];
                    limit = listHostVulsRequest['limit'];
                    offset = listHostVulsRequest['offset'];
                    type = listHostVulsRequest['type'];
                    vulName = listHostVulsRequest['vul_name'];
                    handleStatus = listHostVulsRequest['handle_status'];
                    status = listHostVulsRequest['status'];
                    repairPriority = listHostVulsRequest['repair_priority'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling listHostVuls.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (repairPriority !== null && repairPriority !== undefined) {
                localVarQueryParameter['repair_priority'] = repairPriority;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单个漏洞影响的容器app信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulContainerApps(listVulContainerAppsRequest?: ListVulContainerAppsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/container/apps",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let containerId;
            
            let vulId;
            
            let handleStatus;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;

            if (listVulContainerAppsRequest !== null && listVulContainerAppsRequest !== undefined) {
                if (listVulContainerAppsRequest instanceof ListVulContainerAppsRequest) {
                    containerId = listVulContainerAppsRequest.containerId;
                    vulId = listVulContainerAppsRequest.vulId;
                    handleStatus = listVulContainerAppsRequest.handleStatus;
                    enterpriseProjectId = listVulContainerAppsRequest.enterpriseProjectId;
                    limit = listVulContainerAppsRequest.limit;
                    offset = listVulContainerAppsRequest.offset;
                } else {
                    containerId = listVulContainerAppsRequest['container_id'];
                    vulId = listVulContainerAppsRequest['vul_id'];
                    handleStatus = listVulContainerAppsRequest['handle_status'];
                    enterpriseProjectId = listVulContainerAppsRequest['enterprise_project_id'];
                    limit = listVulContainerAppsRequest['limit'];
                    offset = listVulContainerAppsRequest['offset'];
                }
            }

        
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listVulContainerApps.');
            }
            if (containerId !== null && containerId !== undefined) {
                localVarQueryParameter['container_id'] = containerId;
            }
            if (vulId === null || vulId === undefined) {
                throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulContainerApps.');
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (handleStatus === null || handleStatus === undefined) {
                throw new RequiredError('handleStatus','Required parameter handleStatus was null or undefined when calling listVulContainerApps.');
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单个漏洞影响的容器信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulContainers(listVulContainersRequest?: ListVulContainersRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/containers",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let vulId;
            
            let type;
            
            let enterpriseProjectId;
            
            let containerName;
            
            let clusterId;
            
            let status;
            
            let handleStatus;
            
            let severityLevel;
            
            let minScanTime;
            
            let maxScanTime;
            
            let limit;
            
            let offset;

            if (listVulContainersRequest !== null && listVulContainersRequest !== undefined) {
                if (listVulContainersRequest instanceof ListVulContainersRequest) {
                    vulId = listVulContainersRequest.vulId;
                    type = listVulContainersRequest.type;
                    enterpriseProjectId = listVulContainersRequest.enterpriseProjectId;
                    containerName = listVulContainersRequest.containerName;
                    clusterId = listVulContainersRequest.clusterId;
                    status = listVulContainersRequest.status;
                    handleStatus = listVulContainersRequest.handleStatus;
                    severityLevel = listVulContainersRequest.severityLevel;
                    minScanTime = listVulContainersRequest.minScanTime;
                    maxScanTime = listVulContainersRequest.maxScanTime;
                    limit = listVulContainersRequest.limit;
                    offset = listVulContainersRequest.offset;
                } else {
                    vulId = listVulContainersRequest['vul_id'];
                    type = listVulContainersRequest['type'];
                    enterpriseProjectId = listVulContainersRequest['enterprise_project_id'];
                    containerName = listVulContainersRequest['container_name'];
                    clusterId = listVulContainersRequest['cluster_id'];
                    status = listVulContainersRequest['status'];
                    handleStatus = listVulContainersRequest['handle_status'];
                    severityLevel = listVulContainersRequest['severity_level'];
                    minScanTime = listVulContainersRequest['min_scan_time'];
                    maxScanTime = listVulContainersRequest['max_scan_time'];
                    limit = listVulContainersRequest['limit'];
                    offset = listVulContainersRequest['offset'];
                }
            }

        
            if (vulId === null || vulId === undefined) {
                throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulContainers.');
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listVulContainers.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (containerName !== null && containerName !== undefined) {
                localVarQueryParameter['container_name'] = containerName;
            }
            if (clusterId !== null && clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severityLevel !== null && severityLevel !== undefined) {
                localVarQueryParameter['severity_level'] = severityLevel;
            }
            if (minScanTime !== null && minScanTime !== undefined) {
                localVarQueryParameter['min_scan_time'] = minScanTime;
            }
            if (maxScanTime !== null && maxScanTime !== undefined) {
                localVarQueryParameter['max_scan_time'] = maxScanTime;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询单个漏洞影响的云服务器信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulHosts(listVulHostsRequest?: ListVulHostsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let vulId;
            
            let type;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let hostName;
            
            let hostIp;
            
            let status;
            
            let assetValue;
            
            let groupName;
            
            let handleStatus;
            
            let severityLevel;
            
            let isAffectBusiness;
            
            let repairPriority;

            if (listVulHostsRequest !== null && listVulHostsRequest !== undefined) {
                if (listVulHostsRequest instanceof ListVulHostsRequest) {
                    vulId = listVulHostsRequest.vulId;
                    type = listVulHostsRequest.type;
                    enterpriseProjectId = listVulHostsRequest.enterpriseProjectId;
                    limit = listVulHostsRequest.limit;
                    offset = listVulHostsRequest.offset;
                    hostName = listVulHostsRequest.hostName;
                    hostIp = listVulHostsRequest.hostIp;
                    status = listVulHostsRequest.status;
                    assetValue = listVulHostsRequest.assetValue;
                    groupName = listVulHostsRequest.groupName;
                    handleStatus = listVulHostsRequest.handleStatus;
                    severityLevel = listVulHostsRequest.severityLevel;
                    isAffectBusiness = listVulHostsRequest.isAffectBusiness;
                    repairPriority = listVulHostsRequest.repairPriority;
                } else {
                    vulId = listVulHostsRequest['vul_id'];
                    type = listVulHostsRequest['type'];
                    enterpriseProjectId = listVulHostsRequest['enterprise_project_id'];
                    limit = listVulHostsRequest['limit'];
                    offset = listVulHostsRequest['offset'];
                    hostName = listVulHostsRequest['host_name'];
                    hostIp = listVulHostsRequest['host_ip'];
                    status = listVulHostsRequest['status'];
                    assetValue = listVulHostsRequest['asset_value'];
                    groupName = listVulHostsRequest['group_name'];
                    handleStatus = listVulHostsRequest['handle_status'];
                    severityLevel = listVulHostsRequest['severity_level'];
                    isAffectBusiness = listVulHostsRequest['is_affect_business'];
                    repairPriority = listVulHostsRequest['repair_priority'];
                }
            }

        
            if (vulId === null || vulId === undefined) {
                throw new RequiredError('vulId','Required parameter vulId was null or undefined when calling listVulHosts.');
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listVulHosts.');
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (severityLevel !== null && severityLevel !== undefined) {
                localVarQueryParameter['severity_level'] = severityLevel;
            }
            if (isAffectBusiness !== null && isAffectBusiness !== undefined) {
                localVarQueryParameter['is_affect_business'] = isAffectBusiness;
            }
            if (repairPriority !== null && repairPriority !== undefined) {
                localVarQueryParameter['repair_priority'] = repairPriority;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞扫描任务列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulScanTask(listVulScanTaskRequest?: ListVulScanTaskRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/scan-tasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let scanType;
            
            let taskId;
            
            let minStartTime;
            
            let maxStartTime;

            if (listVulScanTaskRequest !== null && listVulScanTaskRequest !== undefined) {
                if (listVulScanTaskRequest instanceof ListVulScanTaskRequest) {
                    enterpriseProjectId = listVulScanTaskRequest.enterpriseProjectId;
                    limit = listVulScanTaskRequest.limit;
                    offset = listVulScanTaskRequest.offset;
                    scanType = listVulScanTaskRequest.scanType;
                    taskId = listVulScanTaskRequest.taskId;
                    minStartTime = listVulScanTaskRequest.minStartTime;
                    maxStartTime = listVulScanTaskRequest.maxStartTime;
                } else {
                    enterpriseProjectId = listVulScanTaskRequest['enterprise_project_id'];
                    limit = listVulScanTaskRequest['limit'];
                    offset = listVulScanTaskRequest['offset'];
                    scanType = listVulScanTaskRequest['scan_type'];
                    taskId = listVulScanTaskRequest['task_id'];
                    minStartTime = listVulScanTaskRequest['min_start_time'];
                    maxStartTime = listVulScanTaskRequest['max_start_time'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (scanType !== null && scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }
            if (taskId !== null && taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }
            if (minStartTime !== null && minStartTime !== undefined) {
                localVarQueryParameter['min_start_time'] = minStartTime;
            }
            if (maxStartTime !== null && maxStartTime !== undefined) {
                localVarQueryParameter['max_start_time'] = maxStartTime;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞扫描任务对应的主机列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulScanTaskHost(listVulScanTaskHostRequest?: ListVulScanTaskHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/scan-task/{task_id}/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let taskId;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let scanStatus;

            if (listVulScanTaskHostRequest !== null && listVulScanTaskHostRequest !== undefined) {
                if (listVulScanTaskHostRequest instanceof ListVulScanTaskHostRequest) {
                    taskId = listVulScanTaskHostRequest.taskId;
                    enterpriseProjectId = listVulScanTaskHostRequest.enterpriseProjectId;
                    limit = listVulScanTaskHostRequest.limit;
                    offset = listVulScanTaskHostRequest.offset;
                    scanStatus = listVulScanTaskHostRequest.scanStatus;
                } else {
                    taskId = listVulScanTaskHostRequest['task_id'];
                    enterpriseProjectId = listVulScanTaskHostRequest['enterprise_project_id'];
                    limit = listVulScanTaskHostRequest['limit'];
                    offset = listVulScanTaskHostRequest['offset'];
                    scanStatus = listVulScanTaskHostRequest['scan_status'];
                }
            }

        
            if (taskId === null || taskId === undefined) {
            throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling listVulScanTaskHost.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (scanStatus !== null && scanStatus !== undefined) {
                localVarQueryParameter['scan_status'] = scanStatus;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'task_id': taskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVulnerabilities(listVulnerabilitiesRequest?: ListVulnerabilitiesRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/vulnerabilities",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let type;
            
            let vulId;
            
            let vulName;
            
            let limit;
            
            let offset;
            
            let repairPriority;
            
            let handleStatus;
            
            let cveId;
            
            let labelList;
            
            let status;
            
            let assetValue;
            
            let groupName;

            if (listVulnerabilitiesRequest !== null && listVulnerabilitiesRequest !== undefined) {
                if (listVulnerabilitiesRequest instanceof ListVulnerabilitiesRequest) {
                    enterpriseProjectId = listVulnerabilitiesRequest.enterpriseProjectId;
                    type = listVulnerabilitiesRequest.type;
                    vulId = listVulnerabilitiesRequest.vulId;
                    vulName = listVulnerabilitiesRequest.vulName;
                    limit = listVulnerabilitiesRequest.limit;
                    offset = listVulnerabilitiesRequest.offset;
                    repairPriority = listVulnerabilitiesRequest.repairPriority;
                    handleStatus = listVulnerabilitiesRequest.handleStatus;
                    cveId = listVulnerabilitiesRequest.cveId;
                    labelList = listVulnerabilitiesRequest.labelList;
                    status = listVulnerabilitiesRequest.status;
                    assetValue = listVulnerabilitiesRequest.assetValue;
                    groupName = listVulnerabilitiesRequest.groupName;
                } else {
                    enterpriseProjectId = listVulnerabilitiesRequest['enterprise_project_id'];
                    type = listVulnerabilitiesRequest['type'];
                    vulId = listVulnerabilitiesRequest['vul_id'];
                    vulName = listVulnerabilitiesRequest['vul_name'];
                    limit = listVulnerabilitiesRequest['limit'];
                    offset = listVulnerabilitiesRequest['offset'];
                    repairPriority = listVulnerabilitiesRequest['repair_priority'];
                    handleStatus = listVulnerabilitiesRequest['handle_status'];
                    cveId = listVulnerabilitiesRequest['cve_id'];
                    labelList = listVulnerabilitiesRequest['label_list'];
                    status = listVulnerabilitiesRequest['status'];
                    assetValue = listVulnerabilitiesRequest['asset_value'];
                    groupName = listVulnerabilitiesRequest['group_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (vulId !== null && vulId !== undefined) {
                localVarQueryParameter['vul_id'] = vulId;
            }
            if (vulName !== null && vulName !== undefined) {
                localVarQueryParameter['vul_name'] = vulName;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (repairPriority !== null && repairPriority !== undefined) {
                localVarQueryParameter['repair_priority'] = repairPriority;
            }
            if (handleStatus !== null && handleStatus !== undefined) {
                localVarQueryParameter['handle_status'] = handleStatus;
            }
            if (cveId !== null && cveId !== undefined) {
                localVarQueryParameter['cve_id'] = cveId;
            }
            if (labelList !== null && labelList !== undefined) {
                localVarQueryParameter['label_list'] = labelList;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (assetValue !== null && assetValue !== undefined) {
                localVarQueryParameter['asset_value'] = assetValue;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 记录用户查看漏洞任务管理页面的最后时间
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        recordUserViewVulTask(recordUserViewVulTaskRequest?: RecordUserViewVulTaskRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/vulnerability/task/user/trace",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (recordUserViewVulTaskRequest !== null && recordUserViewVulTaskRequest !== undefined) {
                if (recordUserViewVulTaskRequest instanceof RecordUserViewVulTaskRequest) {
                    body = recordUserViewVulTaskRequest.body
                    enterpriseProjectId = recordUserViewVulTaskRequest.enterpriseProjectId;
                } else {
                    body = recordUserViewVulTaskRequest['body'];
                    enterpriseProjectId = recordUserViewVulTaskRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞扫描策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVulScanPolicy(showVulScanPolicyRequest?: ShowVulScanPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/scan-policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showVulScanPolicyRequest !== null && showVulScanPolicyRequest !== undefined) {
                if (showVulScanPolicyRequest instanceof ShowVulScanPolicyRequest) {
                    enterpriseProjectId = showVulScanPolicyRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showVulScanPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询漏洞管理统计数据
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVulStatics(showVulStaticsRequest?: ShowVulStaticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showVulStaticsRequest !== null && showVulStaticsRequest !== undefined) {
                if (showVulStaticsRequest instanceof ShowVulStaticsRequest) {
                    enterpriseProjectId = showVulStaticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showVulStaticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 获取漏洞任务的未读数量
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVulTaskStatistics(showVulTaskStatisticsRequest?: ShowVulTaskStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/vulnerability/task/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showVulTaskStatisticsRequest !== null && showVulTaskStatisticsRequest !== undefined) {
                if (showVulTaskStatisticsRequest instanceof ShowVulTaskStatisticsRequest) {
                    enterpriseProjectId = showVulTaskStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showVulTaskStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 批量开启网页防篡改防护
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchStartWebTamperProtection(batchStartWebTamperProtectionRequest?: BatchStartWebTamperProtectionRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/webtamper/protection/batch-open",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (batchStartWebTamperProtectionRequest !== null && batchStartWebTamperProtectionRequest !== undefined) {
                if (batchStartWebTamperProtectionRequest instanceof BatchStartWebTamperProtectionRequest) {
                    body = batchStartWebTamperProtectionRequest.body
                    enterpriseProjectId = batchStartWebTamperProtectionRequest.enterpriseProjectId;
                } else {
                    body = batchStartWebTamperProtectionRequest['body'];
                    enterpriseProjectId = batchStartWebTamperProtectionRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 删除远端备份服务器
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteBackupHostInfo(deleteBackupHostInfoRequest?: DeleteBackupHostInfoRequest) {
            const options = {
                method: "DELETE",
                url: "/v5/{project_id}/wtp/backup-hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (deleteBackupHostInfoRequest !== null && deleteBackupHostInfoRequest !== undefined) {
                if (deleteBackupHostInfoRequest instanceof DeleteBackupHostInfoRequest) {
                    body = deleteBackupHostInfoRequest.body
                    enterpriseProjectId = deleteBackupHostInfoRequest.enterpriseProjectId;
                } else {
                    body = deleteBackupHostInfoRequest['body'];
                    enterpriseProjectId = deleteBackupHostInfoRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 导出网页防篡改防护目录列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        exportWebTamperHost(exportWebTamperHostRequest?: ExportWebTamperHostRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/webtamper/host/export",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (exportWebTamperHostRequest !== null && exportWebTamperHostRequest !== undefined) {
                if (exportWebTamperHostRequest instanceof ExportWebTamperHostRequest) {
                    body = exportWebTamperHostRequest.body
                    enterpriseProjectId = exportWebTamperHostRequest.enterpriseProjectId;
                } else {
                    body = exportWebTamperHostRequest['body'];
                    enterpriseProjectId = exportWebTamperHostRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询远端备份服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBackupHostsInfo(listBackupHostsInfoRequest?: ListBackupHostsInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/wtp/backup-hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let limit;
            
            let offset;
            
            let isRun;

            if (listBackupHostsInfoRequest !== null && listBackupHostsInfoRequest !== undefined) {
                if (listBackupHostsInfoRequest instanceof ListBackupHostsInfoRequest) {
                    enterpriseProjectId = listBackupHostsInfoRequest.enterpriseProjectId;
                    limit = listBackupHostsInfoRequest.limit;
                    offset = listBackupHostsInfoRequest.offset;
                    isRun = listBackupHostsInfoRequest.isRun;
                } else {
                    enterpriseProjectId = listBackupHostsInfoRequest['enterprise_project_id'];
                    limit = listBackupHostsInfoRequest['limit'];
                    offset = listBackupHostsInfoRequest['offset'];
                    isRun = listBackupHostsInfoRequest['is_run'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (isRun !== null && isRun !== undefined) {
                localVarQueryParameter['is_run'] = isRun;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询主机静态网页防篡改防护动态：展示服务器名称、服务器ip、防护策略、检测时间、防护文件、事件描述信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHostProtectHistoryInfo(listHostProtectHistoryInfoRequest?: ListHostProtectHistoryInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/webtamper/static/protect-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;
            
            let region;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let hostName;
            
            let hostIp;
            
            let filePath;
            
            let fileOperation;

            if (listHostProtectHistoryInfoRequest !== null && listHostProtectHistoryInfoRequest !== undefined) {
                if (listHostProtectHistoryInfoRequest instanceof ListHostProtectHistoryInfoRequest) {
                    startTime = listHostProtectHistoryInfoRequest.startTime;
                    endTime = listHostProtectHistoryInfoRequest.endTime;
                    limit = listHostProtectHistoryInfoRequest.limit;
                    offset = listHostProtectHistoryInfoRequest.offset;
                    region = listHostProtectHistoryInfoRequest.region;
                    enterpriseProjectId = listHostProtectHistoryInfoRequest.enterpriseProjectId;
                    hostId = listHostProtectHistoryInfoRequest.hostId;
                    hostName = listHostProtectHistoryInfoRequest.hostName;
                    hostIp = listHostProtectHistoryInfoRequest.hostIp;
                    filePath = listHostProtectHistoryInfoRequest.filePath;
                    fileOperation = listHostProtectHistoryInfoRequest.fileOperation;
                } else {
                    startTime = listHostProtectHistoryInfoRequest['start_time'];
                    endTime = listHostProtectHistoryInfoRequest['end_time'];
                    limit = listHostProtectHistoryInfoRequest['limit'];
                    offset = listHostProtectHistoryInfoRequest['offset'];
                    region = listHostProtectHistoryInfoRequest['region'];
                    enterpriseProjectId = listHostProtectHistoryInfoRequest['enterprise_project_id'];
                    hostId = listHostProtectHistoryInfoRequest['host_id'];
                    hostName = listHostProtectHistoryInfoRequest['host_name'];
                    hostIp = listHostProtectHistoryInfoRequest['host_ip'];
                    filePath = listHostProtectHistoryInfoRequest['file_path'];
                    fileOperation = listHostProtectHistoryInfoRequest['file_operation'];
                }
            }

        
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling listHostProtectHistoryInfo.');
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listHostProtectHistoryInfo.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listHostProtectHistoryInfo.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listHostProtectHistoryInfo.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostIp !== null && hostIp !== undefined) {
                localVarQueryParameter['host_ip'] = hostIp;
            }
            if (filePath !== null && filePath !== undefined) {
                localVarQueryParameter['file_path'] = filePath;
            }
            if (fileOperation !== null && fileOperation !== undefined) {
                localVarQueryParameter['file_operation'] = fileOperation;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询主机动态网页防篡改防护动态：包含告警级别、服务器ip、服务器名称、威胁类型、告警时间、攻击源ip、攻击源url信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listHostRaspProtectHistoryInfo(listHostRaspProtectHistoryInfoRequest?: ListHostRaspProtectHistoryInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/webtamper/rasp/protect-history",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let startTime;
            
            let endTime;
            
            let limit;
            
            let offset;
            
            let region;
            
            let enterpriseProjectId;
            
            let hostId;
            
            let alarmLevel;
            
            let severity;
            
            let protectStatus;

            if (listHostRaspProtectHistoryInfoRequest !== null && listHostRaspProtectHistoryInfoRequest !== undefined) {
                if (listHostRaspProtectHistoryInfoRequest instanceof ListHostRaspProtectHistoryInfoRequest) {
                    startTime = listHostRaspProtectHistoryInfoRequest.startTime;
                    endTime = listHostRaspProtectHistoryInfoRequest.endTime;
                    limit = listHostRaspProtectHistoryInfoRequest.limit;
                    offset = listHostRaspProtectHistoryInfoRequest.offset;
                    region = listHostRaspProtectHistoryInfoRequest.region;
                    enterpriseProjectId = listHostRaspProtectHistoryInfoRequest.enterpriseProjectId;
                    hostId = listHostRaspProtectHistoryInfoRequest.hostId;
                    alarmLevel = listHostRaspProtectHistoryInfoRequest.alarmLevel;
                    severity = listHostRaspProtectHistoryInfoRequest.severity;
                    protectStatus = listHostRaspProtectHistoryInfoRequest.protectStatus;
                } else {
                    startTime = listHostRaspProtectHistoryInfoRequest['start_time'];
                    endTime = listHostRaspProtectHistoryInfoRequest['end_time'];
                    limit = listHostRaspProtectHistoryInfoRequest['limit'];
                    offset = listHostRaspProtectHistoryInfoRequest['offset'];
                    region = listHostRaspProtectHistoryInfoRequest['region'];
                    enterpriseProjectId = listHostRaspProtectHistoryInfoRequest['enterprise_project_id'];
                    hostId = listHostRaspProtectHistoryInfoRequest['host_id'];
                    alarmLevel = listHostRaspProtectHistoryInfoRequest['alarm_level'];
                    severity = listHostRaspProtectHistoryInfoRequest['severity'];
                    protectStatus = listHostRaspProtectHistoryInfoRequest['protect_status'];
                }
            }

        
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling listHostRaspProtectHistoryInfo.');
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling listHostRaspProtectHistoryInfo.');
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listHostRaspProtectHistoryInfo.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling listHostRaspProtectHistoryInfo.');
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (alarmLevel !== null && alarmLevel !== undefined) {
                localVarQueryParameter['alarm_level'] = alarmLevel;
            }
            if (severity !== null && severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询可开启网页防篡改的服务器列表
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWebTamperHost(listWebTamperHostRequest?: ListWebTamperHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/webtamper/host-management/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;
            
            let offset;
            
            let limit;
            
            let hostId;
            
            let hostName;
            
            let privateIp;
            
            let publicIp;
            
            let groupId;
            
            let osType;
            
            let webAppName;

            if (listWebTamperHostRequest !== null && listWebTamperHostRequest !== undefined) {
                if (listWebTamperHostRequest instanceof ListWebTamperHostRequest) {
                    enterpriseProjectId = listWebTamperHostRequest.enterpriseProjectId;
                    offset = listWebTamperHostRequest.offset;
                    limit = listWebTamperHostRequest.limit;
                    hostId = listWebTamperHostRequest.hostId;
                    hostName = listWebTamperHostRequest.hostName;
                    privateIp = listWebTamperHostRequest.privateIp;
                    publicIp = listWebTamperHostRequest.publicIp;
                    groupId = listWebTamperHostRequest.groupId;
                    osType = listWebTamperHostRequest.osType;
                    webAppName = listWebTamperHostRequest.webAppName;
                } else {
                    enterpriseProjectId = listWebTamperHostRequest['enterprise_project_id'];
                    offset = listWebTamperHostRequest['offset'];
                    limit = listWebTamperHostRequest['limit'];
                    hostId = listWebTamperHostRequest['host_id'];
                    hostName = listWebTamperHostRequest['host_name'];
                    privateIp = listWebTamperHostRequest['private_ip'];
                    publicIp = listWebTamperHostRequest['public_ip'];
                    groupId = listWebTamperHostRequest['group_id'];
                    osType = listWebTamperHostRequest['os_type'];
                    webAppName = listWebTamperHostRequest['web_app_name'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (groupId !== null && groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (webAppName !== null && webAppName !== undefined) {
                localVarQueryParameter['web_app_name'] = webAppName;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询防护列表：查询网页防篡改主机防护状态列表信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listWtpProtectHost(listWtpProtectHostRequest?: ListWtpProtectHostRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/webtamper/hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let region;
            
            let enterpriseProjectId;
            
            let hostName;
            
            let hostId;
            
            let publicIp;
            
            let privateIp;
            
            let groupName;
            
            let osType;
            
            let protectStatus;
            
            let wtpStatus;
            
            let agentStatus;
            
            let limit;
            
            let offset;

            if (listWtpProtectHostRequest !== null && listWtpProtectHostRequest !== undefined) {
                if (listWtpProtectHostRequest instanceof ListWtpProtectHostRequest) {
                    region = listWtpProtectHostRequest.region;
                    enterpriseProjectId = listWtpProtectHostRequest.enterpriseProjectId;
                    hostName = listWtpProtectHostRequest.hostName;
                    hostId = listWtpProtectHostRequest.hostId;
                    publicIp = listWtpProtectHostRequest.publicIp;
                    privateIp = listWtpProtectHostRequest.privateIp;
                    groupName = listWtpProtectHostRequest.groupName;
                    osType = listWtpProtectHostRequest.osType;
                    protectStatus = listWtpProtectHostRequest.protectStatus;
                    wtpStatus = listWtpProtectHostRequest.wtpStatus;
                    agentStatus = listWtpProtectHostRequest.agentStatus;
                    limit = listWtpProtectHostRequest.limit;
                    offset = listWtpProtectHostRequest.offset;
                } else {
                    region = listWtpProtectHostRequest['region'];
                    enterpriseProjectId = listWtpProtectHostRequest['enterprise_project_id'];
                    hostName = listWtpProtectHostRequest['host_name'];
                    hostId = listWtpProtectHostRequest['host_id'];
                    publicIp = listWtpProtectHostRequest['public_ip'];
                    privateIp = listWtpProtectHostRequest['private_ip'];
                    groupName = listWtpProtectHostRequest['group_name'];
                    osType = listWtpProtectHostRequest['os_type'];
                    protectStatus = listWtpProtectHostRequest['protect_status'];
                    wtpStatus = listWtpProtectHostRequest['wtp_status'];
                    agentStatus = listWtpProtectHostRequest['agent_status'];
                    limit = listWtpProtectHostRequest['limit'];
                    offset = listWtpProtectHostRequest['offset'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            if (hostId !== null && hostId !== undefined) {
                localVarQueryParameter['host_id'] = hostId;
            }
            if (publicIp !== null && publicIp !== undefined) {
                localVarQueryParameter['public_ip'] = publicIp;
            }
            if (privateIp !== null && privateIp !== undefined) {
                localVarQueryParameter['private_ip'] = privateIp;
            }
            if (groupName !== null && groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }
            if (osType !== null && osType !== undefined) {
                localVarQueryParameter['os_type'] = osType;
            }
            if (protectStatus !== null && protectStatus !== undefined) {
                localVarQueryParameter['protect_status'] = protectStatus;
            }
            if (wtpStatus !== null && wtpStatus !== undefined) {
                localVarQueryParameter['wtp_status'] = wtpStatus;
            }
            if (agentStatus !== null && agentStatus !== undefined) {
                localVarQueryParameter['agent_status'] = agentStatus;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 暂停或恢复网页防篡改的防护目录
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setProtectDirSwitchInfo(setProtectDirSwitchInfoRequest?: SetProtectDirSwitchInfoRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/wtp/{host_id}/protect-directories/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let hostId;
            
            let enterpriseProjectId;

            if (setProtectDirSwitchInfoRequest !== null && setProtectDirSwitchInfoRequest !== undefined) {
                if (setProtectDirSwitchInfoRequest instanceof SetProtectDirSwitchInfoRequest) {
                    hostId = setProtectDirSwitchInfoRequest.hostId;
                    body = setProtectDirSwitchInfoRequest.body
                    enterpriseProjectId = setProtectDirSwitchInfoRequest.enterpriseProjectId;
                } else {
                    hostId = setProtectDirSwitchInfoRequest['host_id'];
                    body = setProtectDirSwitchInfoRequest['body'];
                    enterpriseProjectId = setProtectDirSwitchInfoRequest['enterprise_project_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling setProtectDirSwitchInfo.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启/关闭动态网页防篡改防护，下发/清空动态网页防篡改策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setRaspSwitch(setRaspSwitchRequest?: SetRaspSwitchRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/webtamper/rasp/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let contentType;
            
            let region;
            
            let enterpriseProjectId;

            if (setRaspSwitchRequest !== null && setRaspSwitchRequest !== undefined) {
                if (setRaspSwitchRequest instanceof SetRaspSwitchRequest) {
                    body = setRaspSwitchRequest.body
                    contentType = setRaspSwitchRequest.contentType;
                    region = setRaspSwitchRequest.region;
                    enterpriseProjectId = setRaspSwitchRequest.enterpriseProjectId;
                } else {
                    body = setRaspSwitchRequest['body'];
                    contentType = setRaspSwitchRequest['Content-Type'];
                    region = setRaspSwitchRequest['region'];
                    enterpriseProjectId = setRaspSwitchRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 为已开启网页防篡改的服务器，开启或关闭远端备份功能，仅限Linux服务器
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setRemoteBackupInfo(setRemoteBackupInfoRequest?: SetRemoteBackupInfoRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/wtp/{host_id}/set-remote-backup",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let hostId;
            
            let enterpriseProjectId;

            if (setRemoteBackupInfoRequest !== null && setRemoteBackupInfoRequest !== undefined) {
                if (setRemoteBackupInfoRequest instanceof SetRemoteBackupInfoRequest) {
                    hostId = setRemoteBackupInfoRequest.hostId;
                    body = setRemoteBackupInfoRequest.body
                    enterpriseProjectId = setRemoteBackupInfoRequest.enterpriseProjectId;
                } else {
                    hostId = setRemoteBackupInfoRequest['host_id'];
                    body = setRemoteBackupInfoRequest['body'];
                    enterpriseProjectId = setRemoteBackupInfoRequest['enterprise_project_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling setRemoteBackupInfo.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 开启/关闭网页防篡改功能防护，下发/清空网页防篡改策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        setWtpProtectionStatusInfo(setWtpProtectionStatusInfoRequest?: SetWtpProtectionStatusInfoRequest) {
            const options = {
                method: "POST",
                url: "/v5/{project_id}/webtamper/static/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let contentType;
            
            let region;
            
            let enterpriseProjectId;

            if (setWtpProtectionStatusInfoRequest !== null && setWtpProtectionStatusInfoRequest !== undefined) {
                if (setWtpProtectionStatusInfoRequest instanceof SetWtpProtectionStatusInfoRequest) {
                    body = setWtpProtectionStatusInfoRequest.body
                    contentType = setWtpProtectionStatusInfoRequest.contentType;
                    region = setWtpProtectionStatusInfoRequest.region;
                    enterpriseProjectId = setWtpProtectionStatusInfoRequest.enterpriseProjectId;
                } else {
                    body = setWtpProtectionStatusInfoRequest['body'];
                    contentType = setWtpProtectionStatusInfoRequest['Content-Type'];
                    region = setWtpProtectionStatusInfoRequest['region'];
                    enterpriseProjectId = setWtpProtectionStatusInfoRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (region !== undefined && region !== null) {
                localVarHeaderParameter['region'] = String(region);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询远端备份服务器信息：查询远端备份服务器的相关信息，包含服务器名称、地址、端口号、备份路径、运行状态信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRemoteBackupHostInfo(showRemoteBackupHostInfoRequest?: ShowRemoteBackupHostInfoRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/wtp/{host_id}/backup-host",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;

            if (showRemoteBackupHostInfoRequest !== null && showRemoteBackupHostInfoRequest !== undefined) {
                if (showRemoteBackupHostInfoRequest instanceof ShowRemoteBackupHostInfoRequest) {
                    hostId = showRemoteBackupHostInfoRequest.hostId;
                    enterpriseProjectId = showRemoteBackupHostInfoRequest.enterpriseProjectId;
                } else {
                    hostId = showRemoteBackupHostInfoRequest['host_id'];
                    enterpriseProjectId = showRemoteBackupHostInfoRequest['enterprise_project_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showRemoteBackupHostInfo.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查看网页防篡改策略信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showWebTamperHostPolicy(showWebTamperHostPolicyRequest?: ShowWebTamperHostPolicyRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/webtamper/{host_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;

            if (showWebTamperHostPolicyRequest !== null && showWebTamperHostPolicyRequest !== undefined) {
                if (showWebTamperHostPolicyRequest instanceof ShowWebTamperHostPolicyRequest) {
                    hostId = showWebTamperHostPolicyRequest.hostId;
                    enterpriseProjectId = showWebTamperHostPolicyRequest.enterpriseProjectId;
                } else {
                    hostId = showWebTamperHostPolicyRequest['host_id'];
                    enterpriseProjectId = showWebTamperHostPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showWebTamperHostPolicy.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 查询动态网页防篡改的Tomcat bin目录：查询动态网页防篡改功能配置的Tomcat bin目录
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showWebTamperRaspPath(showWebTamperRaspPathRequest?: ShowWebTamperRaspPathRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/wtp/{host_id}/rasp-path",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let hostName;

            if (showWebTamperRaspPathRequest !== null && showWebTamperRaspPathRequest !== undefined) {
                if (showWebTamperRaspPathRequest instanceof ShowWebTamperRaspPathRequest) {
                    hostId = showWebTamperRaspPathRequest.hostId;
                    enterpriseProjectId = showWebTamperRaspPathRequest.enterpriseProjectId;
                    hostName = showWebTamperRaspPathRequest.hostName;
                } else {
                    hostId = showWebTamperRaspPathRequest['host_id'];
                    enterpriseProjectId = showWebTamperRaspPathRequest['enterprise_project_id'];
                    hostName = showWebTamperRaspPathRequest['host_name'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling showWebTamperRaspPath.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }

            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 防护数据统计：统计防护服务器数、防护目录数、近七天的已防御篡改攻击数
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showWtpProtectStatistics(showWtpProtectStatisticsRequest?: ShowWtpProtectStatisticsRequest) {
            const options = {
                method: "GET",
                url: "/v5/{project_id}/wtp/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            let enterpriseProjectId;

            if (showWtpProtectStatisticsRequest !== null && showWtpProtectStatisticsRequest !== undefined) {
                if (showWtpProtectStatisticsRequest instanceof ShowWtpProtectStatisticsRequest) {
                    enterpriseProjectId = showWtpProtectStatisticsRequest.enterpriseProjectId;
                } else {
                    enterpriseProjectId = showWtpProtectStatisticsRequest['enterprise_project_id'];
                }
            }

        
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }

            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 添加或修改远端备份服务器
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateBackupHostInfo(updateBackupHostInfoRequest?: UpdateBackupHostInfoRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/wtp/backup-hosts",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let enterpriseProjectId;

            if (updateBackupHostInfoRequest !== null && updateBackupHostInfoRequest !== undefined) {
                if (updateBackupHostInfoRequest instanceof UpdateBackupHostInfoRequest) {
                    body = updateBackupHostInfoRequest.body
                    enterpriseProjectId = updateBackupHostInfoRequest.enterpriseProjectId;
                } else {
                    body = updateBackupHostInfoRequest['body'];
                    enterpriseProjectId = updateBackupHostInfoRequest['enterprise_project_id'];
                }
            }

        
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 编辑网页防篡改策略信息
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateWebTamperHostPolicy(updateWebTamperHostPolicyRequest?: UpdateWebTamperHostPolicyRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/webtamper/{host_id}/policy",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let hostId;
            
            let enterpriseProjectId;

            if (updateWebTamperHostPolicyRequest !== null && updateWebTamperHostPolicyRequest !== undefined) {
                if (updateWebTamperHostPolicyRequest instanceof UpdateWebTamperHostPolicyRequest) {
                    hostId = updateWebTamperHostPolicyRequest.hostId;
                    body = updateWebTamperHostPolicyRequest.body
                    enterpriseProjectId = updateWebTamperHostPolicyRequest.enterpriseProjectId;
                } else {
                    hostId = updateWebTamperHostPolicyRequest['host_id'];
                    body = updateWebTamperHostPolicyRequest['body'];
                    enterpriseProjectId = updateWebTamperHostPolicyRequest['enterprise_project_id'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling updateWebTamperHostPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
        /**
         * 修改动态网页防篡改的Tomcat bin目录：修改动态网页防篡改的Tomcat bin目录，重新下发动态网页防篡改策略
         * 
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateWebTamperRaspPath(updateWebTamperRaspPathRequest?: UpdateWebTamperRaspPathRequest) {
            const options = {
                method: "PUT",
                url: "/v5/{project_id}/wtp/{host_id}/rasp-path",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            let body: any;
            
            let hostId;
            
            let enterpriseProjectId;
            
            let hostName;

            if (updateWebTamperRaspPathRequest !== null && updateWebTamperRaspPathRequest !== undefined) {
                if (updateWebTamperRaspPathRequest instanceof UpdateWebTamperRaspPathRequest) {
                    hostId = updateWebTamperRaspPathRequest.hostId;
                    body = updateWebTamperRaspPathRequest.body
                    enterpriseProjectId = updateWebTamperRaspPathRequest.enterpriseProjectId;
                    hostName = updateWebTamperRaspPathRequest.hostName;
                } else {
                    hostId = updateWebTamperRaspPathRequest['host_id'];
                    body = updateWebTamperRaspPathRequest['body'];
                    enterpriseProjectId = updateWebTamperRaspPathRequest['enterprise_project_id'];
                    hostName = updateWebTamperRaspPathRequest['host_name'];
                }
            }

        
            if (hostId === null || hostId === undefined) {
            throw new RequiredError('hostId','Required parameter hostId was null or undefined when calling updateWebTamperRaspPath.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling body.');
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (hostName !== null && hostName !== undefined) {
                localVarQueryParameter['host_name'] = hostName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';

            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'host_id': hostId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    
    }
};

function newClient(client: HcClient): HssClient {
    return new HssClient(client);
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}